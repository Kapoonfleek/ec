variables:
	{dmgdealt::%player%} = 0
	{space} = ""
	{space2} = ""
function CombatRefresh(v: entity):
	if tag "custom;ECMob" of nbt of {_v} is set:
		if metadata value "ECEngaged" of {_v} is not set:
			set metadata value "ECEngaged" of {_v} to 60
			while metadata value "ECEngaged" of {_v} > -1:
				if metadata value "ECEngaged" of {_v} > 0:
					wait 1 second
					set {_tag} to metadata value "ECEngaged" of {_v}
					remove 1 from {_tag}
					set metadata value "ECEngaged" of {_v} to {_tag}
				else:
					clear metadata value "ECEngaged" of {_v}
					clear {asyst::%uuid of {_v}%::*}
					clear {lastdmgcauselore::%{_v}%::*}
					clear metadata value "LastDamageCause" of {_v}
					clear {lastdmgcauseloreEN::%{_v}%::*}
					clear metadata value "LastDamageCauseEN" of {_v}			
		else:
			set metadata value "ECEngaged" of {_v} to 60
function HealRefresh(p: player, h: number):
	if metadata value "ECEngaged" of {_p} is not set:
		set {_id} to line 19 of lore of {karta::%{_p}%}
		set {healed::%{_p}%} to 0
		set {hps::%{_p}%} to 0
		clear {healcard::%{kartaname::%{_p}%}%::%{_id}%::*}
		clear {dmgbreak::%{kartaname::%{_p}%}%::%{_id}%::*}
		add {_h} to {healed::%{_p}%}
		if metadata value "DungeonInstance" of {_p} is not set:
			clear scoreboard of {_p}
			set metadata value "ECEngaged" of {_p} to 60
			while metadata value "ECEngaged" of {_p} > -1:
				if metadata value "ECEngaged" of {_p} > 0:
					wait 1 second
					set {_tag} to metadata value "ECEngaged" of {_p}
					remove 1 from {_tag}
					set metadata value "ECEngaged" of {_p} to {_tag}
				else:
					set {_data} to data()
					if {hps::%{_p}%} is set:
						log "%{_data}% %{_p}% exit combat with %{dmgdealt::%{_p}%}% damage dealt, | %{dps::%{_p}%}% DPS, %{healed::%{_p}%}% health healed and %{hps::%{_p}%}% HPS. Fight duration: %{seconds::%{_p}%}% seconds" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"
					else:
						log "%{_data}% %{_p}% exit combat with %{dmgdealt::%{_p}%}% damage dealt and | %{dps::%{_p}%}% DPS. Fight duration: %{seconds::%{_p}%}% seconds" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"
					set {healed::%{_p}%} to 0
					set {hps::%{_p}%} to 0
					clear metadata value "ECEngaged" of {_p}
					clear {seconds::%{_p}%}
					set {_id} to line 19 of lore of {karta::%{_p}%}
					clear {healcard::%{kartaname::%{_p}%}%::%{_id}%::*}
					clear {dmgbreak::%{kartaname::%{_p}%}%::%{_id}%::*}
	else:
		set metadata value "ECEngaged" of {_p} to 60
		add {_h} to {healed::%{_p}%}
	set {hps::%{_p}%} to {healed::%{_p}%}/{seconds::%{_p}%}
	if metadata value "DungeonInstance" of {_p} is not set:
		wait 1 tick
		if title of {_p}'s scoreboard is set:
			if {meter::%{_p}%} = "healing":
				set {_kolorek} to KolorekScoreboard({_p})
				set title of {_p}'s scoreboard to "&f&l«-───▬ %{_kolorek}%&lEC &f&l▬───-»"
				set line 12 of {_p}'s scoreboard to ""
				if {language::%{_p}%} = "English":
					set line 11 of {_p}'s scoreboard to " &fIn combat for: %{_kolorek}%%{seconds::%{_p}%}% seconds     "
				else:
					set line 11 of {_p}'s scoreboard to " &fW walce od: %{_kolorek}%%{seconds::%{_p}%}% sekund     "
				set line 10 of {_p}'s scoreboard to " "
				set {_x} to first element of createTop("healed", 5, "[P]")
				set {_x2} to 2nd element of createTop("healed", 5, "[P]")
				set {_x3} to 3rd element of createTop("healed", 5, "[P]")
				set {_x4} to 4th element of createTop("healed", 5, "[P]")
				set {_x5} to 5th element of createTop("healed", 5, "[P]")
				if {healed::%{_x}%} > 0:
					set line 9 of {_p}'s scoreboard to "  &f1. &f%{ikonkakarta::%{_x}%}%%{kartacolor::%{_x}%}%%first element of createTop("healed", 5, "[P]")% &f%first element of createTop("healed", 5, "[V]")% %{kartacolor::%{_x}%}%HEAL | &f%{hps::%{_x}%}% %{kartacolor::%{_x}%}%HPS"
				if {healed::%{_x2}%} > 0:
					set line 8 of {_p}'s scoreboard to "  &f2. &f%{ikonkakarta::%{_x2}%}%%{kartacolor::%{_x2}%}%%2nd element of createTop("healed", 5, "[P]")% &f%2nd element of createTop("healed", 5, "[V]")% %{kartacolor::%{_x}%}%HEAL | &f%{hps::%{_x2}%}% %{kartacolor::%{_x}%}%HPS"
				if {healed::%{_x3}%} > 0:
					set line 7 of {_p}'s scoreboard to "  &f3. &f%{ikonkakarta::%{_x3}%}%%{kartacolor::%{_x3}%}%%3rd element of createTop("healed", 5, "[P]")% &f%3rd element of createTop("healed", 5, "[V]")% %{kartacolor::%{_x}%}%HEAL | &f%{hps::%{_x3}%}% %{kartacolor::%{_x}%}%HPS"
				if {healed::%{_x4}%} > 0:
					set line 6 of {_p}'s scoreboard to "  &f4. %{ikonkakarta::%{_x4}%}%%{kartacolor::%{_x4}%}%%4th element of createTop("healed", 5, "[P]")% &f%4th element of createTop("healed", 5, "[V]")% %{kartacolor::%{_x}%}%HEAL | &f%{hps::%{_x4}%}% %{kartacolor::%{_x}%}%HPS"
				if {healed::%{_x5}%} > 0:
					set line 5 of {_p}'s scoreboard to "  &f5. %{ikonkakarta::%{_x5}%}%%{kartacolor::%{_x5}%}%%5th element of createTop("healed", 5, "[P]")% &f%5th element of createTop("healed", 5, "[V]")% %{kartacolor::%{_x}%}%HEAL | &f%{hps::%{_x5}%}% %{kartacolor::%{_x}%}%HPS"
				set line 4 of {_p}'s scoreboard to ""
			else:
				set {_kolorek} to KolorekScoreboard({_p})
				set title of {_p}'s scoreboard to "&f&l«-───▬ %{_kolorek}%&lEC &f&l▬───-»"
				set line 12 of {_p}'s scoreboard to ""
				if {language::%{_p}%} = "English":
					set line 11 of {_p}'s scoreboard to " &fIn combat for: %{_kolorek}%%{seconds::%{_p}%}% seconds     "
				else:
					set line 11 of {_p}'s scoreboard to " &fW walce od: %{_kolorek}%%{seconds::%{_p}%}% sekund     "
				set line 10 of {_p}'s scoreboard to " "
				set {_x} to first element of createTop("dmgdealt", 5, "[P]")
				set {_x2} to 2nd element of createTop("dmgdealt", 5, "[P]")
				set {_x3} to 3rd element of createTop("dmgdealt", 5, "[P]")
				set {_x4} to 4th element of createTop("dmgdealt", 5, "[P]")
				set {_x5} to 5th element of createTop("dmgdealt", 5, "[P]")
				if {dmgdealt::%{_x}%} > 0:
					set line 9 of {_p}'s scoreboard to "  &f1. &f%{ikonkakarta::%{_x}%}%%{kartacolor::%{_x}%}%%first element of createTop("dmgdealt", 5, "[P]")% &f%first element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x}%}%DMG | &f%{dps::%{_x}%}% %{kartacolor::%{_x}%}%DPS"
				if {dmgdealt::%{_x2}%} > 0:
					set line 8 of {_p}'s scoreboard to "  &f2. &f%{ikonkakarta::%{_x2}%}%%{kartacolor::%{_x2}%}%%2nd element of createTop("dmgdealt", 5, "[P]")% &f%2nd element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x}%}%DMG | &f%{dps::%{_x2}%}% %{kartacolor::%{_x}%}%DPS"
				if {dmgdealt::%{_x3}%} > 0:
					set line 7 of {_p}'s scoreboard to "  &f3. &f%{ikonkakarta::%{_x3}%}%%{kartacolor::%{_x3}%}%%3rd element of createTop("dmgdealt", 5, "[P]")% &f%3rd element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x}%}%DMG | &f%{dps::%{_x3}%}% %{kartacolor::%{_x}%}%DPS"
				if {dmgdealt::%{_x4}%} > 0:
					set line 6 of {_p}'s scoreboard to "  &f4. %{ikonkakarta::%{_x4}%}%%{kartacolor::%{_x4}%}%%4th element of createTop("dmgdealt", 5, "[P]")% &f%4th element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x}%}%DMG | &f%{dps::%{_x4}%}% %{kartacolor::%{_x}%}%DPS"
				if {dmgdealt::%{_x5}%} > 0:
					set line 5 of {_p}'s scoreboard to "  &f5. %{ikonkakarta::%{_x5}%}%%{kartacolor::%{_x5}%}%%5th element of createTop("dmgdealt", 5, "[P]")% &f%5th element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x}%}%DMG | &f%{dps::%{_x5}%}% %{kartacolor::%{_x}%}%DPS"
				set line 4 of {_p}'s scoreboard to ""
	if metadata value "ECEngaged" of {_p} is not set:
		clear {_p}'s scoreboard
		UpdateScoreboard({_p})
function HealAssist(p: player, e: entity):
	loop {incombatwith::%{_e}%::*}:
		if {asyst::%uuid of loop-value%::*} does not contain uuid of {_p}:
			add uuid of {_p} to {asyst::%uuid of loop-value%::*}
on damage:
	if attacker is a player:
		if damage is not 0:
			#set metadata value "ECEngaged" of attacker to true
			CombatRefresh(victim)
			if metadata value "ECEngaged" of attacker is not set:
				set {dmgdealt::%attacker%} to 0
				set {dps::%attacker%} to 0
				set {_id} to line 19 of lore of {karta::%attacker%}
				if {kartaname::%attacker%} = "Cresselia":
					ShootingStars(attacker)
					AstralPower(attacker)
				clear {dmgbreak::%{kartaname::%attacker%}%::%{_id}%::*}
				if metadata value "DungeonInstance" of attacker is not set:
					clear scoreboard of attacker
				set metadata value "ECEngaged" of attacker to 60
				if {incombatwith::%attacker%::*} does not contain victim:
					add uuid of victim to {incombatwith::%attacker%::*}
				if name of attacker = "agnes":
					set {agnesstop} to true
					#equip citizen 6512 with diamond sword
				while metadata value "ECEngaged" of attacker > -1:
					if metadata value "ECEngaged" of attacker > 0:
						inCombat(attacker)
						wait 1 second
						set {_tag} to metadata value "ECEngaged" of attacker
						remove 1 from {_tag}
						set metadata value "ECEngaged" of attacker to {_tag}
					else:
						set {_data} to data()
						if {hps::%attacker%} > 0:
							log "%{_data}% %attacker% exit combat with %{dmgdealt::%attacker%}% damage dealt, | %{dps::%attacker%}% DPS, %{healed::%attacker%}% health healed and %{hps::%attacker%}% HPS. Fight duration: %{seconds::%attacker%}% seconds" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"
						else:
							log "%{_data}% %attacker% exit combat with %{dmgdealt::%attacker%}% damage dealt and | %{dps::%attacker%}% DPS. Fight duration: %{seconds::%attacker%}% seconds" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"
						log "%{_data}% Damage breakdown of %attacker%:" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"	
						LogDmgBreakdown(attacker)
						clear metadata value "ECEngaged" of attacker
						clear {seconds::%attacker%}
						clear {lavasurge::%attacker%}
						clear {magmaarea::%attacker%}
						clear {circleofwater::%attacker%}
						clear {extraSecondsIcyVeins::%attacker%}
						clear {ascendanceDuration::%attacker%}
						clear {lavakeeper::%attacker%}
						clear {lavafury::%attacker%}
						clear metadata value "Lava Wave" of attacker
						loop 7 times:
							set {_icicle} to {icicle%loop-number%::%attacker%}
							kill {_icicle}
							clear {icicle%loop-number%::%attacker%}
						clear {icicles::%attacker%}
						clear {iciclehave::%attacker%}
						set {astralpower::%attacker%} to 50
						set {healed::%{_p}%} to 0
						set {hps::%{_p}%} to 0
						set {frozenfingers::%attacker%} to 0
						set {dmgdealt::%attacker%} to 0
						set {dps::%attacker%} to 0
						set {_uuid} to uuid of attacker
						set {tarcza::%{_uuid}%} to 0
						set {_id} to line 19 of lore of {karta::%attacker%}
						remove uuid of attacker from {asyst::%uuid of victim%::*}
						set {mobilnosc::%attacker%} to 0
						clear {lastdmgcauselore::%attacker%::*}
						clear metadata value "LastDamageCause" of attacker
						clear {lastdmgcauseloreEN::%attacker%::*}
						clear metadata value "LastDamageCauseEN" of attacker
						clear {incombatwith::%attacker%::*}
						send title " " with subtitle " " to attacker for 0 seconds with fade in 0 second and fade out 0 second
						if {agnesstop} is true:
							clear {agnesstop}
						#set {_mob} to {mobilnosc::%attacker%}/5000
						#set attacker's walking speed to 0.2
			else:
				set metadata value "ECEngaged" of attacker to 60
			set {dps::%attacker%} to {dmgdealt::%attacker%}/{seconds::%attacker%}
			set {_health1} to victim's health
			wait 1 tick
			if {_health1} != victim's health:
				if metadata value "DungeonInstance" of attacker is not set:
					if title of attacker's scoreboard is set:
						if {meter::%attacker%} is not "healing":
							set {_kolorek} to KolorekScoreboard(attacker)
							set title of attacker's scoreboard to "&f&l«-───▬ %{_kolorek}%&lEC &f&l▬───-»"
							set line 12 of attacker's scoreboard to ""
							if {language::%attacker%} = "English":
								set line 11 of attacker's scoreboard to " &fIn combat for: %{_kolorek}%%{seconds::%attacker%}% seconds     "
							else:
								set line 11 of attacker's scoreboard to " &fW walce od: %{_kolorek}%%{seconds::%attacker%}% sekund     "
							set line 10 of attacker's scoreboard to " "
							set {_x} to first element of createTop("dmgdealt", 5, "[P]")
							set {_x2} to 2nd element of createTop("dmgdealt", 5, "[P]")
							set {_x3} to 3rd element of createTop("dmgdealt", 5, "[P]")
							set {_x4} to 4th element of createTop("dmgdealt", 5, "[P]")
							set {_x5} to 5th element of createTop("dmgdealt", 5, "[P]")
							if {dmgdealt::%{_x}%} > 0:
								set line 9 of attacker's scoreboard to "  &f1. &f%{ikonkakarta::%{_x}%}%%{kartacolor::%{_x}%}%%first element of createTop("dmgdealt", 5, "[P]")% &f%first element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x}%}%DMG | &f%{dps::%{_x}%}% %{kartacolor::%{_x}%}%DPS"
							if {dmgdealt::%{_x2}%} > 0:
								set line 8 of attacker's scoreboard to "  &f2. &f%{ikonkakarta::%{_x2}%}%%{kartacolor::%{_x2}%}%%2nd element of createTop("dmgdealt", 5, "[P]")% &f%2nd element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x2}%}%DMG | &f%{dps::%{_x2}%}% %{kartacolor::%{_x2}%}%DPS"
							if {dmgdealt::%{_x3}%} > 0:
								set line 7 of attacker's scoreboard to "  &f3. &f%{ikonkakarta::%{_x3}%}%%{kartacolor::%{_x3}%}%%3rd element of createTop("dmgdealt", 5, "[P]")% &f%3rd element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x3}%}%DMG | &f%{dps::%{_x3}%}% %{kartacolor::%{_x3}%}%DPS"
							if {dmgdealt::%{_x4}%} > 0:
								set line 6 of attacker's scoreboard to "  &f4. %{ikonkakarta::%{_x4}%}%%{kartacolor::%{_x4}%}%%4th element of createTop("dmgdealt", 5, "[P]")% &f%4th element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x4}%}%DMG | &f%{dps::%{_x4}%}% %{kartacolor::%{_x4}%}%DPS"
							if {dmgdealt::%{_x5}%} > 0:
								set line 5 of attacker's scoreboard to "  &f5. %{ikonkakarta::%{_x5}%}%%{kartacolor::%{_x5}%}%%5th element of createTop("dmgdealt", 5, "[P]")% &f%5th element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x5}%}%DMG | &f%{dps::%{_x5}%}% %{kartacolor::%{_x5}%}%DPS"
							set line 4 of attacker's scoreboard to ""
			if metadata value "ECEngaged" of attacker is not set:
				if metadata value "DungeonInstance" of attacker is not set:
					clear attacker's scoreboard
					UpdateScoreboard(attacker)
			#while metadata value "ECEngaged" of attacker = true:
				#add 1 to {seconds::%attacker%}
				#wait 1 second
on leave:
	wait 60 seconds
	if player is not online:
		clear metadata value "ECEngaged" of player
		clear {seconds::%player%}
		clear {seconds::%player%}
		set {dps::%player%} to 0
		set {dmgdealt::%player%} to 0
		clear {incombatwith::%player%::*}
		clear {icicles::%player%}
		set {astralpower::%player%} to 50
		set {_id} to line 19 of lore of {karta::%player%}
		clear {dmgbreak::%{kartaname::%player%}%::%{_id}%}

		ClearPlayerStats(player) #Clears player stats inherited from the player's card

function inCombat(p: player):
	add 1 to {seconds::%{_p}%}
	set {dps::%{_p}%} to {dmgdealt::%{_p}%}/{seconds::%{_p}%}
	if {healed::%{_p}%} > 0:
		set {hps::%{_p}%} to {healed::%{_p}%}/{seconds::%{_p}%}
	if metadata value "DungeonInstance" of {_p} is not set:
		if title of {_p}'s scoreboard is set:
			if {meter::%{_p}%} = "healing":
				set {_kolorek} to KolorekScoreboard({_p})
				set title of {_p}'s scoreboard to "&f&l«-───▬ %{_kolorek}%&lEC &f&l▬───-»"
				set line 12 of {_p}'s scoreboard to ""
				if {language::%{_p}%} = "English":
					set line 11 of {_p}'s scoreboard to " &fIn combat for: %{_kolorek}%%{seconds::%{_p}%}% seconds     "
				else:
					set line 11 of {_p}'s scoreboard to " &fW walce od: %{_kolorek}%%{seconds::%{_p}%}% sekund     "
				set line 10 of {_p}'s scoreboard to " "
				set {_x} to first element of createTop("healed", 5, "[P]")
				set {_x2} to 2nd element of createTop("healed", 5, "[P]")
				set {_x3} to 3rd element of createTop("healed", 5, "[P]")
				set {_x4} to 4th element of createTop("healed", 5, "[P]")
				set {_x5} to 5th element of createTop("healed", 5, "[P]")
				if {healed::%{_x}%} > 0:
					set line 9 of {_p}'s scoreboard to "  &f1. &f%{ikonkakarta::%{_x}%}%%{kartacolor::%{_x}%}%%first element of createTop("healed", 5, "[P]")% &f%first element of createTop("healed", 5, "[V]")% %{kartacolor::%{_x}%}%HEAL | &f%{hps::%{_x}%}% %{kartacolor::%{_x}%}%HPS"
				if {healed::%{_x2}%} > 0:
					set line 8 of {_p}'s scoreboard to "  &f2. &f%{ikonkakarta::%{_x2}%}%%{kartacolor::%{_x2}%}%%2nd element of createTop("healed", 5, "[P]")% &f%2nd element of createTop("healed", 5, "[V]")% %{kartacolor::%{_x2}%}%HEAL | &f%{hps::%{_x2}%}% %{kartacolor::%{_x2}%}%HPS"
				if {healed::%{_x3}%} > 0:
					set line 7 of {_p}'s scoreboard to "  &f3. &f%{ikonkakarta::%{_x3}%}%%{kartacolor::%{_x3}%}%%3rd element of createTop("healed", 5, "[P]")% &f%3rd element of createTop("healed", 5, "[V]")% %{kartacolor::%{_x3}%}%HEAL | &f%{hps::%{_x3}%}% %{kartacolor::%{_x3}%}%HPS"
				if {healed::%{_x4}%} > 0:
					set line 6 of {_p}'s scoreboard to "  &f4. %{ikonkakarta::%{_x4}%}%%{kartacolor::%{_x4}%}%%4th element of createTop("healed", 5, "[P]")% &f%4th element of createTop("healed", 5, "[V]")% %{kartacolor::%{_x4}%}%HEAL | &f%{hps::%{_x4}%}% %{kartacolor::%{_x4}%}%HPS"
				if {healed::%{_x5}%} > 0:
					set line 5 of {_p}'s scoreboard to "  &f5. %{ikonkakarta::%{_x5}%}%%{kartacolor::%{_x5}%}%%5th element of createTop("healed", 5, "[P]")% &f%5th element of createTop("healed", 5, "[V]")% %{kartacolor::%{_x5}%}%HEAL | &f%{hps::%{_x5}%}% %{kartacolor::%{_x5}%}%HPS"
				set line 4 of {_p}'s scoreboard to ""
				if {language::%{_p}%} = "English":
					set line 3 of {_p}'s scoreboard to " &fCombat ends in: %{_kolorek}%%metadata value "ECEngaged" of {_p}% seconds     "
				else:
					set line 3 of {_p}'s scoreboard to " &fKoniec walki za: %{_kolorek}%%metadata value "ECEngaged" of {_p}% sekund     "
				set line 2 of {_p}'s scoreboard to ""
			else:
				set {_kolorek} to KolorekScoreboard({_p})
				if metadata value "DungeonInstance" of {_p} is not set:
					set title of {_p}'s scoreboard to "&f&l«-───▬ %{_kolorek}%&lEC &f&l▬───-»"
					set line 12 of {_p}'s scoreboard to ""
					if {language::%{_p}%} = "English":
						set line 11 of {_p}'s scoreboard to " &fIn combat for: %{_kolorek}%%{seconds::%{_p}%}% seconds     "
					else:
						set line 11 of {_p}'s scoreboard to " &fW walce od: %{_kolorek}%%{seconds::%{_p}%}% sekund     "
					set line 10 of {_p}'s scoreboard to " "
					set {_x} to first element of createTop("dmgdealt", 5, "[P]")
					set {_x2} to 2nd element of createTop("dmgdealt", 5, "[P]")
					set {_x3} to 3rd element of createTop("dmgdealt", 5, "[P]")
					set {_x4} to 4th element of createTop("dmgdealt", 5, "[P]")
					set {_x5} to 5th element of createTop("dmgdealt", 5, "[P]")
					if {dmgdealt::%{_x}%} > 0:
						set line 9 of {_p}'s scoreboard to "  &f1. &f%{ikonkakarta::%{_x}%}%%{kartacolor::%{_x}%}%%first element of createTop("dmgdealt", 5, "[P]")% &f%first element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x}%}%DMG | &f%{dps::%{_x}%}% %{kartacolor::%{_x}%}%DPS"
					if {dmgdealt::%{_x2}%} > 0:
						set line 8 of {_p}'s scoreboard to "  &f2. &f%{ikonkakarta::%{_x2}%}%%{kartacolor::%{_x2}%}%%2nd element of createTop("dmgdealt", 5, "[P]")% &f%2nd element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x2}%}%DMG | &f%{dps::%{_x2}%}% %{kartacolor::%{_x2}%}%DPS"
					if {dmgdealt::%{_x3}%} > 0:
						set line 7 of {_p}'s scoreboard to "  &f3. &f%{ikonkakarta::%{_x3}%}%%{kartacolor::%{_x3}%}%%3rd element of createTop("dmgdealt", 5, "[P]")% &f%3rd element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x3}%}%DMG | &f%{dps::%{_x3}%}% %{kartacolor::%{_x3}%}%DPS"
					if {dmgdealt::%{_x4}%} > 0:
						set line 6 of {_p}'s scoreboard to "  &f4. %{ikonkakarta::%{_x4}%}%%{kartacolor::%{_x4}%}%%4th element of createTop("dmgdealt", 5, "[P]")% &f%4th element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x4}%}%DMG | &f%{dps::%{_x4}%}% %{kartacolor::%{_x4}%}%DPS"
					if {dmgdealt::%{_x5}%} > 0:
						set line 5 of {_p}'s scoreboard to "  &f5. %{ikonkakarta::%{_x5}%}%%{kartacolor::%{_x5}%}%%5th element of createTop("dmgdealt", 5, "[P]")% &f%5th element of createTop("dmgdealt", 5, "[V]")% %{kartacolor::%{_x5}%}%DMG | &f%{dps::%{_x5}%}% %{kartacolor::%{_x5}%}%DPS"
					set line 4 of {_p}'s scoreboard to ""
					if {language::%{_p}%} = "English":
						set line 3 of {_p}'s scoreboard to " &fCombat ends in: %{_kolorek}%%metadata value "ECEngaged" of {_p}% seconds     "
					else:
						set line 3 of {_p}'s scoreboard to " &fKoniec walki za: %{_kolorek}%%metadata value "ECEngaged" of {_p}% sekund     "
					set line 2 of {_p}'s scoreboard to ""
command /meter [<text>]:
	aliases: /licznik
	trigger:
		if arg-1 = "healing":
			set {meter::%player%} to "healing"
			if {language::%player%} = "English":
				send "&aYour meter will now display Healing." to player
			else:
				send "&aTwój licznik będzie teraz wyświetlał Leczenie." to player
		if arg-1 = "damage":
			clear {meter::%player%}
			if {language::%player%} = "English":
				send "&aYour meter will now display Damage." to player
			else:
				send "&aTwój meter będzie teraz wyświetlał Obrażenia." to player
on tab complete of "meter" or "licznik":
	set tab completions for position 1 to "healing" and "damage"
#on death:
	#set metadata value "ECEngaged" of attacker to false
on skript stop:
	clear {lastdmgcauseen::*}
	clear {lastdmgcause::*}
	clear {lastdmgcauselore::*}
	clear {lastdmgcauseloreen::*}
	clear {dmgbreak::*}
	clear {healcard::*}
	clear {extraSecondsIcyVeins::%player%}
	clear {ascendanceDuration::%player%}
		
function LogDmgBreakdown(p: player):
	set {_data} to data()
	if metadata value "ECEngaged" of {_p} is set:
		set {_t} to SecondsToMinutes("%{seconds::%{_p}%}%")
		log "%{_data}% Fight duration: %{_t}%" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"
	else:
		log "%{_data}% Fight duration: -" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"
	if {dmgdealt::%{_p}%} is 0:
		log "%{_data}% Total: - (- dps)" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"
	else:
		log "%{_data}% Total: %{dmgdealt::%{_p}%}% (| %{dps::%{_p}%}% dps)" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"
	set {_id} to line 19 of lore of {karta::%{_p}%}
	set {_k} to {kartaname::%{_p}%}
	set {_r::*} to sorted indices of {dmgbreak::%{_k}%::%{_id}%::*} in descending order
	set {_size} to size of {_r::*}
	loop {_size} times:
		set {_1} to ({_r::%loop-number%} in strict proper case)
		log "%{_data}% %{_1}%: %{dmgbreak::%{_k}%::%{_id}%::%{_1}%}% (%({dmgbreak::%{_k}%::%{_id}%::%{_1}%}/{dmgdealt::%{_p}%})*100%%%)" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"
function LogHealBreakdown(p: player):
	set {_data} to data()
	log "%{_data}% Healing breakdown of %{_p}%:" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"	
	if {healed::%{_p}%} > 0:
		if metadata value "ECEngaged" of {_p} is set:
			set {_t} to SecondsToMinutes("%{seconds::%{_p}%}%")
			log "%{_data}% Fight duration: %{_t}%" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"
		else:
			log "%{_data}% Fight duration: -" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"
		log "%{_data}% Total: %{healed::%{_p}%}% (%{hps::%{_p}%}% hps)" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"
		set {_id} to line 19 of lore of {karta::%{_p}%}
		set {_k} to {kartaname::%{_p}%}
		set {_r::*} to sorted indices of {healcard::%{kartaname::%{_p}%}%::%{_id}%::*} in descending order
		set {_size} to size of {_r::*}
		loop {_size} times:
			set {_1} to ({_r::%loop-number%} in strict proper case)
			log "%{_data}% %{_1}%: %{healcard::%{_k}%::%{_id}%::%{_1}%}% (%({healcard::%{_k}%::%{_id}%::%{_1}%}/{healed::%{_p}%})*100%%%)" to "logi/combat/combatdetails %{datatydzien}%-%{datatydzien2}%.log"
command /damagebreakdown:
	aliases: /dmgbreakdown, /breakdown
	trigger:
		send "Coming soon (TM)" to player
		send "Damage breakdown:" to player
		if metadata value "ECEngaged" of player is set:
			set {_t} to SecondsToMinutes("%{seconds::%player%}%")
			send "Fight duration: %{_t}%" to player
		else:
			send "Fight duration: -" to player
			set {_id} to line 19 of lore of {karta::%player%}
			if {dmgbreak::%{kartaname::%player%}%::%{_id}%::*} is set:
				clear {dmgbreak::%{kartaname::%player%}%::%{_id}%::*}
		if {dmgdealt::%player%} is 0:
			send "Total: - (- dps)" to player
		else:
			send "Total: %{dmgdealt::%player%}% (%{dps::%player%}% dps)" to player
		set {_id} to line 19 of lore of {karta::%player%}
		set {_k} to {kartaname::%player%}
		set {_r::*} to sorted indices of {dmgbreak::%{_k}%::%{_id}%::*} in descending order
		if {_r::*} is set:
			set {_size} to size of {_r::*}
			loop {_size} times:
				set {_1} to ({_r::%loop-number%} in strict proper case)
				add "%{_1}%: %{dmgbreak::%{_k}%::%{_id}%::%{_1}%}% (%({dmgbreak::%{_k}%::%{_id}%::%{_1}%}/{dmgdealt::%player%})*100%%%)" to {_breakdown::*}
			if size of {_breakdown::*} > 1:
				set {_breakdown} to join {_breakdown::*} by nl
				#Aset {_message} to mini message from "<gradient:##f54242:##ffe270:##20e32a:##20b5e3:##7526bf>%{_breakdown}%"
				set {_message} to mini message from "<gradient:##f54242:##ffe270:##20e32a>%{_breakdown}%"
				send {_message} to player
			else:
				send "<##f54242>%{_breakdown::1}%" to player

command /healingbreakdown:
	aliases: /healbreakdown
	trigger:
		send "Coming soon (TM)" to player
		send "Healing breakdown:" to player
		if metadata value "ECEngaged" of player is set:
			set {_t} to SecondsToMinutes("%{seconds::%player%}%")
			send "Fight duration: %{_t}%" to player
		else:
			send "Fight duration: -" to player
		if {healed::%player%} is 0:
			send "Total: - (- hps)" to player
		else:
			send "Total: %{healed::%player%}% (%{hps::%player%}% hps)" to player
		set {_id} to line 19 of lore of {karta::%player%}
		set {_k} to {kartaname::%player%}
		set {_r::*} to sorted indices of {healcard::%{kartaname::%player%}%::%{_id}%::*} in descending order
		set {_size} to size of {_r::*}
		loop {_size} times:
			set {_1} to ({_r::%loop-number%} in strict proper case)
			send "%{_1}%: %{healcard::%{_k}%::%{_id}%::%{_1}%}% (%({healcard::%{_k}%::%{_id}%::%{_1}%}/{healed::%player%})*100%%%)" to player
command /dmggraph [<text>] [<number>]:
	trigger:
		if arg-1 is "xilvia":
			if arg-2 is 1:
				set {kolorekkarta::%player%} to ""
				set {ikonkakarta::%player%} to ""
				send "&aOd teraz karta Xilvia będzie wyświetlać się na damage graphie w następujący sposób: &f " to player
			if arg-2 is 2:
				set {kolorekkarta::%player%} to ""
				set {ikonkakarta::%player%} to ""
				send "&aOd teraz karta Xilvia będzie wyświetlać się na damage graphie w następujący sposób: &f " to player
function SecondsToMinutes(v: text) :: string:
	set {_a} to {_v} parsed as number
	if {_a}/60 >= 1:
		set {_a} to {_a}/60
		if {_a} < 2:
			set {_t} to "minute"
		else:
			set {_t} to "minutes"
	else:
		if {_a} = 1:
			set {_t} to "second"
		else:
			set {_t} to "seconds"
	set {_r::*} to "%{_a}%" and {_t}
	set {_h} to join {_r::*} by " "
	return "%{_h}%"
command /kill [<player>]:
	trigger:
		if name of player = "kapoonfleek":
			kill arg-1
function DamageBreakdown(p: player, e: entity, v: number):
	set {_id} to line 19 of lore of {karta::%{_p}%}
	if {language::%{_p}%} = "Polski":
		if metadata value "LastDamageCause" of {_e} is set:
			add {_v} to {dmgbreak::%{kartaname::%{_p}%}%::%{_id}%::%uncolored (metadata value "LastDamageCause" of {_e} in strict proper case)%}
	else:
		if metadata value "LastDamageCauseEN" of {_e} is set:
			add {_v} to {dmgbreak::%{kartaname::%{_p}%}%::%{_id}%::%uncolored (metadata value "LastDamageCauseEN" of {_e} in strict proper case)%}