on rightclick:
	if boolean tag "Night Slash" of custom nbt of player's tool is set:
		cancel event
		if {kartaname::%player%} = "Umbreon":
			if CanUseAbility(player) != false:
				set {_target} to Target(player, 100, false)
				if {_target} is set:
					set {_range} to 3 + CrowdControl(player)/30
					if distance between player and {_target} <= {_range}:
						set {_pospiech} to Haste(player)
						set {_baseCd} to 3
						set {_damage} to 5 + ({damage::%player%}/30) + ({versatility::%player%}/90 + {primarystat::%player%}/20)

						if string tag "Talents;Row 1" of custom nbt of {karta::%player%} = "Quick Claw":
							set {_damage} to {_damage}*0.75
							set {_baseCd} to {_baseCd}*0.5

						else if string tag "Talents;Row 1" of custom nbt of {karta::%player%} = "Heavy Claw":
							set {_damage} to {_damage}*1.875
							set {_baseCd} to {_baseCd}*1.25

						else if string tag "Talents;Row 1" of custom nbt of {karta::%player%} = "Sharp Claw":
							set {_damage} to {_damage}*1.5

						set {_cd} to "%{_baseCd}/{_pospiech}% seconds" parsed as timespan

						if cooldown "Night Slash%player%" is finished:
							create cooldown "Night Slash%player%" for {_cd}
							set cooldown of player's held item for player to (cooldown "Night Slash%player%")
							AbilityUse(player, "Night Slash")

							set {_lore} to "&8Basic Ability%nl%&fInstant cast%nl%&7Cooldown:  &f%{_cd}%%nl%&7Range: &f%{_range}% blocks%nl%&7Use: &fRMB%nl%<##999999>Umbreon <##555555>slashes her target with her claw%nl%<##555555>at short range, dealing &f%{_damage}% <##333333>Dark <##555555>damage.%nl% %nl%<##555555>The enemy will take &f7.5%% <##555555>increased damage%nl%<##555555>from your upcoming &f <##999999>Night Slash <##555555>attacks%nl%<##555555>for the next &f6 sec<##555555>. This effect stacks."
							LoreUpdate(player, "Night Slash", {_lore})

							NightSlash(player, {_target}, {_damage}, {_pospiech}, 1, {_lore})

							if string tag "Talents;Row 1" of custom nbt of {karta::%player%} is set:
								chance of 40%:
									set {_moonStrikesEffectiveness} to 0.8
									NightSlash(player, {_target}, {_damage}, {_pospiech}, {_moonStrikesEffectiveness}, {_lore}, true)
						else:
							cancel event
							if {tekstcd::%player%} = true:
								set {_cdd} to cooldown "Night Slash%player%"
								send "<##555555>You must wait &f%{_cdd}%<##555555> to use this ability." to player
							stop
		else:
			send "&8[&6Earthcraft&8] &6You don't have the required card selected to use this ability." to player
			play sound "block.glass.break" with volume 3 and pitch 0 to player

	else if boolean tag "Moonlight Orb" of custom nbt of player's tool is set:
		cancel event
		if {kartaname::%player%} = "Umbreon":	
			if CanUseAbility(player) != false:

				set {_targetLocation} to Target(player, 100, false)
				if {_targetLocation} is not set:
					set {_targetLocation} to target block of player

				if {_targetLocation} is set:
					if cooldown "Moonlight Orb%player%" is finished:

						set {_pospiech} to Haste(player)
						set {_cd} to "%16/{_pospiech}% seconds" parsed as timespan
						create cooldown "Moonlight Orb%player%" for {_cd}
						set the cooldown of player's held item for player to (cooldown "Moonlight Orb%player%")

						AbilityUse(player, "Moonlight Orb")

						MoonlightOrb(player, target block of player)

					else:
						cancel event
						if {tekstcd::%player%} = true:
							set {_cdd} to cooldown "Moonlight Orb%player%"
							send "<##555555>You must wait &f%{_cdd}%<##555555> to use this ability." to player
						stop
		else:
			send "&8[&6Earthcraft&8] &6You don't have the required card selected to use this ability." to player
			play sound "block.glass.break" with volume 3 and pitch 0 to player

	else if boolean tag "End Game" of custom nbt of player's tool is set:
		cancel event
		if {kartaname::%player%} = "Umbreon":
			if CanUseAbility(player) != false:
				if cooldown "End Game%player%" is finished:	
					set {_pospiech} to Haste(player)
					set {_cd} to "%600/{_pospiech}% seconds" parsed as timespan
					create cooldown "End Game%player%" for {_cd}
					set cooldown of player's tool for player to (cooldown "End Game%player%")
					AbilityUse(player, "End Game")
					
					set {_executionThreshold} to 0.25
					set {_lore} to "&8Ultimate Ability%nl%&fInstant cast%nl%&7Cooldown:  &f%{_cd}%%nl%&7Use: &fRMB%nl%<##999999>Umbreon <##555555>attempts to <##999999>execute <##555555>all enemies%nl%<##555555>below &f25%% <##999999>health <##555555>in an enormous radius.%nl% %nl%<##555555>All enemies in range are <##999999> Blinded%nl%<##555555>for &f10 sec<##555555>.%nl% %nl%<##555555>This ability instead deals &fXX <##333333>Dark <##555555>damage%nl%<##555555>to all <##999999>Boss <##555555>enemies."
					LoreUpdate(player, "End Game", {_lore})

					play sound "entity.enderman.scream" with volume 5 and pitch 0 at location of player

					loop all living entities in radius 120 around the player:
						if boolean tag "ECMob" of custom nbt of loop-entity is set:
							if canBeCCed(loop-entity) = true:
								apply blindness 2 to loop-entity for 10 seconds
							if health of loop-entity < ({_exec}*(max health of loop-entity)):
								set loop-entity's last damage cause to sweep attack
								set metadata value "Element" of player to "Moonlight"
								set metadata value "LastDamageCause" of loop-entity to "<##555555>End Game"
								set metadata value "LastDamageCauseLore" of loop-entity to {_lore}
								make player damage loop-entity by 2*({_exec}*(loop-entity's max health))
				else:
					cancel event
					if {tekstcd::%player%} = true:
						set {_cdd} to cooldown "End Game%player%"
						send "<##555555>You must wait &f%{_cdd}%<##555555> to use this ability." to player
					stop
		else:
			send "&8[&6Earthcraft&8] &6You don't have the required card selected to use this ability." to player
			play sound "block.glass.break" with volume 3 and pitch 0 to player

function NightSlash(p: player, target: entity, damage: number, haste: number, effectiveness: number, lore: text, moonStrikes: boolean = false):
	set {_crit} to CriticalHit({_p})

	if {_moonStrikes} = true:
		set {_wait} to "%0.5/{_haste}% seconds" parsed as timespan
		wait {_wait}

	if metadata value "Night Slash Vulnerability%{_p}%" of {_target} is set:
		set {_nightSlashBonus} to metadata value "Night Slash Vulnerability%{_p}%" of {_target}
		set {_damage} to {_damage} * (1 + {_nightSlashBonus})

	if {_p} has invisibility:
		set {_damageBonus} to (1 + (0.15 + (0.2 + (({mastery::%{_p}%}/130)))))

	if {_damageBonus} is set:
		set {_damage} to {_damage}*{_damageBonus}

	set {_bonusDuration} to 6 seconds

	set {_target}'s last damage cause to sweep attack
	set metadata value "Element" of {_p} to "Dark"
	set metadata value "LastDamageCause" of {_target} to "<##555555>Night Slash"
	set metadata value "LastDamageCauseLore" of {_target} to {_lore}
	set {_damage} to Crit({_p}, {_target}, {_crit}, {_damage})

	make {_p} damage {_target} by 2*({_damage})
	make {_p} swing their hand

	play sound "entity.player.attack.sweep" with volume 3 and pitch 0.2 at location of {_target}

	NightSlashBonus({_p}, {_target}, {_bonusDuration}, 0.075)

function MoonlightOrb(p: player, loc: location):
	set {_locOrb} to block 0.5 blocks above block at {_loc}
	set {_locOrbAbove} to block 2 above {_loc}

	set {_crit} to CriticalHit({_p})
	set {_pospiech} to Haste({_p})
	set {_cd} to "%16/{_pospiech}% seconds" parsed as timespan
	set {_damage} to 2 + ({damage::%{_p}%}/90) + ({versatility::%{_p}%}/270 + {primarystat::%{_p}%}/45)	

	play sound "entity.enderman.teleport" with volume 5 and pitch 0 at {_locOrb}

	if {_p} has invisibility:
		set {_damageBonus} to (1 + (0.15 + (0.2 + (({mastery::%{_p}%}/130)))))

	if {_damageBonus} is set:
		set {_damage} to {_damage}*{_damageBonus}

	if block at {_locOrb} is air:
		make all players see block at {_locOrb} as light block
		set {_light} to true

	set {_id} to random 8 char string from charset `0-9`
	set {_radius} to 3 + CrowdControl({_p})/20
	set metadata value "RadiusOrb%{_id}%" of {_p} to {_radius}

	set {_duration} to 8 seconds

	create a new custom dust particle with:
		count: 0
		velocity: outwards
		extra: 0.5
		force: true
		data: dustOption((rgb 255, 228, 140), 1)

	set {_particle} to last created particle

	set {_sphere} to a sphere with radius 0.8
	set particle of {_sphere} to {_particle}
	draw shape {_sphere} at {_locOrbAbove} for {_duration}


	set {_lore} to "&8Basic Ability%nl%&fInstant cast%nl%&7Cooldown:  &f%{_cd}%%nl%&7Radius area: &f%{_radius}% blocks%nl%&7Use: &fRMB%nl%<##999999>Umbreon <##555555>creates a zone of &f <##999999>Moonlight <##555555>at the%nl%<##555555>target location, inflicting &f%{_damage}% <##d9d5a7>Moonlight <##555555>damage to%nl%<##555555>enemies caught in its radius and <##999999> Slowing%nl%<##555555>them by &f30%% <##555555>until they leave the area.%nl% %nl%<##999999>Umbreon<##555555> becomes &f <##999999>Invisible <##555555>when she enters%nl%<##555555>a &f <##999999>Moonlight <##555555>zone.%nl% %nl%&f <##999999>Moonlight <##555555>zones last &f8 sec<##555555>."
	LoreUpdate({_p}, "Moonlight Orb", {_lore})

	loop all living entities in radius {_radius} around {_locOrb}:
		if boolean tag "ECMob" of custom nbt of loop-entity is set:
			set loop-entity's last damage cause to sweep attack
			set metadata value "Element" of {_p} to "Moonlight"
			set metadata value "LastDamageCause" of loop-entity to "<##555555>Moonlight Orb"
			set metadata value "LastDamageCauseLore" of loop-entity to {_lore}
			set {_damage} to Crit({_p}, loop-entity, {_crit}, {_damage})
			make {_p} damage loop-entity by {_damage}*2

	set metadata value "MoonlightOrb%{_id}%" of {_p} to {_locOrb}

	MoonlightOrbRadius({_p}, {_id})
	
	MoonlightOrbExpire({_p}, {_id}, {_duration}, {_light})

function MoonlightOrbRadius(p: player, id: text):
	set {_radius} to metadata value "RadiusOrb%{_id}%" of {_p}
	set {_location} to metadata value "MoonlightOrb%{_id}%" of {_p}

	create a new custom dust particle with:
		count: 0
		velocity: outwards
		extra: 0.5
		force: true
		data: dustOption((rgb 255, 228, 140), 1)

	set {_particle} to last created particle
	set {_circle} to a circle with radius {_radius}
	set particle of {_circle} to {_particle}

	while metadata value "MoonlightOrb%{_id}%" of {_p} is set:
		draw shape {_circle} at {_location} ~ {_v} for 0.5 seconds
		loop all living entities in radius {_radius} around {_location}:
			if boolean tag "ECMob" of custom nbt of loop-entity is set:
				if canBeCCed(loop-entity) = true:
					apply slowness 2 without particles to loop-entity for 0.8 seconds
			else:
				if loop-entity = {_p}:
					apply invisibility 1 without particles to {_p} for 0.8 seconds
		wait 0.75 seconds
		
function NightSlashBonus(p: player, target: entity, duration: timespan, bonus: number):
	if metadata value "Night Slash Vulnerability%{_p}%" of {_target} is not set:
		set metadata value "Night Slash Vulnerability%{_p}%" of {_target} to {_bonus}

		set metadata value "Night Slash Vulnerability Duration%{_p}%" of {_target} to {_duration}

		set {_star} to a circle of radius 0.6
		create a new custom dust_color_transition particle with:
			count: 0
			velocity: outwards
			extra: 0.5
			force: true
			data: dustTransition(black, gray, 1)
		set particle of {_star} to last created particle

		while metadata value "Night Slash Vulnerability Duration%{_p}%" of {_target} > 0 seconds:
			remove 1 second from metadata value "Night Slash Vulnerability Duration%{_p}%" of {_target}
			draw shape {_star} at {_target} for 1 second
			wait 1 second

		clear metadata value "Night Slash Vulnerability%{_p}%" of {_target}
		clear metadata value "Night Slash Vulnerability Duration%{_p}%" of {_target}

function MoonlightOrbExpire(p: player, id: text, duration: timespan, light: boolean = false):
	if metadata value "MoonlightOrbDuration%{_id}%" of {_p} is not set:
		set metadata value "MoonlightOrbDuration%{_id}%" of {_p} to {_duration}
		while metadata value "MoonlightOrbDuration%{_id}%" of {_p} > 0 seconds:
			wait 1 second
			remove 1 second from metadata value "MoonlightOrbDuration%{_id}%" of {_p}
		clear metadata value "MoonlightOrb%{_id}%" of {_p}
		clear metadata value "RadiusOrb%{_id}%" of {_p}
		clear metadata value "MoonlightOrbDuration%{_id}%" of {_p}

		if {_light} is true:
			make all players see block at {_locOrb} as air
	else:
		set metadata value "MoonlightOrbDuration%{_id}%" of {_p} to {_duration}