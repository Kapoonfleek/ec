#<##f0e359>

on join:
	stop
	if {kolekcja::karty::%player%::*} contains "Delphox":
		loop 10 times:
			set {_r} to {traits::Delphox::%loop-number%}
			set {_x%loop-number%} to {trait::Delphox::%{_r}%::%player%}
		if {language::%player%} = "English":
			set {traits::Delphox::1::opis::%player%} to "<##fa4420>Flamethrower &7increases your Mastery by%nl%&f%20*{_x1}% &7for 3 seconds. This effect stacks."
			set {traits::Delphox::2::opis::%player%} to "&7Your first detonated <##fa4420>Inferno &7after using%nl%<##fa4420>Flame Barrier &7will always critically strike and%nl%&7deal an extra &f%1.5*{_x2}% &7damage."
			set {traits::Delphox::3::opis::%player%} to "<##fa4420>Flamethrower &7has &f%1*{_x3}%%% &7chance to ignite%nl%&7your target again after its expiration.%nl%&7Duplicated <##fa4420>Flamethrower &7applies all effects from%nl%&7your other abilities and Traits, but deals%nl%&760%% damage."
			set {traits::Delphox::4::opis::%player%} to "<##fa4420>Blaze &7damage has a &f%2*{_x4}%%% &7chance per%nl%&7target hit to reduce the cooldown of%nl%<##fa4420>Flamethrower &7by 0.5 seconds on all affected%nl%&7targets."
			set {traits::Delphox::5::opis::%player%} to "<##fa4420>Flamethrower &7deals damage an additional 2 times%nl%&7and its cooldown is reduced by &f%0.3*{_x5}% seconds&7."
			set {traits::Delphox::6::opis::%player%} to "&7Every fourth detonated <##fa4420>Inferno &7calls%nl%&7down a Meteor &7on your target,%nl%&7dealing &f%3*{_x6}% <##ff4d00>Fire &7damage to all enemies nearby."
			set {traits::Delphox::7::opis::%player%} to "<##fa4420>Flamethrower &7has a &f%8.25*{_x7}%%% &7increased chance%nl%&7to critically strike and its cooldown is%nl%&7reduced by &f%0.5*{_x7}% seconds &7against targets above%nl%&790%% health."
			set {traits::Delphox::8::opis::%player%} to "&7Detonating <##fa4420>Inferno &7has a &f%2.5*{_x8}%%% &7chance%nl%&7to increase the damage of your next <##fa4420>Blaze%nl%&7by 230%%."
			set {traits::Delphox::9::opis::%player%} to "&7Each consecutive critical strike you deal increases%nl%&7the critical strike damage you deal by &f%1.5*{_x9}%%%%nl%&7for 6 seconds."
			set {traits::Delphox::10::opis::%player%} to "<##fa4420>Flamethrower &7has a &f%5*{_x10}%%% &7chance%nl%&7to grant you an additional stack of <##fa4420>Blaze&7."
			
on leave:
	if {kolekcja::karty::%player%::*} contains "Delphox":
		loop 10 times:
			clear {traits::Delphox::%loop-number%::opis::%player%}

on rightclick:
	if boolean tag "Flamethrower" of custom nbt of player's tool is set:
		cancel event
		set {_target} to Target(player, 100, false)
		if {_target} is set:
			if {kartaname::%player%} = "Delphox":
				if CanUseAbility(player) != false:
					cancel event
					set {_haste} to Haste(player) 
					set {_cd} to 14/{_haste}
					set {_cd} to "%{_cd}% seconds" parsed as timespan

					if cooldown "Flamethrower%player%-%uuid of {_target}%" is finished:

						Blaze(player, {_target})

						Flamethrower(player, {_target})

						AbilityUse(player, "Flamethrower")

					else:
						cancel event
						if {_target} is set:
							if {tekstcd::%player%} is true:
								if cooldown "FlamethrowerCDText%player%" is finished:
									create cooldown "FlamethrowerCDText%player%" for 1 tick
									set {_cdd} to cooldown "Flamethrower%player%-%uuid of {_target}%"
									send "<##d74327>You can't ignite that target for another %{_cdd}%" to player
					stop
			else:
				send "&8[&6Earthcraft&8] &6You don't have the required card selected to use this ability." to player
				play sound "block.glass.break" with volume 3 and pitch 0 to player
	else if boolean tag "Heat Snap" of custom nbt of player's tool is set:
		cancel event
		if {kartaname::%player%} = "Delphox":
			if CanUseAbility(player) != false:
				if cooldown "Heat Snap%player%" is finished:
					set {_haste} to Haste(player) 
					set {_cd} to "%45/{_haste}% seconds" parsed as timespan

					create cooldown "Heat Snap%player%" for {_cd}
					set the cooldown of player's held item for player to {_cd}
					AbilityUse(player, "Heat Snap")

					play sound "skill.delphox.heatsnap" with volume 3 and pitch 1 at player

					set {_lore} to "&8Ultimate Ability%nl%&fInstant cast%nl%&7Cooldown: &8 &f%{_cd}%%nl%&7Use: &fRMB%nl%<##fa4420>Resets the cooldown of &f <##f2636a>Flamethrower <##fa4420>on all%nl%<##fa4420>targets who have recently been affected%nl%<##fa4420>by the ability and immediately <##f2636a>traps them <##fa4420>in%nl%<##fa4420>an &f <##f2636a>Inferno<##fa4420>, all with the snap of a finger."
					if string tag "Talents;Row 5" of custom nbt of {karta::%player%} = "Flaming Finale":
						set {_flamingFinaleDamage} to 4
						set {_lore} to "%{_lore}%%nl% %nl%&f <##eb6146>Flaming Finale%nl%<##fa4420>Deals &f%{_flamingFinaleDamage}% <##ff4d00>Fire <##fa4420>damage to all affected targets%nl%<##fa4420>and detonates all &f <##f2636a>Infernos <##fa4420>for &f160%% <##fa4420>of the%nl%<##fa4420>normal damage."
						
					LoreUpdate(player, "Heat Snap", {_lore})
					
					HeatSnap(player)

				else:
					cancel event
					if {tekstcd::%player%} = true:
						set {_cdd} to cooldown "Heat Snap%player%"
						send "<##fa4420>You must wait &f%{_cdd}% <##fa4420>to use this ability." to player
					stop
		else:
			send "&8[&6Earthcraft&8] &6You don't have the required card selected to use this ability." to player
			play sound "block.glass.break" with volume 3 and pitch 0 to player
							
	else if boolean tag "Inferno" of custom nbt of player's tool is set:
		cancel event
		if string tag "Talents;Row 5" of custom nbt of {karta::%player%} != "Hot Spree":
			if {kartaname::%player%} = "Delphox":
				set {_target} to Target(player, 100, false)
				if {_target} is set:
					if CanUseAbility(player) != false:
						Inferno(player, {_target})
						AbilityUse(player, "Inferno")
			else:
				send "&8[&6Earthcraft&8] &6You don't have the required card selected to use this ability." to player
				play sound "block.glass.break" with volume 3 and pitch 0 to player
		else:
			send "&8[&6Earthcraft&8] &6You can not use Inferno when you have Hot Spree talented." to player
			play sound "block.glass.break" with volume 3 and pitch 0 to player

	else if boolean tag "Flame Barrier" of custom nbt of player's tool is set:
		cancel event
		if {kartaname::%player%} = "Delphox":
			if CanUseAbility(player) != false:

				set {_haste} to Haste(player) 
				set {_cd} to "%130/{_haste}% seconds" parsed as timespan
				set {_barrierDuration} to 6 + (({resistance::%player%}/25))

				if cooldown "Flame Barrier%player%" is finished:
					create cooldown "Flame Barrier%player%" for {_cd}
					set the cooldown of player's held item for player to {_cd}
					AbilityUse(player, "Flame Barrier")

					set {_lore} to "&8Ultimate Ability%nl%&fInstant cast%nl%&7Cooldown: &8 &f%{_cd}%%nl%&7Use: &fRMB%nl%<##fa4420>Surround yourself with a <##f2636a>flame barrier<##fa4420>,%nl%<##f2636a>negating <##fa4420>any incoming damage for the%nl%<##fa4420>next &f%{_barrierDuration}% sec<##fa4420>. The duration of &f <##f2636a>Flame Barrier%nl%<##fa4420>is increased based on your <##f2636a> Resistance<##fa4420>."
					LoreUpdate(player, "Flame Barrier", {_lore})

					set {_duration} to "%{_barrierDuration}% seconds" parsed as timespan

					set metadata value "Flame Barrier" of player to true
					make player invulnerable
					FlameBarrierInfo(player, {_duration})

					play sound "block.beacon.power_select" with volume 5 and pitch 1 at player

					wait {_duration}
					make player vulnerable
					clear metadata value "Flame Barrier" of player

				else:
					cancel event
					if {tekstcd::%player%} = true:
						set {_cdd} to cooldown "Flame Barrier%player%"
						send "<##fa4420>You must wait &f%{_cdd}% <##fa4420>to use this ability." to player
					stop
		else:
			send "&8[&6Earthcraft&8] &6You don't have the required card selected to use this ability." to player
			play sound "block.glass.break" with volume 3 and pitch 0 to player

on sneak toggle:
	if {kartaname::%player%} = "Delphox":
		if CanUseAbility(player) != false:
			set {_target} to Target(player, 100, false)
			if {_target} is set:
				if metadata value "InfernoTarget" of {_target} is true:
					InfernoDetonate(player, {_target})
					AbilityUse(player, "Inferno (Detonate)")

function InfernoParticles(target: entity):
	while metadata value "InfernoTarget" of {_target} is true:
		set {_shape} to sphere with radius 1
		draw {_shape} at block above {_target}
		wait 1 second

function FlameBarrierInfo(p: player, duration: timespan):
	while metadata value "Flame Barrier" of {_p} is set:
		if metadata value "Blaze" of {_p} is set:
			set {_blaze} to metadata value "Blaze" of {_p}
		else:
			set {_blaze} to 0
		send action bar "%{_blaze}%  &f|  %{_duration}%" to {_p}
		draw 40 flame at location above {_p} with offset vector(0.3, 0.4, 0.3) with extra 0.06
		wait 1 second
		remove 1 second from {_duration}

function Blaze(p: player, target: entity, heatSnap: boolean = false):
	set {_blaze} to metadata value "Blaze" of {_p}
	add 1 to {_blaze}
	if string tag "Talents;Row 1" of nbt of {karta::%{_p}%} = "Pyrotechnics":
		chance of 20%:
			add 1 to {_blaze}
	if string tag "Talents;Row 4" of nbt of {karta::%{_p}%} = "Flame Cascade":
		if {_heatSnap} is true:
			set {_flameCascade} to true

	set metadata value "Blaze" of {_p} to {_blaze}

	set {_pitch} to 0.5 + 0.5*{_blaze}
	play sound "entity.blaze.hurt" with volume 2 and pitch {_pitch} to {_p}

	send action bar "%{_blaze}% " to {_p}

	wait 1 tick
	if metadata value "Blaze" of {_p} >= 3:
		set {_blaze} to metadata value "Blaze" of {_p}
		remove 3 from {_blaze}
		set metadata value "Blaze" of {_p} to {_blaze}
		send action bar "%{_blaze}% " to {_p}

		set {_loopCount} to 0
		set {_targetsAffected} to 3

		play sound "item.firecharge.use" with volume 1 and pitch 1 at {_target}

		set {_loopRadius} to 4 + ({crowdcontrol::%{_p}%}/50)
		set {_entities::*} to LoopEntitiesAroundTarget({_target}, {_loopRadius}, true)

		if string tag "Talents;Row 3" of nbt of {karta::%{_p}%} = "Firespread":
			add 2 to {_targetsAffected}
			set {_targetsHit} to size of {_entities::*}
			if {_targetsHit} > 5:
				set {_targetsHit} to 5
			set {_firespread} to 1 + 0.3*{_targetsHit}

		loop {_entities::*}:
			add 1 to {_loopCount}
			set {_dmgBlaze} to 3 + ({versatility::%{_p}%}/180) + ({damage::%{_p}%}/60) + {primarystat::%{_p}%}/30
			set {_mastery} to 2.5 + (({mastery::%{_p}%}/165))

			if {_firespread} is set:
				set {_dmgBlaze} to {_dmgBlaze} * {_firespread}
			if {_flameCascade} is set:
				set {_dmgBlaze} to {_dmgBlaze} * 1.7
			if string tag "Talents;Row 5" of nbt of {karta::%{_p}%} = "Wildfire":
				set {_wildfireDamageAmp} to 1 + {wildfireDelphox::%{_p}%}/100
				set {_dmgBlaze} to {_dmgBlaze} * {_wildfireDamageAmp}

			chance of {_crit}%:
				set {_dmgBlaze} to {_dmgBlaze} * {_mastery}
				Kindling({_p})
				CritVisual(loop-value)

			set loop-value's last damage cause to sweep attack
			set metadata value "LastDamageCause" of loop-value to "<##d74327>Blaze"
			set metadata value "Element" of {_p} to "Fire"
			set metadata value "LastDamageCauseLore" of loop-value to {_loreBlaze}
			
			make {_p} damage loop-value by ({_dmgBlaze}*2)
			draw 20 flame at location above loop-value with offset vector(0.3, 0.6, 0.3) with extra 0.03
			stop loop if {_loopCount} = {_targetsAffected}

function HeatSnap(p: player):
	set {_haste} to Haste({_p}) 
	set {_cd} to 14/{_haste}
	set {_cd} to "%{_cd}% seconds" parsed as timespan
	loop all entities in radius 40 around {_p} where [metadata value "RecentlyDamagedDelphox%{_p}%" of input is set]:

		clear cooldown "Flamethrower%{_p}%-%uuid of loop-entity%"
		create cooldown "Flamethrower%{_p}%-%uuid of loop-entity%" for {_cd}
		
		Blaze({_p}, loop-entity, true)

		Flamethrower({_p}, loop-entity)

		Inferno({_p}, loop-entity)

function Kindling(p: player):
	if string tag "Talents;Row 2" of nbt of {karta::%{_p}%} = "Kindling":
		remove 1 second from cooldown "Heat Snap%{_p}%"
		loop all items in the inventory of {_p}:
			if tag "HeatSnap" of nbt of loop-item is set:
				set the cooldown of loop-item for {_p} to cooldown "Heat Snap%{_p}%"
				stop loop

function Flamethrower(p: player, target: entity):
	set {_haste} to Haste({_p}) 
	set {_cd} to 14/{_haste}
	set {_hasteModifier} to 1/{_haste}
	if string tag "Talents;Row 2" of nbt of {karta::%{_p}%} = "Flame Accelerant":
		if metadata value "DelphoxFlamethrowerUsed" of {_p} is not set:
			FlameAccelerant({_p}, {_cd})
			set {_cd} to {_cd}*0.5
			set {_flameAccelerant} to true
			set {_hasteModifier} to {_hasteModifier}*0.7
	set {_cdd} to {_cd}
	set {_cd} to "%{_cd}% seconds" parsed as timespan

	set {_damage} to 1.25 + ({versatility::%{_p}%}/360) + ({damage::%{_p}%}/120) + {primarystat::%{_p}%}/60
	set {_dmgBlaze} to 3 + ({versatility::%{_p}%}/180) + ({damage::%{_p}%}/60) + {primarystat::%{_p}%}/30

	if string tag "Talents;Row 5" of nbt of {karta::%{_p}%} = "Hot Spree":
		set {_hotSpreeCount} to metadata value "HotSpree" of {_p}
		add 1 to {_hotSpreeCount}
		if {_hotSpreeCount} = 3:
			set {_hotSpree} to true
			set {_damage} to {_damage} * 1.5
			set {_hotSpreeCount} to -1
			play sound "skill.delphox.hotspree" with volume 1.2 and pitch 1 to {_p}
			
		set metadata value "HotSpree" of {_p} to {_hotSpreeCount}
	
	if {_hotSpree} != true:
		create cooldown "Flamethrower%{_p}%-%uuid of {_target}%" for {_cd}

	if string tag "Talents;Row 5" of nbt of {karta::%{_p}%} = "Hot Spree":
		set {_damage} to {_damage}*1.6

	set {_baseDuration} to 4
	set {_seconds} to rounded {_baseDuration}/{_hasteModifier}

	set metadata value "FlamethrowerBurn" of {_target} to true

	set {_lore} to "&8Basic Ability%nl%&fInstant cast%nl%&7Cooldown: &8 &fnone%nl%&7Use: &fRMB%nl%<##f2636a>Ignites <##fa4420>the target for &f%{_seconds}% sec<##fa4420>, inflicting &f%{_damage}%%nl%<##ff4d00>Fire <##fa4420>damage every &f%{_hasteModifier}% sec <##fa4420>for a total of &f%{_damage}*{_seconds}% <##ff4d00>Fire%nl%<##fa4420>damage. &f <##f2636a>Flamethrower <##fa4420>cannot be used on%nl%<##fa4420>the same target for the next &f%{_cdd}% sec<##fa4420>."
	set {_loreBlaze} to "&8Passive Ability%nl%&fNo cast%nl%&7Cooldown: &8 &fnone%nl%&7Use: &fPASSIVE%nl%<##fa4420>Every &fthird  <##f2636a>Flamethrower <##fa4420>used deals%nl%&f%{_dmgBlaze}% <##ff4d00>Fire <##fa4420>damage to the target and up to%nl%<##fa4420>&ftwo <##fa4420>nearby enemies around the target."
	
	LoreUpdate({_p}, "Blaze", {_loreBlaze})
	play sound "skill.delphox.flamethrower" with volume 2 and pitch 1 at {_target}
						
	if metadata value "FlamethrowerTicks%{_p}%" of {_target} is not set:
		set metadata value "FlamethrowerTicks%{_p}%" of {_target} to {_seconds}
		if {_flameAccelerant} is true:
			set metadata value "FlameAccelerantTicks" of {_p} to {_seconds}
		if {_hotSpree} is true:
			set metadata value "HotSpreeTicks" of {_p} to {_seconds}
		ignite {_target} for "%{_seconds}% seconds" parsed as timespan
		while metadata value "FlamethrowerTicks%{_p}%" of {_target} > 0:
			if {_target} is alive:
				set {_damage} to 1.25 + ({versatility::%{_p}%}/360) + ({damage::%{_p}%}/120) + {primarystat::%{_p}%}/60
				set {_mastery} to 2.5 + (({mastery::%{_p}%}/165))
				set {_crit} to ({criticalhit::%{_p}%}/10) 
				set {_haste} to  Haste({_p})
				set {_wait} to "%1/{_haste}% seconds" parsed as timespan

				set {_ticks} to metadata value "FlamethrowerTicks%{_p}%" of {_target}
				remove 1 from {_ticks}
				set metadata value "FlamethrowerTicks%{_p}%" of {_target} to {_ticks}

				if string tag "Talents;Row 5" of nbt of {karta::%{_p}%} = "Hot Spree":
					set {_damage} to {_damage}*1.6

				if string tag "Talents;Row 1" of nbt of {karta::%{_p}%} = "Firestarter":
					if health of {_target} >= (0.9 * max health of {_target}):
						set {_crit} to 100
						set {_damage} to {_damage} * 1.5

				if {_flameAccelerant} is true:
					if metadata value "FlameAccelerantTicks" of {_p} > 0:
						set {_flameAccelerantTicks} to metadata value "FlameAccelerantTicks" of {_p}
						remove 1 from {_flameAccelerantTicks}
						set metadata value "FlameAccelerantTicks" of {_p} to {_flameAccelerantTicks}
						set {_damage} to {_damage}*2.2

				if string tag "Talents;Row 3" of nbt of {karta::%{_p}%} = "Oxidizing Flame":
					chance of 20%:	
						play sound "entity.creeper.primed" with volume 1 and pitch 2 at {_target}
						set {_damage} to {_damage}*1.3

				if {_hotSpree} is true:
					if metadata value "HotSpreeTicks" of {_p} > 0:
						set {_hotSpreeTicks} to metadata value "HotSpreeTicks" of {_p}
						remove 1 from {_hotSpreeTicks}
						set metadata value "HotSpreeTicks" of {_p} to {_hotSpreeTicks}
						set {_damage} to {_damage}*1.5
						broadcast "Yes"

				chance of {_crit}%:
					set {_damage} to {_damage} * ({_mastery})
					Kindling({_p})
					CritVisual({_target})

				if string tag "Talents;Row 5" of nbt of {karta::%{_p}%} = "Wildfire":
					if {wildfireDelphox::%{_p}%} is not set:
						set {wildfireDelphox::%{_p}%} to 0
					if {wildfireDelphox::%{_p}%} < 600:
						add 1 to {wildfireDelphox::%{_p}%}
				
				if string tag "Talents;Row 4" of nbt of {karta::%{_p}%} = "Will-o-Wisp":
					chance of 10%:	
						WilloWisp({_p}, {_target})

				set {_target}'s last damage cause to sweep attack
				set metadata value "LastDamageCause" of {_target} to "<##d74327>Flamethrower"
				set metadata value "Element" of {_p} to "Fire"
				set metadata value "LastDamageCauseLore" of {_target} to {_lore}
				make {_p} damage {_target} by {_damage}*2
				DelphoxRecentlyDamaged({_p}, {_target})
			else:
				stop loop
			wait {_wait}

		clear metadata value "FlamethrowerBurn" of {_target}
		clear metadata value "FlamethrowerDuration%{_p}%" of {_target}
		clear metadata value "FlamethrowerTicks%{_p}%" of {_target}

	else:
		set {_ticks} to {_seconds}
		set {_ticksTarget} to metadata value "FlamethrowerTicks%{_p}%" of {_target}
		add {_ticks} to {_ticksTarget}
		set metadata value "FlamethrowerTicks%{_p}%" of {_target} to {_ticksTarget}
		extinguish {_target}
		ignite {_target} for "%{_ticksTarget}% seconds" parsed as timespan			

function Inferno(p: player, target: entity):
	set {_mastery} to 2.5 + (({mastery::%{_p}%}/165))
	set {_crit} to ({criticalhit::%{_p}%}/10)
	if metadata value "FlamethrowerBurn" of {_target} is true:
		set {_damage} to 3.5 + ({versatility::%{_p}%}/114) + ({damage::%{_p}%}/38)  + ({primarystat::%{_p}%}/19)
		set {_stun} to "%2 + (({crowdcontrol::%{_p}%}/60))% seconds" parsed as timespan
		set {_stuntekst} to 2 + (({crowdcontrol::%{_p}%}/60))
		set {_explotekst} to 6 + ({versatility::%{_p}%}/52.5) + ({damage::%{_p}%}/17.5) + ({primarystat::%{_p}%}/8.75)

		clear metadata value "FlamethrowerBurn" of {_target}

		set {_lore} to "&8Basic Ability%nl%&fInstant cast%nl%&7Cooldown: &8 &fnone%nl%&7Use: &fRMB/SHIFT%nl%<##fa4420>RIGHT-CLICK:%nl%<##f2636a>Imprisons <##fa4420>a target affected by &f <##f2636a>Flamethrower%nl%<##fa4420>in a fiery prison, &f <##f2636a>Stunning <##fa4420>them for &f%{_stuntekst}% sec <##fa4420>and%nl%<##fa4420>inflicting &f%{_damage}% <##ff4d00>Fire <##fa4420>damage.%nl% %nl%<##fa4420>SHIFT:%nl%<##f2636a>Detonates <##fa4420>an active &f <##f2636a>Inferno<##fa4420>, dealing &f%{_explotekst}% <##ff4d00>Fire%nl%<##fa4420>damage and <##f2636a>tossing <##fa4420>the enemy into the air."
		LoreUpdate({_p}, "Inferno", {_lore})

		if {_target} is alive:
			if canBeCCed({_target}) = true:
				InfernoStun({_p}, {_target})

			set metadata value "InfernoTarget" of {_target} to true

			chance of {_crit}%:
				set {_damage} to {_damage} * {_mastery}
				Kindling({_p})
				CritVisual({_target})

			set {_target}'s last damage cause to sweep attack
			set metadata value "LastDamageCause" of {_target} to "<##d74327>Inferno"
			set metadata value "Element" of {_p} to "Fire"
			set metadata value "LastDamageCauseLore" of {_target} to {_lore}
			make {_p} damage {_target} by {_damage}*2
			play sound "entity.illusioner.mirror_move" with volume 1 and pitch 1 at {_p}
			InfernoParticles({_target})

function InfernoDetonate(p: player, target: entity):
	set {_mastery} to 2.5 + (({mastery::%{_p}%}/165))
	set {_crit} to ({criticalhit::%{_p}%}/10)

	set {_damage} to 6 + ({versatility::%{_p}%}/60) + ({damage::%{_p}%}/20) + ({primarystat::%{_p}%}/10)
	set metadata value "InfernoTarget" of {_target} to false

	clear {stun::%{_target}%}
	clear metadata value "InfernoStun%{_p}%" of {_target}
	
	set {_knock} to 1 + ({crowdcontrol::%{_p}%}/100)

	set {_damageTrigger} to 3.5 + ({versatility::%{_p}%}/114) + ({damage::%{_p}%}/38)  + ({primarystat::%{_p}%}/19)
	set {_stuntekst} to 2 + (({crowdcontrol::%{_p}%}/60))

	set {_lore} to "&8Basic Ability%nl%&fInstant cast%nl%&7Cooldown: &8 &fnone%nl%&7Use: &fRMB/SHIFT%nl%<##fa4420>RIGHT-CLICK:%nl%<##f2636a>Imprisons <##fa4420>a target affected by &f <##f2636a>Flamethrower%nl%<##fa4420>in a fiery prison, &f <##f2636a>Stunning <##fa4420>them for &f%{_stuntekst}% sec <##fa4420>and%nl%<##fa4420>inflicting &f%{_damageTrigger}% <##ff4d00>Fire <##fa4420>damage.%nl% %nl%<##fa4420>SHIFT:%nl%<##f2636a>Detonates <##fa4420>an active &f <##f2636a>Inferno<##fa4420>, dealing &f%{_damage}% <##ff4d00>Fire%nl%<##fa4420>damage and <##f2636a>tossing <##fa4420>the enemy into the air."
	LoreUpdate({_p}, "Inferno", {_lore})

	play sound "entity.dragon_fireball.explode" with volume 1 and pitch 1 at {_p}
	if canBeCCed({_target}) = true:
		push {_target} upwards with velocity {_knock}

	chance of {_crit}%:
		set {_damage} to {_damage} * {_mastery}
		Kindling({_p})
		CritVisual({_target})

	set {_target}'s last damage cause to sweep attack
	set metadata value "LastDamageCause" of {_target} to "<##d74327>Inferno (Detonate)"
	set metadata value "Element" of {_p} to "Fire"
	set metadata value "LastDamageCauseLore" of {_target} to {_lore}
	make {_p} damage {_target} by {_damage} * 2
	
function InfernoStun(p: player, target: entity):
	set {_stunDuration} to "%2 + (({crowdcontrol::%{_p}%}/60))% seconds" parsed as timespan
	if metadata value "InfernoStun%{_p}%" of {_target} is not set:
		set metadata value "InfernoStun%{_p}%" of {_target} to {_stunDuration}
		while metadata value "InfernoStun%{_p}%" of {_target} > 0 seconds:
			wait 1 second
			set {_duration} to metadata value "InfernoStun%{_p}%" of {_target}
			remove 1 second from {_duration}
			set metadata value "InfernoStun%{_p}%" of {_target} to {_duration}
			if 0 seconds >= metadata value "InfernoStun%{_p}%" of {_target}:
				clear metadata value "InfernoStun%{_p}%" of {_target}
				clear {stun::%{_target}%}
				clear metadata value "InfernoTarget" of {_target}
				stop loop
	else:
		set metadata value "InfernoStun%{_p}%" of {_target} to {_stunDuration}

function DelphoxRecentlyDamaged(p: player, target: entity):
	if metadata value "RecentlyDamagedDelphox%{_p}%" of {_target} is not set:
		set metadata value "RecentlyDamagedDelphox%{_p}%" of {_target} to 20 seconds
		while metadata value "RecentlyDamagedDelphox%{_p}%" of {_target} > 0 seconds:
			wait 1 second
			set {_duration} to metadata value "RecentlyDamagedDelphox%{_p}%" of {_target}
			remove 1 second from {_duration}
			set metadata value "RecentlyDamagedDelphox%{_p}%" of {_target} to {_duration}
			if 0 seconds >= metadata value "RecentlyDamagedDelphox%{_p}%" of {_target}:
				clear metadata value "RecentlyDamagedDelphox%{_p}%" of {_target}
				stop loop
	else:
		set metadata value "RecentlyDamagedDelphox%{_p}%" of {_target} to 20 seconds

function FlameAccelerant(p: player, cd: number):
	if metadata value "DelphoxFlamethrowerUsed" of {_p} is not set:
		set metadata value "DelphoxFlamethrowerUsed" of {_p} to "%{_cd}% seconds" parsed as timespan
		while metadata value "DelphoxFlamethrowerUsed" of {_p} > 0 seconds:
			wait 1 second
			set {_duration} to metadata value "DelphoxFlamethrowerUsed" of {_p}
			remove 1 second from {_duration}
			set metadata value "DelphoxFlamethrowerUsed" of {_p} to {_duration}
			if 0 seconds >= metadata value "DelphoxFlamethrowerUsed" of {_p}:
				clear metadata value "DelphoxFlamethrowerUsed" of {_p}
				stop loop
	else:
		set metadata value "DelphoxFlamethrowerUsed" of {_p} to "%{_cd}% seconds" parsed as timespan

function WilloWisp(p: player, target: entity):
	play sound "skill.delphox.willowisp" with volume 1.5 and pitch 1 at {_target}
	WilloWispVisual({_p}, {_target})

	if {_target} is alive:
		if metadata value "FlamethrowerTicks%{_p}%" of {_target} is set:
			set {_ticks} to metadata value "FlamethrowerTicks%{_p}%" of {_target}
			add 1 to {_ticks}
			set metadata value "FlamethrowerTicks%{_p}%" of {_target} to {_ticks}

	set {_damage} to 1.25 + ({versatility::%{_p}%}/420) + ({damage::%{_p}%}/140) + {primarystat::%{_p}%}/70
	set {_mastery} to 2.5 + (({mastery::%{_p}%}/165))
	set {_crit} to ({criticalhit::%{_p}%}/10)
	set {_lore} to "&8Passive Ability%nl%&fNo cast%nl%&7Cooldown: &8 &fnone%nl%&7Use: &fPASSIVE%nl%&f <##f2636a>Flamethrower <##fa4420>ticks have a &f10%% <##fa4420>chance%nl%<##fa4420>to summon a &f <##eb6146>Will-o-Wisp&7.%nl% %nl%&f <##eb6146>Will-o-Wisp%nl%<##fa4420>Adds an &fadditional tick <##fa4420>of &f <##f2636a>Flamethrower%nl%<##fa4420>to the target and deals an instance of%nl%&f1.25 <##ff4d00>Fire <##fa4420>damage."
	
	chance of {_crit}%:
		set {_damage} to {_damage} * {_mastery}
		CritVisual({_target})

	wait 1 tick

	set {_target}'s last damage cause to sweep attack
	set metadata value "LastDamageCause" of {_target} to "<##d74327>Will-o-Wisp"
	set metadata value "Element" of {_p} to "Fire"
	set metadata value "LastDamageCauseLore" of {_target} to {_lore}
	make {_p} damage {_target} by {_damage} * 2

function WilloWispVisual(p: player, target: entity):
	set {_where} to a random integer between 1 and 2
	if {_where} = 1:
		if {_p}'s horizontal facing is north or south:
			set {_loc} to location 0.6 left of {_target}
		else:
			set {_loc} to location 0.6 behind {_target}
	else:
		if {_p}'s horizontal facing is north or south:
			set {_loc} to location 0.6 right of {_target}
		else:
			set {_loc} to location 0.6 in front of {_target}
	set {_loc} to location 1.5 above {_loc}
	set {_yaw} to yaw of {_p} - 180
	set yaw of {_loc} to {_yaw}
	spawn armor stand at {_loc} with nbt from "{Invulnerable:1b,NoGravity:1b}"
	set name of last spawned armor stand to "willowisp"
	set {_e} to last spawned armor stand
	add nbt from "{Rotation:[%{_yaw}%.0f,0.0f]}" to nbt of {_e}
	WillowispVisualDelete({_e})

function WillowispVisualDelete(e: entity):
	wait 3 seconds
	kill {_e}

function BlasterMaster(p: player):
	if {blastermasterstacks::%{_p}%} > 0:
		if {_p}'s chestplate is golden nugget:
			if name of {_p}'s chestplate contains "Serce Earthcrafta" or "Heart of Earthcraft":
				if line 30 of lore of {_p}'s chestplate contains {_p}'s name:
					set {_loreheart::*} to lore of {_p}'s chestplate
		#BLASTERMASTER
		loop {_loreheart::*}:
			loop-value contains "Blaster Master":
				add (20*{trait::Delphox::Blaster Master::%{_p}%}) to {_blastermaster}
		wait 3 seconds
		remove 1 from {blastermasterstacks::%{_p}%}
		remove {_blastermaster} from {mastery::%{_p}%}
		if 0 >= {blastermasterstacks::%{_p}%}:
			clear {blastermasterstacks::%{_p}%}
			
function Pyromaniac(p: player):
	if {pyromaniacbonus::%{_p}%} is true:
		set {pyromaniacbonus::%{_p}%} to false
		while {czaspyromaniac::%{_p}%} > 0 seconds:
			if {_p} is alive:
				remove 1 second from {czaspyromaniac::%{_p}%}
				wait 1 second
				if 0 seconds >= {czaspyromaniac::%{_p}%}:
					clear {pyromaniacstacks::%{_p}%}
					clear {czaspyromaniac::%{_p}%}
					clear {pyromaniacbonus::%{_p}%}
					stop loop
			else:
				clear {pyromaniacstacks::%{_p}%}
				stop loop