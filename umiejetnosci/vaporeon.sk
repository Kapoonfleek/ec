
#PASYWKA - ZWIĘKSZA SIŁĘ TARCZ NA SOJUSZNIKACH KTÓRZY MAJĄ +70% HP O 10% 
#- ZWIĘKSZA SIŁĘ LECZENIA NA SOJUSZNIKACH KTÓRZY MAJĄ -30% HP O 10%
#UM 2 - DISPELL - usuwa szkodliwy efekt z sojusznika taki jak trucizny lub klątwy, lub pomocniczy z przeciwnika tj. enrage jeśli został użyty na wrogu
#um 3 REVERSAL - odwraca wszystkie tarcze na mapie na leczenie
#Circle of Water: leczenie przywołuje koło wody wokół uleczonego celu. healing stream zdetonuje koło i uleczy cel o dodatkowe 0.2 hp


#Vaporeon rework
#- Użycie tarczy na sojuszniku, który już posiada tarcze, zamiast ustawiać wartość tarczy na nowo dodaje wartość do istniejącej tarczy.
#- Zmieniono mastery z Wydłuża czas trwania Wybuchowego Bąbelka o 0.25 + mastery/80 sekund na
#- Water Cycle: Zwiększa siłę tarcz na sojusznikach, którzy mają powyżej 50% zdrowia o 15%. Zwiększa siłę leczenia na sojusznikach którzy mają poniżej 50% zdrowia o 15%.
#- Wybuchowy Bąbelek teraz ma 3 sekundowy cooldown i ustawia cooldown na cel, zamiast mieć 26 sekundowy globalny cooldown.
#- Wybuchowy Bąbelek chroni teraz x obrażeń i zadaje x obrażeń
#- Nowa umiejętność: 


on load:
	set {traits::Vaporeon::*} to "Bound Molecules", "Cascade", "Downpour", "Flow of Water", "Heavy Bubbles", "High Tide", "Hydrodance", "Hydrotherapy", "Riversplit" and "Saving Drops"
	set {Bound Molecules} to ""
	set {Cascade} to ""
	set {Downpour} to ""
	set {Flow of Water} to ""
	set {Heavy Bubbles} to ""
	set {High Tide} to ""
	set {Hydrodance} to ""
	set {Hydrotherapy} to ""
	set {Riversplit} to ""
	set {Saving Drops} to ""

on join:
	if {kolekcja::karty::%player%::*} contains "Vaporeon":
		loop 10 times:
			set {_r} to {traits::Vaporeon::%loop-number%}
			set {_x%loop-number%} to {trait::Vaporeon::%{_r}%::%player%}
		if {language::%player%} = "English":
			set {traits::Vaporeon::1::opis::%player%} to "<##7cafbf>Healing Stream &7heals all allies with%nl%<##7cafbf>Circle of Water &7active by &f%0.3*{_x1}% &7health."
			set {traits::Vaporeon::2::opis::%player%} to "&7Detonating <##7cafbf>Circle of Water &7reduces%nl%&7the cooldown of <##7cafbf>Explosive Bubble &7on the%nl%&7affected ally by &f%0.2*{_x2}% seconds&7."
			set {traits::Vaporeon::3::opis::%player%} to "&7When you cast <##7cafbf>Explosive Bubble &7on an ally, you%nl%&7summon healing rain above them, restoring%nl%&7&f%0.5*{_x3}% &7of their HP."
			set {traits::Vaporeon::4::opis::%player%} to "<##7cafbf>Circle of Water &7has &f%4.5*{_x4}%%% &7chance%nl%&7to not become detonated when%nl%&7you cast <##7cafbf>Healing Stream&7."
			set {traits::Vaporeon::5::opis::%player%} to "<##7cafbf>Explosive Bubble &7deals an additional &f%0.15*{_x5}% &7damage%nl%&7for each 1 shield point&7."
			set {traits::Vaporeon::6::opis::%player%} to "<##7cafbf>Reversal &7heals allies by an additional%nl%&f%0.8*{_x6}% &7HP on top of the reversed value&7."
			set {traits::Vaporeon::7::opis::%player%} to "&7Overhaling will heal the nearest ally to your target%nl%&7by &f%5*{_x7}%%% &7of the overhaling value."
			set {traits::Vaporeon::8::opis::%player%} to "<##7cafbf>Reversal &7restores &f%2*{_x8}% HP &7to a random%nl%&7nearby ally for each shield reversed."
			set {traits::Vaporeon::9::opis::%player%} to "<##7cafbf>Healing stream &7heals the nearest ally to%nl%&7your target for &f%5*{_x9}%%% &7of its value."
			set {traits::Vaporeon::10::opis::%player%} to "&7Detonating <##7cafbf>Circle of Water &7has &f%2.75*{_x10}%%% &7chance%nl%&7to grant you a charge of <##7cafbf>Healing Stream&7."
		else:
			if {_x9} > 1:
				set {_tekst} to "sekundy"
			else:
				set {_tekst} to "sekundę"
			if {_x9} = 4:
				set {_tekst2} to "obrażenia"
			else:
				set {_tekst2} to "obrażeń"
			set {traits::Vaporeon::1::opis::%player%} to "<##7cafbf>Uzdrawiający Strumień &leczy wszystkich sojuszników%nl%&7z aktywnym <##7cafbf>Kołem Wody &7o &f%0.3*{_x1}% &7zdrowia."
			set {traits::Vaporeon::2::opis::%player%} to "&7Zdetonowanie <##7cafbf>Koła Wody &7zredukuje cooldown%nl%<##7cafbf>Wybuchowego Bąbelka &7na celu o &f%0.2*{_x2}% sekundy&7."
			set {traits::Vaporeon::3::opis::%player%} to "&7Kiedy używasz <##7cafbf>Wybuchowego Bąbelka &7na sojuszniku,%nl%&7przywołujesz leczniczy deszcz, przywracając%nl%&7&f%0.5*{_x3}% &7zdrowia temu sojusznikowi."
			set {traits::Vaporeon::4::opis::%player%} to "<##7cafbf>Koło Wody &7ma &f%4.5*{_x4}%%% &7szans na%nl%&7nie zostanie zdetonowanym, kiedy%nl%&7używasz <##7cafbf>Uzdrowiającego Strumienia&7."
			set {traits::Vaporeon::5::opis::%player%} to "<##7cafbf>Wybuchowy Bąbelek &7zadaje dodatkowe &f%0.15*{_x5}% &7dobrażeń%nl%&7za każdy 1 punkt tarczy&7."
			set {traits::Vaporeon::6::opis::%player%} to "<##7cafbf>Reversal &7leczy sojuszników o dodatkowe%nl%&f%0.8*{_x6}% &7HP."
			set {traits::Vaporeon::7::opis::%player%} to "&7Overhalowanie uleczy najbliższego sojusznika od%nl%&7twojego celu o &f%5*{_x7}%%% &7od wartości overheal'u."
			set {traits::Vaporeon::8::opis::%player%} to "<##7cafbf>Reversal &7przywraca &f%2*{_x8}% HP &7losowemu%nl%&7pobliskiemu sojusznikowi za każdą%nl%&7odwróconą tarczę."
			set {traits::Vaporeon::9::opis::%player%} to "<##7cafbf>Uzdrawiający Strumień &7leczy najbliższego sojusznika%nl%&7od twojego celu o &f%5*{_x9}%%% &7jego wartości."
			set {traits::Vaporeon::10::opis::%player%} to "&7Zdetonowanie <##7cafbf>Koła Wody &7ma &f%2.75*{_x10}%%% &7szans%nl%&7na przyznanie ci ładunku <##7cafbf>Uzdrawiającego Strumienia&7."

on leave:
	if {kolekcja::karty::%player%::*} contains "Vaporeon":
		loop 10 times:
			clear {traits::Vaporeon::%loop-number%::opis::%player%}

function Overhealing(p: player, target: entity, overheal: number, ability: text):
	if {_overheal} > ((max health of {_target}) - (health of {_target})):
		set {_overheal} to {_overheal} - ((max health of {_target}) - (health of {_target}))

		
		if {kartaname::%{_p}%} = "Vaporeon":
			loop all players in radius 20 of {_target}:
				if uuid of loop-player != uuid of {_target}:
					if health of loop-player < (max health of loop-player):
						set {_players::*} to {_players::*} and loop-player
			if {_players::*} is not set:
				loop all living entities in radius 20 of {_target} where [input is not a player]:
					if tag "custom;ECMob" of nbt of loop-entity is not set:
						if health of loop-entity < (max health of loop-entity):
							set {_players::*} to {_players::*} and loop-entity
				if {_players::*} is not set:
					loop all entities in radius 20 of {_target}:
						if tag "custom;ECMob" of nbt of loop-entity is set:
							set {_players::*} to {_players::*} and loop-entity

			loop {_players::*}:
				set {_maxhealth::%uuid of loop-value%} to (health of loop-value/max health of loop-value)

			set {_targets::*} to sorted indices of {_maxhealth::*} in ascending order
			set {_entity} to {_targets::1} parsed as entity

			set {_crit} to ({criticalhit::%{_p}%}/10)
			set {_masteryScaling} to 370
			if tag "Talents;Row 3" of nbt of {karta::%{_p}%} = "Overflow":
				set {_masteryScaling} to {_masteryScaling}/1.2
			set {_mastery} to 1.1 + ({mastery::%{_p}%}/{_masteryScaling})
			
			if tag "Talents;Row 5" of nbt of {karta::%{_p}%} = "Hydrodance":
				set {_overheal} to 0.3*{_overheal}
				if health of {_entity} < (0.5*max health of {_entity}):
					set {_overheal} to {_overheal}*{_mastery}
				chance of {_crit}%:
					set {_overheal} to {_overheal}*2
				set {_lore} to "<##7cafbf>Overhealing heals the nearest ally%nl%<##7cafbf>by &f30%% <##7cafbf>of the overheal value. If no%nl%<##7cafbf>eligible allies are nearby, overhealing%nl%<##7cafbf>will instead &fdamage <##7cafbf>nearby enemies%nl%<##7cafbf>by &f20%% <##7cafbf>of the value."
				if tag "custom;ECMob" of nbt of {_entity} is not set:
					Heal({_p}, {_entity}, {_overheal}, "Hydrodance", "<##7cafbf>", {_lore})
				else:
					set {_entity}'s last damage cause to sweep attack
					set metadata value "LastDamageCause" of {_entity} to "<##7cafbf>Hydrodance"
					set metadata value "LastDamageCauseLore" of {_entity} to {_lore}
					set metadata value "Element" of {_p} to "Water"
					make {_p} damage {_entity} by {_overheal}*2
				play sound "entity.generic.swim" with volume 2.5 and pitch 1.25 at {_entity}
				draw 40 of fishing particle at {_entity} with offset vector(0.45, 0.55, 0.45) with extra 0.05
		else:
			set {_overheal} to {_overheal} - ((max health of {_target}) - (health of {_target}))

on rightclick:
	if tag "Healing Stream" of nbt of player's tool is set:
		cancel event
		if metadata value "HealingStreamCharges" of player is not set:
			if tag "Talents;Row 1" of nbt of {karta::%player%} = "Undulation":
				set {_maxCharges} to 3
			else:
				set {_maxCharges} to 2
			set metadata value "HealingStreamCharges" of player to {_maxCharges}
		set {_x} to TargetHealingStream(player, 100, false)
		if {_x} is set:
			if {kartaname::%player%} = "Vaporeon":
				if isCastableVaporeon(player) = true:
					if CanUseAbility(player) != false:
						if cooldown "Healing StreamDoublePrevent%player%" is finished:
							create cooldown "Healing StreamDoublePrevent%player%" for 1 tick
							set {_id} to line 19 of lore of {karta::%player%}
							if player's chestplate is golden nugget:
								if name of player's chestplate contains "Serce Earthcrafta" or "Heart of Earthcraft":
									if line 30 of lore of player's chestplate contains player's name:
										set {_loreheart::*} to lore of player's chestplate
							set {_crit} to ({criticalhit::%player%}/10)
							set {_pospiech} to 1 + (({haste::%player%}/4))/100
							set {_cd} to "%8/{_pospiech}% seconds" parsed as timespan
							set {_heal} to 1.5 + ({utility::%player%}/80) + ({versatility::%player%}/240) + ({primarystat::%player%}/40)
							set {_masteryScaling} to 370
							if tag "Talents;Row 3" of nbt of {karta::%player%} = "Overflow":
								set {_masteryScaling} to {_masteryScaling}/1.2
							set {_mastery} to 1.1 + ({mastery::%player%}/{_masteryScaling})
							AbilityUse(player, "Healing Stream")
							set {_am} to item amount of player's tool
							if {_am} > 1:
								remove 1 of player's tool from player
							#SAVING DROPS
							loop {_loreheart::*}:
								loop-value contains "Saving Drops":
									add (2.75*{trait::Vaporeon::Saving Drops::%player%}) to {_savingdrops}
							chance of {_savingdrops}%:
								set {_drops} to true
							set {_charges} to metadata value "HealingStreamCharges" of player
							remove 1 from {_charges}
							set metadata value "HealingStreamCharges" of player to {_charges}
							HealingStreamRecharge(player, {_cd})
							if {_charges} = 1:
								set {_chargesLore} to "%{_charges}% Charge"
							else:
								set {_chargesLore} to "%{_charges}% Charges"
							set {_lore} to "&8Ability%nl%&f%{_charges}% Charges%nl%&fInstant cast%nl%&7Cooldown: &f%{_cd}%%nl%&7Use: &fRMB%nl%<##7cafbf>Sends a healing stream towards an ally.%nl%<##7cafbf>Upon reaching its target, the stream will%nl%<##7cafbf>restore &f%{_heal}% <##7cafbf>HP to the affected ally."
							loop all items in the inventory of player:
								if tag "Healing Stream" of nbt of (1 of loop-item) is set:
									set lore of loop-item to {_lore}
									if {_charges} > 0:
										set item amount of loop-item to {_charges}
										create cooldown "Healing Stream%player%" for {_cd}
									else:
										set the cooldown of loop-item for player to {_cd}
									stop loop							
							set {_id} to line 19 of lore of {karta::%player%}
							set {_pospiech} to 1 + (({haste::%player%}/4))/100
							play sound "block.water.ambient" with volume 3 and pitch 1 at player
							play sound "skill.vaporeon_healingstream_cast" with volume 3 and pitch 1 at player
							if metadata value "TidalWaves" of player is set:
								set {_tidalWaves} to metadata value "TidalWaves" of player
								clear metadata value "TidalWaves" of player
								send title " " with subtitle " " to player for 1 second with fade in 0.0 second and fade out 0.0 second
							loop blocks between player and {_x}:
								draw 3 of dust using dustOption((rgb 47, 69, 235), 1) at location of loop-block with offset vector(0.15, 0.15, 0.15) with extra 0.03
								draw 3 of bubble particle at location of loop-block with offset vector(0.15, 0.15, 0.15) with extra 0.03
								wait 1 tick
							if {_x} is alive:
								if health of {_x} < (0.5*max health of {_x}):
									set {_heal} to {_heal}*{_mastery}
								if tag "Talents;Row 1" of nbt of {karta::%player%} = "Undulation":
									set {_heal} to {_heal}*1.15
								if {_tidalWaves} is set:
									set {_tidalWavesBonus} to 1.3
									if tag "Talents;Row 3" of nbt of {karta::%player%} = "High Tide":
										set {_tidalWavesBonus} to {_tidalWavesBonus}*1.4
									set {_heal} to {_heal}*{_tidalWavesBonus}^{_tidalWaves}
									if tag "Talents;Row 4" of nbt of {karta::%player%} = "Coalescing Tides":
										set {_coalescingTides} to true
								chance of {_crit}%:
									set {_heal} to {_heal}*2
								if tag "Talents;Row 2" of nbt of {karta::%player%} = "Tidewaters":
									Tidewaters(player, {_x}, {_heal})
								if metadata value "Undercurrent" of player > 0:
									set {_undercurrent} to metadata value "Undercurrent" of player
									set {_heal} to {_heal}*(1 + 0.08*{_undercurrent})
								play sound "skill.vaporeon_healingstream_hit" with volume 5 and pitch 1 at {_x}
								
								if tag "custom;ECMob" of nbt of {_x} is not set:
									Heal(player, {_x}, {_heal}, "Healing Stream", "<##7cafbf>", {_lore})
									CircleOfWaterApply(player, {_x}, "Healing Stream")
									if {_coalescingTides} is true:
										play sound "entity.generic.splash" with volume 3 and pitch 1 at {_x}
										set {_lore} to "&8Ability%nl%&f%{_charges}% Charges%nl%&fInstant cast%nl%&7Cooldown: &f%{_cd}%%nl%&7Use: &fRMB%nl%<##7cafbf>Sends a healing stream towards an ally.%nl%<##7cafbf>Upon reaching its target, the stream will%nl%<##7cafbf>restore &f%{_heal}*0.3% <##7cafbf>HP to the affected ally."
										set {_coalescingRadius} to 5
										coalescingTides(player, {_x}, {_coalescingRadius}, {_heal}, {_lore}, "heal")
										#RIVERSPLIT
									loop {_loreheart::*}:
										loop-value contains "Riversplit":
											add (5*{trait::Vaporeon::Riversplit::%player%}) to {_riversplit}
									if {_riversplit} is set:
										set {_heal} to ({_riversplit}/100)*{_heal}
										loop all living entities in radius 15 around {_x}:
											if tag "custom;ECMob" of nbt of loop-entity is not set:
												if loop-entity is a player:
													if loop-entity is not player:
														if loop-entity is not {_x}:
															set {_random} to loop-entity
										if {_random} is not set:
											loop all living entities in radius 15 around {_x}:
												if tag "custom;ECMob" of nbt of loop-entity is not set:
													if loop-entity is not a player:
														if loop-entity is not {_x}:
															set {_random} to loop-entity
										Overhealing(player, {_random}, {_heal}, "123")
										if {_heal} > ((max health of {_random}) - (health of {_random})):
											set {_heal} to ((max health of {_random}) - (health of {_random}))
											if {_heal} < 0:
												set {_heal} to 0
										if {_heal} > 0:
											heal {_random} by {_heal}
											HealAssist(player, {_random})
											HealRefresh(player, {_heal})
											if metadata value "DungeonInstance" of player is set:
												DungeonHeal(player, {_random}, {_heal}, "Healing Stream")
											if {_random} is a player:
												if {language::%{_random}%} = "English":
													send formatted "%{kartacolor::%player%}%%player% &fhealed you. <tooltip:<##7cafbf>Healing Stream%nl%%{_loreEN}%>(<##baff8c>+%{_heal}% HP&f)" to {_random}
												else:
													send formatted "%{kartacolor::%player%}%%player% &fuleczył cię. <tooltip:<##7cafbf>Uzdrawiający Strumień%nl%%{_lore}%>(<##baff8c>+%{_heal}% HP&f)" to {_random}
										if {_heal} > 0:
											add {_heal} to {healtotal::%player%}
											add {_heal} to {healcard::%{kartaname::%player%}%::%{_id}%}
											add {_heal} to {healcard::%{kartaname::%player%}%::%{_id}%::Healing Stream}
								else:
									set {_x}'s last damage cause to sweep attack
									set metadata value "LastDamageCause" of {_x} to "<##7cafbf>Healing Stream"
									set metadata value "LastDamageCauseLore" of {_x} to {_lore}
									set metadata value "Element" of player to "Water"
									make player damage {_x} by {_heal}*2
									if {_coalescingTides} is true:
										play sound "entity.generic.splash" with volume 3 and pitch 1 at {_x}
										set {_lore} to "&8Ability%nl%&f%{_charges}% Charges%nl%&fInstant cast%nl%&7Cooldown: &f%{_cd}%%nl%&7Use: &fRMB%nl%<##7cafbf>Sends a healing stream towards an ally.%nl%<##7cafbf>Upon reaching its target, the stream will%nl%<##7cafbf>restore &f%{_heal}*0.3% <##7cafbf>HP to the affected ally."
										set {_coalescingRadius} to 5
										coalescingTides(player, {_x}, {_coalescingRadius}, {_heal}, {_lore}, "damage")
				else:
					if {tekstcd::%player%} = true:
						set {_charges} to metadata value "HealingStreamCharges" of player
						if {_charges} = 0:
							set {_cdd} to cooldown "Healing Stream%player%"
							send "<##7cafbf>You must wait &f%{_cdd}% <##7cafbf>to use this ability." to player
					stop
			else:
				if {language::%player%} = "English":
					send "&8[&6Earthcraft&8] &6You don't have the required card selected to use this ability." to player
				else:
					send "&8[&6Earthcraft&8] &6Nie masz wybranej wymaganej karty, by móc użyć tej umiejętności." to player
				play sound "block.glass.break" with volume 3 and pitch 0 to player
	if player's tool's name is "<##7cafbf>Explosive Bubble":
		cancel event
		if {kartaname::%player%} = "Vaporeon":
			if CanUseAbility(player) != false:
				set {_id} to line 19 of lore of {karta::%player%}
				if player's chestplate is golden nugget:
					if name of player's chestplate contains "Serce Earthcrafta" or "Heart of Earthcraft":
						if line 30 of lore of player's chestplate contains player's name:
							set {_loreheart::*} to lore of player's chestplate
				set {_crit} to ({criticalhit::%player%}/10)
				set {_pospiech} to 1 + (({haste::%player%}/4))/100
				set {_cd} to "%1.5/{_pospiech}%"
				set {_cdtarget} to "%20/{_pospiech}%"
				set {_cdLore} to "%{_cd}% seconds" parsed as timespan
				set {_cdtargetLore} to "%{_cdtarget}% seconds" parsed as timespan
				set {_wait} to 8/{_pospiech}
				set {_shield} to 6 + ({utility::%player%}/52) + ({versatility::%player%}/156) + {primarystat::%player%}/26
				set {_damage} to 1 + ({damage::%player%}/60) + ({versatility::%player%}/180) + {primarystat::%player%}/30
				set {_masteryScaling} to 370
				if tag "Talents;Row 3" of nbt of {karta::%player%} = "Overflow":
					set {_masteryScaling} to {_masteryScaling}/1.2
				set {_mastery} to 1.1 + ({mastery::%player%}/{_masteryScaling})
				if cooldown "Explosive Bubble%player%" is finished:
					if target of player is set:
						if player's target is a player:
							set {_i} to target of player
						else:
							set {_i} to player
					else:
						set {_i} to player
					if {_i} is set:
						set {_uuid} to uuid of {_i}
						if cooldown "Explosive Bubble%player%-%{_uuid}%" is finished:
							set the cooldown of player's held item for player to ("%{_cd}% seconds" parsed as timespan)
							create cooldown "Explosive Bubble%player%" for ("%{_cd}% seconds" parsed as timespan)
							create cooldown "Explosive Bubble%player%-%{_uuid}%" for ("%{_cdtarget}% seconds" parsed as timespan)

							AbilityUse(player, "Explosive Bubble")
							if tag "Talents;Row 1" of nbt of {karta::%player%} = "Undercurrent":
								set {_undercurrent} to metadata value "Undercurrent" of player
								add 1 to {_undercurrent}
								set metadata value "Undercurrent" of player to {_undercurrent}

							#DOWNPOUR
							loop {_loreheart::*}:
								loop-value contains "Downpour":
									add (0.5*{trait::Vaporeon::Downpour::%player%}) to {_downpour}

							if tag "Talents;Row 2" of nbt of {karta::%player%} is set:
								send title " " with subtitle "" to player for 1 minute with fade in 0.25 second and fade out 0 second
								set {_tidalWaves} to metadata value "TidalWaves" of player
								if {_tidalWaves} is not set:
									set {_tidalWaves} to 0
								if tag "Talents;Row 4" of nbt of {karta::%player%} = "Coalescing Tides":
									set {_tidalWavesMax} to 4
								else:
									set {_tidalWavesMax} to 2
								if {_tidalWaves} < {_tidalWavesMax}:
									add 1 to {_tidalWaves}
								set metadata value "TidalWaves" of player to {_tidalWaves}
								play sound "skill.vaporeon_tidalwaves" with volume 3 and pitch 1 to player

							if {_downpour} is set:
								set {_yb} to block 2 blocks above {_i}
								set {_zb} to block above {_yb}		
								loop all blocks in radius 2 around {_zb}:
									if y-coordinate of loop-block = y-coordinate of {_zb}:
										draw 1 of cloud at location of loop-block
								loop all blocks in radius 2 around {_yb}:
									draw 1 of rain at location of loop-block
								if health of {_i} < (0.5*max health of {_i}):
									set {_downpour} to {_downpour}*{_mastery}
								chance of {_crit}%:
									set {_downpour} to {_downpour}*2
								Overhealing(player, {_i}, {_downpour}, "Downpour")
								if {_downpour} > ((max health of {_i}) - (health of {_i})):
									set {_downpour} to ((max health of {_i}) - (health of {_i}))
									if {_downpour} < 0:
										set {_downpour} to 0
								heal {_i} by {_downpour}
								set {_lore} to "<##7cafbf>Downpour%nl%<##7cafbf>Wybuchowy Bąbelek &7przywołuje leczniczy deszcz nad celem,%nl%&7przywracając &f%{_downpour}% &7zdrowia."
								set {_loreEN} to "<##7cafbf>Downpour%nl%<##7cafbf>Explosive Bubble &7summons a healing rain above its target,%nl%&7restoring &f%{_downpour}% &7health."
								HealRefresh(player, {_downpour})
								if metadata value "DungeonInstance" of player is set:
									DungeonHeal(player, {_i}, {_downpour}, "Downpour")
								CircleOfWaterApply(player, {_i}, "Downpour")
								if {_i} is a player:
									if {_downpour} > 0:
										if {language::%{_i}%} = "English":
											send formatted "%{kartacolor::%player%}%%player% &fhealed you. <tooltip:%{_loreEN}%>(<##baff8c>+%{_downpour}% HP&f)" to {_i}
										else:
											send formatted "%{kartacolor::%player%}%%player% &fuleczył cię. <tooltip:%{_lore}%>(<##baff8c>+%{_downpour}% HP&f)" to {_i}
								if {_downpour} > 0:
									add {_downpour} to {healtotal::%player%}
									add {_downpour} to {healcard::%{kartaname::%player%}%::%{_id}%}
									add {_downpour} to {healcard::%{kartaname::%player%}%::%{_id}%::Downpour}

							set {_lore} to  "&8Ability%nl%&fInstant cast%nl%&7Cooldown: &f%{_cdLore}% | %{_cdtargetLore}% per target%nl%&7Use: &fRMB%nl%<##7cafbf>Wraps an ally in an explosive bubble, which%nl%<##7cafbf>absorbs &f%{_shield}% <##7cafbf>damage. <##7cafbf>After &f%{_wait}% sec<##7cafbf>, the bubble%nl%<##7cafbf>explodes, <##7cafbf>dealing &f%{_damage}% + (remaining shield value)%nl%<##7cafbf>as <##1ebbd7>Water <##7cafbf>damage to nearby enemies.%nl% %nl%<##7cafbf>When <##7cafbf>Explosive Bubble <##7cafbf>is reapplied, the shield%nl%<##7cafbf>amount will be added to the existing shield,%nl%<##7cafbf>but the duration will not be refreshed."
							set lore of player's tool to {_lore}
							
							
							if health of {_i} > (0.5*max health of {_i}):
								set {_shield} to {_shield}*{_mastery}
							chance of {_crit}%:
								set {_shield} to {_shield}*2

							set {_shieldNumber} to Shield(player, {_i}, {_shield} + 0.00, "Explosive Bubble", "<##7cafbf>", {_lore}, 0, true, true)
							play sound "block.bubble_column.whirlpool_inside" with volume 3 and pitch 1 at {_i}
							set {_waitTime} to ("%{_wait}% seconds" parsed as timespan)
							explosiveBubbleParticles({_i}, {_waitTime})
							wait {_waitTime}

							#HEAVY BUBBLES
							loop {_loreheart::*}:
								loop-value contains "Heavy Bubbles":
									add (0.15*{trait::Vaporeon::Heavy Bubbles::%player%}) to {_heavybubbles}

							if tag "custom;Shields;%{_shieldNumber}%" of nbt of {_i} is set:
								play sound "entity.dragon_fireball.explode" with volume 3 and pitch 1 at {_i}
								loop all living entities in radius 10 around {_i}:
									if tag "custom;ECMob" of nbt of loop-entity is set:
										set {_shieldTarget} to tag "custom;Shields;%{_shieldNumber}%;Amount" of nbt of {_i}
										chance of {_crit}%:
											set {_damage} to {_damage}*2
										if {_heavybubbles} is true:
											set {_dmg} to (({_shieldTarget} + {_damage}) + ({_shieldTarget}*{_heavybubbles}))
										else:
											set {_dmg} to ({_shieldTarget} + {_damage})
										set loop-entity's last damage cause to sweep attack
										set metadata value "LastDamageCause" of loop-entity to "<##7cafbf>Explosive Bubble"
										set metadata value "LastDamageCauseLore" of loop-entity to {_lore}
										set metadata value "Element" of player to "Water"
										make player damage loop-entity by 2*({_dmg})
								shieldExpire({_i}, {_shieldNumber})
								send action bar " " to {_i}
								if tag "Talents;Row 1" of nbt of {karta::%player%} = "Undercurrent":
									set {_undercurrent} to metadata value "Undercurrent" of player
									remove 1 from {_undercurrent}
									set metadata value "Undercurrent" of player to {_undercurrent}
						else:
							if {tekstcd::%player%} = true:
								set {_cdd} to cooldown "Explosive Bubble%player%-%{_uuid}%"
								if {language::%player%} = "English":
									send "<##7cafbf>You must wait &f%{_cdd}%<##7cafbf> to use this ability on that target." to player
								else:
									send "<##7cafbf>Musisz odczekać &f%{_cdd}%<##7cafbf>, aby użyć tej umiejętności na tym celu." to player
							stop
				else:
					cancel event
					if {tekstcd::%player%} = true:
						set {_cdd} to cooldown "Explosive Bubble%player%"
						if {language::%player%} = "English":
							send "<##7cafbf>You must wait &f%{_cdd}%<##7cafbf> to use this ability." to player
						else:
							send "<##7cafbf>Musisz odczekać &f%{_cdd}%<##7cafbf>, aby użyć tej umiejętności." to player
					stop
		else:
			if {language::%player%} = "English":
				send "&8[&6Earthcraft&8] &6You don't have the required card selected to use this ability." to player
			else:
				send "&8[&6Earthcraft&8] &6Nie masz wybranej wymaganej karty, by móc użyć tej umiejętności." to player
			play sound "block.glass.break" with volume 3 and pitch 0 to player
	if name of player's tool = "<##7cafbf>Reversal":
		cancel event
		if {kartaname::%player%} = "Vaporeon":
			if CanUseAbility(player) != false:
				set {_id} to line 19 of lore of {karta::%player%}
				if player's chestplate is golden nugget:
					if name of player's chestplate contains "Serce Earthcrafta" or "Heart of Earthcraft":
						if line 30 of lore of player's chestplate contains player's name:
							set {_loreheart::*} to lore of player's chestplate
				set {_crit} to ({criticalhit::%player%}/10)
				set {_pospiech} to 1 + (({haste::%player%}/4))/100
				set {_cd} to "%300/{_pospiech}% seconds" parsed as timespan
				set {_masteryScaling} to 370
				if tag "Talents;Row 3" of nbt of {karta::%player%} = "Overflow":
					set {_masteryScaling} to {_masteryScaling}/1.2
				set {_mastery} to 1.1 + ({mastery::%player%}/{_masteryScaling})
				set {_lore} to "&8Ultimate Ability%nl%&fInstant cast%nl%&7Cooldown: &f%{_cd}%%nl%&7Use: &fRMB%nl%<##7cafbf>Reverses all shields to healing in a huge%nl%<##7cafbf>radius around the player. Healing from this%nl%<##7cafbf>ability benefits from <##8bbdf0>Mastery: Water Cycles%nl%<##7cafbf>and can &f Critically Strike<##7cafbf>.%nl% %nl%<##8bbdf0>Reversal <##7cafbf>dispels all &fCurse<##7cafbf>, &fDisease<##7cafbf>, &fMagic%nl%<##7cafbf>and &fPoison <##7cafbf>debuffs from affected allies."
				LoreUpdate(player, "Reversal", {_lore})
				if cooldown "Reversal%player%" is finished:
					set the cooldown of player's held item for player to {_cd}
					create cooldown "Reversal%player%" for {_cd}
					AbilityUse(player, "Reversal")
					play sound "block.note_block.chime" with volume 5 and pitch 1 at player
					play sound "entity.elder_guardian.curse" with volume 5 and pitch 2 at player
					SixStar(player)
					play sound "entity.dragon_fireball.explode" with volume 5 and pitch 1.5 at player
					loop all living entities in radius 100 around the player where [shieldFind(player, input, "Explosive Bubble") is set]:
						if loop-entity is alive:
							set {_shieldNum} to shieldFind(player, loop-entity, "Explosive Bubble")
							set {_shield} to tag "custom;Shields;%{_shieldNum}%;Amount" of nbt of loop-entity
							set {_shield} to "%{_shield}%" parsed as number
							shieldExpire(loop-entity, {_shieldNum})
							
							set {_heal} to {_shield}
							if metadata value "Undercurrent" of player > 0:
								set {_undercurrent} to metadata value "Undercurrent" of player
								set {_heal} to {_heal}*(1 + 0.08*{_undercurrent})
							#HYDROTHERAPY
							loop {_loreheart::*}:
								loop-value-2 contains "Hydrotherapy":
									add (2*{trait::Vaporeon::Hydrotherapy::%player%}) to {_hydrotherapy}
							#HIGH TIDE
							loop {_loreheart::*}:
								loop-value-2 contains "High Tide":
									add (0.8*{trait::Vaporeon::High Tide::%player%}) to {_heal}

							Heal(player, loop-entity, {_heal}, "Reversal", "<##7cafbf>", {_lore})
							if tag "custom;ECMob" of nbt of loop-entity is not set:
								CircleOfWaterApply(player, loop-entity, "Reversal")

						if loop-entity is a player:
							send action bar " " to loop-entity

						clear {_heal}

					if {_hydrotherapy} is set:
						set {_lore} to "<##7cafbf>Reversal &7restores &f%(2*{trait::Vaporeon::Hydrotherapy::%player%})% HP &7to a random%nl%&7nearby ally for each shield reversed."
						set {_players::*} to all players in radius 50 of player where [(health of input) < (max health of input)]
						if {_players::*} is not set:
							set {_players::*} to all players in radius 50 of player
						if {_players::*} is not set:
							set {_players::*} to all living entities in radius 50 of player where [(health of input) < (max health of input)]
						if {_players::*} is not set:
							set {_players::*} to all living entities in radius 50 of player
						set {_players::*} to {_players::*} where [(tag "custom;ECMob" of nbt of input is not set)]
						set {_random} to a random element of {_players::*}
						if health of {_random} < (0.5*max health of {_random}):
							set {_hydrotherapy} to {_hydrotherapy}*{_mastery}
						chance of {_crit}%:
							set {_hydrotherapy} to {_hydrotherapy}*2
						Overhealing(player, {_random}, {_hydrotherapy}, "123")
						if {_hydrotherapy} > ((max health of {_random}) - (health of {_random})):
							set {_hydrotherapy} to ((max health of {_random}) - (health of {_random}))
							if {_hydrotherapy} < 0:
								set {_hydrotherapy} to 0
						heal {_random} by {_hydrotherapy}
						HealAssist(player, {_random})
						HealRefresh(player, {_hydrotherapy})
						if metadata value "DungeonInstance" of player is set:
							DungeonHeal(player, {_random}, {_hydrotherapy}, "Hydrotherapy")
						CircleOfWaterApply(player, {_random}, "Hydrotherapy")
						if {_random} is a player:
							if {_hydrotherapy} > 0:
								send formatted "%{kartacolor::%player%}%%player% &fhealed you. <tooltip:<##7cafbf>Hydrotherapy%nl%%{_lore}%>(<##baff8c>+%{_hydrotherapy}% HP&f)" to {_random}
						if {_hydrotherapy} > 0:
							add {_hydrotherapy} to {healtotal::%player%}
							add {_hydrotherapy} to {healcard::%{kartaname::%player%}%::%{_id}%}
							add {_hydrotherapy} to {healcard::%{kartaname::%player%}%::%{_id}%::Hydrotherapy}
					#wait 2 seconds
					#loop {_part::*}:
					#	stopEffect "%uuid of loop-value%reversal"
				else:
					cancel event
					if {tekstcd::%player%} = true:
						set {_cdd} to cooldown "Reversal%player%"
						if {language::%player%} = "English":
							send "<##7cafbf>You must wait &f%{_cdd}%<##7cafbf> to use this ability." to player
						else:
							send "<##7cafbf>Musisz odczekać &f%{_cdd}%<##7cafbf>, aby użyć tej umiejętności." to player
					stop
		else:
			if {language::%player%} = "English":
				send "&8[&6Earthcraft&8] &6You don't have the required card selected to use this ability." to player
			else:
				send "&8[&6Earthcraft&8] &6Nie masz wybranej wymaganej karty, by móc użyć tej umiejętności." to player
			play sound "block.glass.break" with volume 3 and pitch 0 to player

function HealingStreamRecharge(p: player, cd: timespan):
	wait {_cd}
	set {_charges} to metadata value "HealingStreamCharges" of {_p}
	add 1 to {_charges}
	set metadata value "HealingStreamCharges" of {_p} to {_charges}
	loop all items in the inventory of {_p}:
		if tag "Healing Stream" of nbt of (1 of loop-item) is set:
			if {_charges} > 0:
				set item amount of loop-item to {_charges}
				if {_charges} = 1:
					set line 2 of lore of loop-item to "&f%{_charges}% Charge"
				else:
					set line 2 of lore of loop-item to "&f%{_charges}% Charges"
				reset item cooldown of loop-item for {_p}
				clear cooldown "Healing Stream%{_p}%"
			else:
				set line 2 of lore of loop-item to "&f%{_charges}% Charges"
			stop loop

function isCastableVaporeon(p: player) :: boolean:
    if metadata value "HealingStreamCharges" of {_p} > 0:
        set {_castable} to true
    if {_castable} is not set:
        set {_castable} to false
    return {_castable}
						
function CircleOfWater(e: entity, p: player):
	while metadata value "CircleOfWater%{_p}%" of {_e} is true:
		if {_e} is alive:
			set {_y} to 0
			loop 45 times:
				set {_x} to {_e}'s location
				increase {_x}'s y-coordinate by 1
				set {_v} to vector 1, 0, 1
				rotate {_v} around y-axis by {_y}
				add 8 to {_y}
				draw 1 of dust using dustOption(blue, 1) at {_x} ~ {_v}
				draw 1 of rain particle at {_x} ~ {_v} with offset vector(0.5, 0, 0.5)
				draw 1 of dripping dripstone water at {_x} ~ {_v}
				stop loop if metadata value "CircleOfWater%{_p}%" of {_e} is not true
				wait 1 tick
		else:
			stop loop

function Tidewaters(p: player, x: entity, heal: number):
	set {_haste} to 1 + (({haste::%{_p}%}/4))/100
	set {_cd} to "%3/{_haste}% seconds" parsed as timespan
	set {_healValue} to {_heal}*0.35
	wait {_cd}
	play sound "skill.vaporeon_healingstream_cast" with volume 3 and pitch 1.8 at {_p}
	loop blocks between {_p} and {_x}:
		draw 2 of dust using dustOption((rgb 47, 69, 235), 1) at location of loop-block with offset vector(0.05, 0.05, 0.05) with extra 0.01
		draw 2 of bubble particle at location of loop-block with offset vector(0.15, 0.15, 0.15) with extra 0.03
		wait 1 tick
	if {_x} is alive:
		play sound "skill.vaporeon_healingstream_hit" with volume 5 and pitch 1.8 at {_x}
		set {_lore} to "&8Talent%nl%&fInstant cast%nl%&7Cooldown: &fnone%nl%&7Use: &fPassive%nl%<##7cafbf>Healing Stream sends a second stream of%nl%<##7cafbf>revitalising waters at the affected ally after%nl%&f%{_cd}%<##7cafbf>, reduced by <##19943e> Haste<##7cafbf>. The second%nl%<##7cafbf>stream restores &f35%% <##7cafbf>of the initial value as HP%nl%<##7cafbf>to the ally."
		if tag "custom;ECMob" of nbt of {_x} is not set:
			Heal({_p}, {_x}, {_healValue}, "Tidewaters", "<##7cafbf>", {_lore})
			CircleOfWaterApply({_p}, {_x}, "Tidewaters")
		else:
			set {_x}'s last damage cause to sweep attack
			set metadata value "LastDamageCause" of {_x} to "<##7cafbf>Tidewaters"
			set metadata value "LastDamageCauseLore" of {_x} to {_lore}
			set metadata value "Element" of {_p} to "Water"
			make {_p} damage {_x} by {_healValue}*2

function CircleOfWaterApply(p: player, x: entity, ability: string):
	if metadata value "CircleOfWater%{_p}%" of {_x} is not set:
		set metadata value "CircleOfWater%{_p}%" of {_x} to true
		if {_ability} != "Searage":
			CircleOfWater({_x}, {_p})
	else:
		if tag "Constellation;CONSTELLATION 6" of nbt of {karta::%{_p}%} is set:
			CircleOfWaterDetonate({_p}, {_x})
		else:
			if {_ability} = "Healing Stream":
				CircleOfWaterDetonate({_p}, {_x})
		
function CircleOfWaterDetonate(p: player, x: entity):
	set {_healcircle} to 0.8 + ({utility::%{_p}%}/100) + ({versatility::%{_p}%}/300) + ({primarystat::%{_p}%}/50)
	set {_masteryScaling} to 370
	if tag "Talents;Row 3" of nbt of {karta::%{_p}%} = "Overflow":
		set {_masteryScaling} to {_masteryScaling}/1.2
	set {_mastery} to 1.1 + ({mastery::%{_p}%}/{_masteryScaling})
	set {_crit} to ({criticalhit::%{_p}%}/10)
	set {_crit} to 100
	loop {_loreheart::*}:
		loop-value contains "Bound Molecules":
			add (0.3*{trait::Vaporeon::Bound Molecules::%{_p}%}) to {_molecules}
	if {_molecules} is set:
		loop all living entities where [metadata value "CircleOfWater%{_p}%" of input is true]:
			if health of loop-entity < (0.5*max health of loop-entity):
				set {_molecules} to {_molecules}*{_mastery}
			chance of {_crit}%:
				set {_molecules} to {_molecules}*2
			Overhealing({_p}, loop-entity, {_molecules}, "123")
			if {_molecules} > ((max health of loop-entity) - (health of loop-entity)):
				set {_molecules} to ((max health of loop-entity) - (health of loop-entity))
				if {_molecules} < 0:
					set {_molecules} to 0
			heal loop-entity by {_molecules}
			HealAssist({_p}, loop-entity)
			set {_lore} to "<##7cafbf>Bound Molecules%nl%<##7cafbf>Uzdrawiający Strumień &7leczy wszystkich sojuszników%nl%&7z aktywnym <##7cafbf>Kołem Wody &7o &f%{_molecules}% &7zdrowia."
			set {_loreEN} to "<##7cafbf>Bound Molecules%nl%<##7cafbf>Healing Stream &7heals all allies with%nl%<##7cafbf>Circle of Water &7active by &f%{_molecules}% &7health."
			HealRefresh({_p}, {_molecules})
			if metadata value "DungeonInstance" of {_p} is set:
				DungeonHeal({_p}, loop-entity, {_molecules}, "Bound Molecules")
			if loop-entity is a player:
				if {_molecules} > 0:
					if {language::%loop-entity%} = "English":
						send formatted "%{kartacolor::%{_p}%}%%{_p}% &fhealed you. <tooltip:%{_loreEN}%>(<##baff8c>+%{_molecules}% HP&f)" to loop-entity
					else:
						send formatted "%{kartacolor::%{_p}%}%%{_p}% &fuleczył cię. <tooltip:%{_lore}%>(<##baff8c>+%{_molecules}% HP&f)" to loop-entity
			if {_molecules} > 0:
				add {_molecules} to {healtotal::%{_p}%}
				add {_molecules} to {healcard::%{kartaname::%{_p}%}%::%{_id}%}
				add {_molecules} to {healcard::%{kartaname::%{_p}%}%::%{_id}%::Bound Molecules}
	clear metadata value "CircleOfWater%{_p}%" of {_x}
	#CASCADE
	loop {_loreheart::*}:
		loop-value contains "Cascade":
			add (0.2*{trait::Vaporeon::Cascade::%{_p}%}) to {_cascade}
	if {_cascade} is set:
		remove ("%{_cascade}% seconds" parsed as timespan) from cooldown "Explosive Bubble%{_p}%-%uuid of {_x}%"
	if tag "Talents;Row 3" of nbt of {karta::%{_p}%} = "Overflow":
		set {_healcircle} to {_healcircle}*{_mastery}
	else:
		if health of {_x} < (0.5*max health of {_x}):
			set {_healcircle} to {_healcircle}*{_mastery}
	if metadata value "Undercurrent" of {_p} > 0:
		set {_undercurrent} to metadata value "Undercurrent" of {_p}
		set {_healcircle} to {_healcircle}*(1 + 0.08*{_undercurrent})
	chance of {_crit}%:
		if tag "Talents;Row 1" of nbt of {karta::%{_p}%} = "Flow of the Tides":
			set {_healcircle} to {_healcircle}*3.3
		else:
			set {_healcircle} to {_healcircle}*2
		if tag "Talents;Row 4" of nbt of {karta::%{_p}%} = "Searage":
			chance of 30%:
				CircleOfWaterApply({_p}, {_x}, "Searage")
				play sound "ambient.underwater.exit" with volume 2.5 and pitch 2 at {_x}

	set {_lore} to "&8Passive Ability%nl%&fInstant cast%nl%&7Cooldown: &fnone%nl%&7Use: &fPassive%nl%<##7cafbf>Healing surrounds your target with a%nl%<##8bbdf0>Circle of Water<##7cafbf>. <##7cafbf>Using <##8bbdf0>Healing Stream <##7cafbf>on%nl%<##7cafbf>an ally affected by <##8bbdf0>Circle of Water <##7cafbf>will%nl%<##7cafbf>detonate the circle, healing its target%nl%<##7cafbf>by an additional &f%{_healcircle}% <##7cafbf>HP." 
	Heal({_p}, {_x}, {_healcircle}, "Circle of Water", "<##7cafbf>", {_lore})
	play sound "entity.player.splash.high_speed" with volume 3 and pitch 1 at {_x}
	draw 3 of heart particle at location 0.5 above {_x} with offset vector(0.6, 0.9, 0.6)
	if tag "Talents;Row 4" of nbt of {karta::%{_p}%} = "Searage":
		loop LoopEntitiesAroundTarget({_x}, 6, false):
			set loop-entity's last damage cause to sweep attack
			set metadata value "LastDamageCause" of loop-entity to "<##7cafbf>Circle of Water"
			set metadata value "LastDamageCauseLore" of loop-entity to {_lore}
			set metadata value "Element" of {_p} to "Water"
			make {_p} damage loop-entity by 2*({_healcircle})
			draw 15 of bubble pop particle at location 1 above loop-entity with offset vector(0.6, 0.45, 0.6) with extra 0.03

	

function Heal(p: player, x: entity, heal: number, spell: text, col: text, lore: text, sendMessage: boolean = true):
	if {_x} is alive:
		set {_id} to line 19 of lore of {karta::%{_p}%}
		replace all "&8Id: " in {_id} with ""
		Overhealing({_p}, {_x}, {_heal}, {_spell})
		if {_heal} > ((max health of {_x}) - (health of {_x})):
			healAboveMaxHealth({_p}, {_x}, ((max health of {_x}) - (health of {_x})-{_heal}))
			set {_heal} to ((max health of {_x}) - (health of {_x}))
			if {_heal} < 0:
				set {_heal} to 0
		heal {_x} by {_heal}
		HealAssist({_p}, {_x})
		HealRefresh({_p}, {_heal})
		if metadata value "DungeonInstance" of {_p} is set:
			DungeonHeal({_p}, {_x}, {_heal}, "%{_spell}%")
		if {_heal} > 0:
			onHealEvents({_p}, {_x})
			if {_x} is a player:
				if {_sendMessage} != false:
					send formatted "%{kartacolor::%{_p}%}%%{_p}% &fhealed you. <tooltip:%{_col}%%{_spell}%%nl%%{_lore}%>(<##baff8c>+%{_heal}% HP&f)" to {_x}
					if {_p} != {_x}:
						send formatted "&fYou healed %{kartacolor::%{_p}%}%%{_x}%&f. <tooltip:%{_col}%%{_spell}%%nl%%{_lore}%>(<##baff8c>+%{_heal}% HP&f)" to {_p}
			add {_heal} to {healtotal::%{_p}%}
			add {_heal} to {healcard::%{kartaname::%{_p}%}%::%{_id}%}
			add {_heal} to {healcard::%{kartaname::%{_p}%}%::%{_id}%::%{_spell}%}
		
function onHealEvents(p: player, e: entity):
	if {kartaname::%{_p}%} = "Vaporeon":
		if tag "Talents;Row 3" of nbt of {karta::%{_p}%} = "Current Control":
			set {_haste} to 1 + (({haste::%{_p}%}/4))/100
			set {_cd} to (20/{_haste})*0.025
			set {_uuid} to uuid of {_e}
			if cooldown "Explosive Bubble%{_p}%-%{_uuid}%" is set:
				remove ("%{_cd}% seconds" parsed as timespan) from cooldown "Explosive Bubble%{_p}%-%{_uuid}%"


function selfHealModifiers(p: entity, heal: number) :: number:
	if {kartaname::%{_p}%} = "Brother Therold":
		if tag "Talents;Row 2" of nbt of {karta::%{_p}%} = "Body and Soul":
			set {_heal} to {_heal}*1.06
	return {_heal}

function healAboveMaxHealth(p: player, x: entity, heal: number):
	if {_heal} < 0:
		set {_heal} to {_heal}*-1
	if {_p} = {_x}:
		if {kartaname::%{_p}%} = "Brother Therold":
			if tag "Talents;Row 2" of nbt of {karta::%{_p}%} = "Mental Fortitude":
				set {_mentalFortitude} to ({_p}'s max health/4.25)-3 + {primarystat::%{_p}%}/8.75
				set {_lore} to "&8Talent%nl%&fInstant cast%nl%&7Cooldown: &fnone%nl%&7Use: &fPassive%nl%<##613e82>Healing from Vampiric Touch when you are at%nl%<##613e82>maximum health will shield you for the same%nl%<##613e82>amount. Shield cannot exceed &f%{_mentalFortitude}% <##613e82>damage%nl%<##613e82>absorbed."
				Shield({_p}, {_x}, {_heal} + 0.00, "Mental Fortitude", "<##613e82>", {_lore}, {_mentalFortitude}, false, true)
				if tag "custom;ShieldsActive" of nbt of {_x} > 0:
					set {_shieldsActive} to tag "custom;ShieldsActive" of nbt of {_x}
					loop {_shieldsActive} times:
						if tag "custom;Shields;%loop-number%;Name" of nbt of {_x} = "Mental Fortitude":
							set {_shieldTotal} to tag "custom;Shields;%loop-number%;Amount" of nbt of {_x}
							stop loop
					buffRegister({_p}, "Mental", 3, "", "Value", " %{_shieldTotal}%", "-")

function Shield(p: player, x: entity, shield: number, spell: text, col: text, lore: text, maxShield: number, sendMessage: boolean, sendActionBar: boolean) :: integer:
	if {_x} is alive:
		HealAssist({_p}, {_x})
		HealRefresh({_p}, 0)
		if {_x} != {_p}:
			if {_x} is a player:
				HealRefresh({_x}, 0)
		
				
		set {_existingShield} to metadata value "ShieldTotal" of {_x}
		set {_shieldsActive} to tag "custom;ShieldsActive" of nbt of {_x}

		loop {_shieldsActive} times:
			if tag "custom;Shields;%loop-number%;Caster" of nbt of {_x} = "%{_p}%":
				if tag "custom;Shields;%loop-number%;Name" of nbt of {_x} = {_spell}:
					set {_shieldAlreadyActive} to true
					set {_amount} to tag "custom;Shields;%{_shieldsActive}%;Amount" of nbt of {_x}
					if {_maxShield} > 0:
						if {_amount} + {_shield} > {_maxShield}:
							set {_shield} to {_maxShield} - {_amount}
					add {_shield} to {_amount}
					add {_shield} to {_existingShield}
					set metadata value "ShieldTotal" of {_x} to {_existingShield}
					set tag "custom;Shields;%{_shieldsActive}%;Amount" of nbt of {_x} to {_amount}
					stop loop

		if {_shieldAlreadyActive} != true:
			add 1 to {_shieldsActive}
			set tag "custom;Shields;%{_shieldsActive}%;Name" of nbt of {_x} to {_spell}
			set tag "custom;Shields;%{_shieldsActive}%;Caster" of nbt of {_x} to "%{_p}%"
			set tag "custom;Shields;%{_shieldsActive}%;Amount" of nbt of {_x} to {_shield}
			set metadata value "ShieldTotal" of {_x} to {_shield}

		set tag "custom;ShieldsActive" of nbt of {_x} to {_shieldsActive}
		if metadata value "ShieldTotal" of {_x} < 0:
			set metadata value "ShieldTotal" of {_x} to 0

		set {_shieldTotal} to metadata value "ShieldTotal" of {_x}

		if {_x} is a player:
			if {_sendMessage} != false:
				send formatted "%{kartacolor::%{_p}%}%%{_p}% &fshielded you. <tooltip:%{_col}%%{_spell}%%nl%%{_lore}%>(<##baff8c>+%{_shield}% Shield&f)" to {_x}
			if {_sendActionBar} != false:
				send action bar "%{kartacolor::%{_p}%}% Shield: &f%{_shieldTotal}%" to {_x}
	return {_shieldsActive}

function shieldFind(p: entity, x: entity, shield: text) :: integer:
	set {_shieldsActive} to tag "custom;ShieldsActive" of nbt of {_x}
	loop {_shieldsActive} times:
		if tag "custom;Shields;%loop-number%;Caster" of nbt of {_x} = "%{_p}%":
			if tag "custom;Shields;%loop-number%;Name" of nbt of {_x} = {_shield}:
				set {_num} to {_shieldsActive}
				stop loop
	return {_num}


function shieldExpire(x: entity, num: integer):
	set {_amount} to tag "custom;Shields;%{_num}%;Amount" of nbt of {_x}
	clear tag "custom;Shields;%{_num}%" of nbt of {_x}
	set {_shieldsActive} to tag "custom;ShieldsActive" of nbt of {_x}
	remove 1 from {_shieldsActive}
	set tag "custom;ShieldsActive" of nbt of {_x} to {_shieldsActive}
	set {_totalShields} to metadata value "ShieldTotal" of {_x}
	remove {_amount} from {_totalShields}
	set metadata value "ShieldTotal" of {_x} to {_totalShields}
	if tag "custom;ShieldsActive" of nbt of {_x} = 0:
		clear tag "custom;Shields" of nbt of {_x}
		clear tag "custom;ShieldsActive" of nbt of {_x}

function shieldsClear(x: entity):
	set {_amount} to tag "custom;ShieldsActive" of nbt of {_x}
	loop {_amount} times:
		clear tag "custom:Shields;%loop-number%;Amount" of nbt of {_x}
		clear tag "custom:Shields;%loop-number%;Name" of nbt of {_x}
		clear tag "custom:Shields;%loop-number%;Caster" of nbt of {_x}
		clear tag "custom:Shields;%loop-number%" of nbt of {_x}
	clear tag "custom:Shields" of nbt of {_x}
	clear tag "custom;ShieldsActive" of nbt of {_x}
	clear metadata value "ShieldTotal" of {_x}

function shieldDamageEvent(x: entity, dmg: number) :: number:
	set {_shieldsActive} to tag "custom;ShieldsActive" of nbt of {_x}
	set {_num} to 1
	while {_oldestShield} is not set:
		if tag "custom;Shields;%{_num}%" of nbt of {_x} is set:
			set {_oldestShield} to {_num}
			set {_shieldCaster} to (tag "custom;Shields;%{_num}%;Caster" of nbt of {_x}) parsed as player
			set {_shieldAmount} to (tag "custom;Shields;%{_num}%;Amount" of nbt of {_x})
			set {_shieldName} to (tag "custom;Shields;%{_num}%;Name" of nbt of {_x})
		add 1 to {_num}
	set {_id} to line 19 of lore of {karta::%{_shieldCaster}%}
	replace all "&8Id: " in {_id} with ""
	if ({_shieldAmount}-{_dmg}) > 0:
		set {_shieldTotal} to metadata value "ShieldTotal" of {_x}
		set {_shieldTotal} to {_shieldTotal} - {_dmg}
		set metadata value "ShieldTotal" of {_x} to {_shieldTotal}
		add ({_dmg}) to {healtotal::%{_shieldCaster}%}
		add ({_dmg}) to {healcard::%{kartaname::%{_shieldCaster}%}%::%{_id}%}
		add ({_dmg}) to {healcard::%{kartaname::%{_shieldCaster}%}%::%{_id}%::%{_shieldName}%}
		add ({_dmg}) to {shieldtotal::%{_shieldCaster}%}
		add ({_dmg}) to {shieldcard::%{kartaname::%{_shieldCaster}%}%::%{_id}%}
		add ({_dmg}) to {shieldcard::%{kartaname::%{_shieldCaster}%}%::%{_id}%::%{_shieldName}%}
		HealAssist({_shieldCaster}, {_x})
		HealRefresh({_shieldCaster}, {_dmg})
		remove {_dmg} from {_shieldAmount}
		set tag "custom;Shields;%{_oldestShield}%;Amount" of nbt of {_x} to {_shieldAmount}
		if metadata value "DungeonInstance" of {_x} is set:
			DungeonShield({_shieldCaster}, {_x}, {_dmg}, {_shieldName})
		set {_dmg} to 0
	else:
		set {_dmg} to {_dmg}-{_shieldAmount}
		add ({_shieldAmount}) to {healtotal::%{_shieldCaster}%}
		add ({_shieldAmount}) to {healcard::%{kartaname::%{_shieldCaster}%}%::%{_id}%}
		add ({_shieldAmount}) to {healcard::%{kartaname::%{_shieldCaster}%}%::%{_id}%::%{_shieldName}%}
		add ({_shieldAmount}) to {shieldtotal::%{_shieldCaster}%}
		add ({_shieldAmount}) to {shieldcard::%{kartaname::%{_shieldCaster}%}%::%{_id}%}
		add ({_shieldAmount}) to {shieldcard::%{kartaname::%{_shieldCaster}%}%::%{_id}%::%{_shieldName}%}
		HealAssist({_shieldCaster}, {_x})
		HealRefresh({_shieldCaster}, {_shieldAmount})
		if metadata value "DungeonInstance" of {_x} is set:
			DungeonShield({_shieldCaster}, {_x}, {_shieldAmount}, {_shieldName})
		set metadata value "ShieldTotal" of {_x} to 0
		shieldExpire({_x}, {_oldestShield})
	if metadata value "ShieldTotal" of {_x} > 0:
		set {_shield} to metadata value "ShieldTotal" of {_x}
		send action bar "%{kartacolor::%{_x}%}% SHIELD: &f%{_shield}%" to {_x}
		play sound "item.shield.block" with volume 3 and pitch 0.5 to {_x}
	else:
		send action bar "%{kartacolor::%{_x}%}% &fSHIELD BROKEN" to {_x}
		play sound "item.shield.break" with volume 3 and pitch 1 to {_x}
	if {_dmg} is not set:
		set {_dmg} to 0
	return {_dmg}

function explosiveBubbleParticles(e: entity, wait: timespan):
	set {_uuid} to uuid of {_e}
	while {tarczavaporeon::%{_uuid}%} is true:
		set {_shape} to a sphere with radius 2
		set particle of {_shape} to bubble
		draw {_shape} at {_e}
		set {_shape} to a sphere with radius 2
		set particle of {_shape} to splash
		draw {_shape} at {_e}
		wait 1 seconds
	set {_shape} to a sphere with radius 2
	set particle of {_shape} to cloud particle
	draw {_shape} at {_e}

function TargetHealingStream(p: player, length: number, passThrough: boolean) :: entity:
	set {_x} to 0
	set {_l} to 0
	loop {_length} times:
		add 1 to {_x}
		add 0.25 to {_l}
		set {_rg%{_x}%} to location {_l} meters infront of {_p}
		set {_rg%{_x}%} to location 1.25 meters above {_rg%{_x}%}
	set {_x} to 0
	loop {_length} times:
		add 1 to {_x}
		loop entities in radius 1 around {_rg%{_x}%}:
			if loop-entity is not {_p}:
				if loop-entity is not an armor stand:
					if loop-entity is a living entity:
						if loop-entity is not an arrow:
							if loop-entity is alive:
								if tag "custom;ECMob" of nbt of loop-entity is not set:
									set {_entity} to loop-entity
									return {_entity}
									stop
								else:
									if tag "Talents;Row 5" of nbt of {karta::%{_p}%} = "Tidebringer":
										set {_entity} to loop-entity
										return {_entity}
										stop
		if {_entity} is not set:
			set {_entity} to {_p}

	return {_entity}

function coalescingTides(p: player, x: entity, radius: number, heal: number, lore: string, type: string):
	set {_heal} to {_heal}*0.3
	if {_type} = "heal":
		set {_allies::*} to loopAlliesAroundTarget({_x}, {_radius}, false)
		if size of {_allies::*} > 0:
			loop {_allies::*}:
				draw 15 of rain particle at location above loop-value with offset vector(0.5, 0.5, 0.5) with extra 0.03
				Heal({_p}, loop-value, {_heal}*0.3, "Healing Stream", "<##7cafbf>", {_lore})
				CircleOfWaterApply({_p}, loop-value, "Healing Stream")
		else:
			draw 15 of rain particle at location above {_x} with offset vector(0.5, 0.5, 0.5) with extra 0.03
			Heal({_p}, {_x}, {_heal}*0.3, "Healing Stream", "<##7cafbf>", {_lore})
			CircleOfWaterApply({_p}, {_x}, "Healing Stream")
	else:
		set {_enemies::*} to LoopEntitiesAroundTarget({_x}, {_radius}, false)
		wait 1 tick
		if size of {_enemies::*} > 0:
			loop {_enemies::*}:
				if loop-value is alive:
					draw 15 of rain particle at location above loop-value with offset vector(0.5, 0.5, 0.5) with extra 0.03
					set loop-value's last damage cause to sweep attack
					set metadata value "LastDamageCause" of loop-value to "<##7cafbf>Healing Stream"
					set metadata value "LastDamageCauseLore" of loop-value to {_lore}
					set metadata value "Element" of {_p} to "Water"
					make {_p} damage loop-value by {_heal}*2
		else:
			if {_x} is alive:
				draw 15 of rain particle at location above {_x} with offset vector(0.5, 0.5, 0.5) with extra 0.03
				set {_x}'s last damage cause to sweep attack
				set metadata value "LastDamageCause" of {_x} to "<##7cafbf>Healing Stream"
				set metadata value "LastDamageCauseLore" of {_x} to {_lore}
				set metadata value "Element" of {_p} to "Water"
				make {_p} damage {_x} by {_heal}*2
#KONCEPT PASYWKI (LECZENIE PO TARCZY)
#HEALING WATERS
#if {tarcza::%{_uuid}%} > 0:
#	if {_i} is alive:
#		set {_heal} to {tarcza::%{_uuid}%}*0.1
#		#MASTERY
#		if health of {_i} < (0.5*max health of {_i}):
#			set {_heal} to {_heal}*1.1
#		draw 15 of dust_color_transition using dustTransition(lime, lime, 1) at location of {_i} with offset vector(0.6, 0.9, 0.6)
#function FirstClickHS(p: player):
#	wait 3 seconds
#	clear {fsclck::%{_p}%} 

#loop round(distance between {_l} and {_x}) / 0.1 times:
#	set {_v} to vector between {_l} and {_x}'s head
#	set vector length of {_v} to loop-value * 0.1
#	drawDot count 6, particle "redstone", RGB 47, 147, 235, center {_l} ~ {_v}, rainbowMode false, visibleRange 32, pulseDelay 0, keepFor 5 ticks
#	#drawDot count 1, particle "redstone", RGB 150, 206, 255, center {_l} ~ {_v}, rainbowMode false, visibleRange 32, pulseDelay 0, keepFor 5 ticks
#	drawDot count 1, particle "redstone", RGB 47, 69, 235, center {_l} ~ {_v}, rainbowMode false, visibleRange 32, pulseDelay 0, keepFor 5 ticks
#	wait 1 tick
#heal {_x} by 2

#Katara (możemy pobrać wodę ze źródła, orbituje dopóki nie wystrzelimy)
#function HealingOrbit(p: player):
#	set {_y} to 0
#	loop 45 times:
#		set {_x} to {_p}'s location
#		increase {_x}'s y-coordinate by 1
#		set {_v} to vector 1, 0, 1
#		rotate {_v} around y-axis by {_y}
#		add 8 to {_y}
#		draw 1 of dust using dustOption(blue, 1) at {_x} ~ {_v}
#		wait 1 tick	

#button hold	
#on rightclick:
#	if name of player's tool = "Healing Stream":
#		set {_x} to target of player
#		if {mob::%{_x}%} is not true:
#			if {fsclck::%player%} is not set:
#				play sound "block.water.ambient" with volume 5 and pitch 1 at player
#				set {fsclck::%player%} to true
#				FirstClickHS(player)
#			if {healingstreamcount::%player%} is not set:
#				set {healingstreamcount::%player%} to 50
#			if {healingstreamcount::%player%} > 0:
#				loop blocks between player and {_x}:
#					drawDot count 1, particle "redstone", RGB 47, 69, 235, center location of loop-block, rainbowMode false, visibleRange 32, pulseDelay 0, keepFor 5 ticks
#					wait 1 tick
#				heal {_x} by 0.1
#				remove 1 from {healingstreamcount::%player%}
#				if {healingstreamcount::%player%} = 0:
#					clear {healingstreamcount::%player%}
#					broadcast "done"
			#loop round(distance between {_l} and {_x}) / 0.1 times:
			#	set {_v} to vector between {_l} and {_x}'s head
			#	set vector length of {_v} to loop-value * 0.1
			#	drawDot count 6, particle "redstone", RGB 47, 147, 235, center {_l} ~ {_v}, rainbowMode false, visibleRange 32, pulseDelay 0, keepFor 5 ticks
			#	#drawDot count 1, particle "redstone", RGB 150, 206, 255, center {_l} ~ {_v}, rainbowMode false, visibleRange 32, pulseDelay 0, keepFor 5 ticks
			#	drawDot count 1, particle "redstone", RGB 47, 69, 235, center {_l} ~ {_v}, rainbowMode false, visibleRange 32, pulseDelay 0, keepFor 5 ticks
			#	wait 1 tick
			#heal {_x} by 2
			
#first version
#on rightclick:
#	if name of player's tool = "Healing Stream":
#		set {_x} to target of player
#		if {mob::%{_x}%} is not true:
#			set {_cd} to "%8/{_pospiech}% seconds" parsed as timespan
#			if cooldown "Healing Stream%player%" is finished:
#				set {_id} to line 19 of lore of {karta::%player%}
#				set {_pospiech} to 1 + (({haste::%player%}/4) + ({pospiech::%{_id}%}/4))/100
#				set {_cd} to "%6/{_pospiech}% seconds" parsed as timespan
#				set the cooldown of player's held item for player to {_cd}
#				create cooldown "Healing Stream%player%" for {_cd}
#				play sound "block.water.ambient" with volume 5 and pitch 1 at player
#				loop blocks between player and {_x}:
#					drawDot count 1, particle "redstone", RGB 47, 69, 235, center location of loop-block, rainbowMode false, visibleRange 32, pulseDelay 0, keepFor 5 ticks
#					wait 1 tick
#				if {_x} is alive:
#					set {_heal} to 2
#					chance of {_crit}%:
#						set {_heal} to {_heal}*2
#					heal {_x} by {_heal}
#					#heal sound effect/particle
#					draw 15 of dust_color_transition using dustTransition(lime, lime, 2) at location of {_x} with offset vector(0.6, 0.9, 0.6)
#			else: 
#				cancel event
#				if {tekstcd::%player%} = true:
#					set {_cdd} to cooldown "Healing Stream%player%"
#					if {language::%player%} = "English":
#						send "<##7cafbf>You must wait &f%{_cdd}%<##7cafbf> to use this ability." to player
#					else:
#						send "<##7cafbf>Musisz odczekać &f%{_cdd}%<##7cafbf>, aby użyć tej umiejętności." to player
#				stop
				
						
#FALA					
#set {_length} to distance between player and {_target}
#loop {_length}*5 times:   #loops as many times as long as the length from the function input
#	add 1 to {_x}
#	add 0.25 to {_l}
#	set {_rg%{_x}%} to location {_l} meters infront of player
#	set {_rg%{_x}%} to location 1.25 meters above {_rg%{_x}%} #aligns with where player is looking better
#set {_x} to 0
#loop {_length}*5 times:
#	add 1 to {_x}
#	create a wave effect at {_rg%{_x}%} with id "wave"
#	wait 1 tick
#	stop effect "wave"