variables:
	{astralpower::%player%} = 50

function ShootingStars(p: player):
	wait 1 tick
	while metadata value "ECEngaged" of {_p} is set:
		if {_p} is alive:
			set {_chance} to 8
			if boolean tag "Constellation;Stellar Command" of custom nbt of {karta::%{_p}%} is set:
				add 2 to {_chance}
			if metadata value "CelestialAlignment" of {_p} is set:
				set {_chance} to {_chance}*2
			if metadata value "Solstice" of {_p} is set:
				set {_chance} to {_chance}*3
			chance of {_chance}%:
				ShootingStar({_p})
		stop loop if metadata value "ECEngaged" of {_p} is not set
		set {_haste} to Haste({_p})
		set {_wait} to "%1/{_haste}% seconds" parsed as timespan
		wait {_wait}

function ShootingStar(p: player):
	set {_id} to line 19 of lore of {karta::%{_p}%}
	set {_loops} to 1
	set {_astralInvocationChance} to 10
	set {_damage} to (0.6 + (({damage::%{_p}%}/61) + ({versatility::%{_p}%}/183) + {primarystat::%{_p}%}/30.5)) * (1 + (({mastery::%{_p}%}/2.7)/100))
	if string tag "Talents;Row 2" of nbt of {karta::%{_p}%} = "Crashing Star":
		chance of 15%:
			set {_damage} to (1.8 + (({damage::%{_p}%}/41) + ({versatility::%{_p}%}/123) + {primarystat::%{_p}%}/20.5)) * (1 + (({mastery::%{_p}%}/2.7)/100))
			set {_crashingStar} to true
			set {_astralInvocationChance} to 20
	set {_crit} to 0 + ({criticalhit::%{_p}%}/10)
	if metadata value "CelestialAlignment" of {_p} is set:
		add 15 to {_crit}
	set {_haste} to Haste({_p})
	if metadata value "CelestialAlignment" of {_p} is set:
		set {_damage} to {_damage}*1.15
		set {_damage} to {_damage}*1.6
	if string tag "Talents;Row 3" of nbt of {karta::%{_p}%} = "Whirling Stars":
		set {_astralpower} to 3
		set {_damage} to {_damage}*1.09
	else:
		set {_astralpower} to 2
	if string tag "Talents;Row 4" of nbt of {karta::%{_p}%} = "Stellar Collision":
		set {_damage} to {_damage}*1.15
		chance of 20%:
			set {_loops} to 2
	if {_crashingStar} is true:
		set {_astralpower} to {_astralpower}*2

	loop all living entities in radius 30 around {_p}:
		if boolean tag "ECMob" of custom nbt of loop-entity is set:
			if metadata value "RecentlyDamagedCresselia%{_p}%" of loop-entity is set:
				add loop-entity to {_enti::*}
	
	if size of {_enti::*} > 0:
		set {_target} to a random element of {_enti::*}
		if metadata value "Stellar Command%{_p}%" of {_target} is set:
			set {_damage} to {_damage}*1.3
		if {_crashingStar} is true:
			set {_starSpeed} to 0.2*{_haste}
			set {_damageCause} to "<##6a5e9e>Crashing Star"
			set {_shootingStar} to ShootingStarSpawn({_target}, true)
			set {_pitch} to 0.25
			set {_bonusY} to 1.8
			set {_lore} to "&8Passive Ability%nl%&fInstant cast%nl%&7Cooldown: &fnone%nl%&7Use: &fPassive%nl%<##6a5e9e>Shooting Stars have a &f15%% &7chance to instead call%nl%&7down a <##6a5e9e>Crashing Star&7, causing &f%{_damage}% <##a99afc>Astral &7damage%nl%&7to the target and generating &fdouble Astral Power&7.%nl%<##6a5e9e>Crashing Stars &7have &fdouble &7the chance of granting%nl%&7you <##cab8e3>Astral Invocation&7."
			play sound "entity.ender_dragon.shoot" with volume 4 and pitch 0 at location of {_target}
		else:
			set {_starSpeed} to 0.45*{_haste}
			set {_damageCause} to "<##6a5e9e>Shooting Stars"
			set {_shootingStar} to ShootingStarSpawn({_target})
			set {_pitch} to 1.5
			set {_bonusY} to 0.9
			set {_lore} to {_loreShootingStars}
			play sound "entity.firework_rocket.launch" with volume 4 and pitch 0 at location of {_target}

		set {_loreShootingStars} to "&8Mastery Bonus%nl%&fNo cast%nl%&7Cooldown: &8 &fnone%nl%&7Use: &fPASSIVE%nl%<##6a5e9e>Every <##b9aeeb>second<##6a5e9e>, you have a &f%{_chance}%%% <##b9aeeb>chance <##6a5e9e>to call%nl%<##6a5e9e>down a &f <##b9aeeb>Shooting Star<##6a5e9e>, dealing &f%{_damage}% <##a99afc>Astral <##6a5e9e>damage%nl%<##6a5e9e>to the enemy and generating &f %{_astralpower}% <##b9aeeb>Astral Power<##6a5e9e>.%nl% %nl%<##6a5e9e>This effect can only trigger when you have%nl%<##b9aeeb>attacked a target <##6a5e9e>through a different damage%nl%<##6a5e9e>source than &f <##b9aeeb>Shooting Stars <##6a5e9e>in the last &f20 sec<##6a5e9e>."
		LoreUpdate({_p}, "Shooting Stars", {_loreShootingStars})

		set {_y} to 0
		set {_locStar} to location of {_shootingStar}
		set {_count} to 0
		while {_shootingStar} is alive:
			set {_targetLoc} to location 0.5 below {_target}
			set {_vec} to vector between {_locStar} and {_targetLoc}
			set {_loc} to location of {_shootingStar}
			add {_bonusY} to y-location of {_loc}
			if {_crashingStar} is true:
				draw 1 firework particle at {_loc}
			draw 1 of dust using dustOption((rgb 168, 134, 240), 1) at {_loc}
			set vector length of {_vec} to {_count} * {_starSpeed}
			teleport {_shootingStar} to {_locStar} ~ {_vec}
			add nbt from "{Rotation:[%{_y}%.0f,%{_y}%.0f]}" to nbt of {_shootingStar}
			stop loop if distance between {_shootingStar} and {_target} < 1
			wait 1 tick
			add 1 to {_count}
			add 10 to {_y}
		kill {_shootingStar}
		
		play sound "skill.cresselia.shootingstarhit" with volume 2 and pitch {_pitch} at location of {_target}
		play sound "entity.player.hurt" with volume 1.5 and pitch 1 at location of {_target}

		if {_crashingStar} = true:
			draw 25 firework particle at location above {_target} with offset vector(1.25, 0.5, 1.25) with extra 0.015
		
		loop {_loops} times:
			set {_shootingStarsDamage} to {_damage}
			set {_target}'s last damage cause to sweep attack
			set metadata value "Element" of {_target} to "Astral"
			set metadata value "LastDamageCause" of {_target} to {_damageCause}
			set metadata value "LastDamageCauseLore" of {_target} to {_lore}
			chance of {_crit}%:
				set {_shootingStarsDamage} to {_shootingStarsDamage}*2
			make {_p} damage {_target} by {_shootingStarsDamage}*2
			chance of {_astralInvocationChance}%:
				AstralInvocation({_p})
			if string tag "Talents;Row 2" of nbt of {karta::%{_p}%} = "Astral Communion":
				set {_astralPowerCap} to 120
			else:
				set {_astralPowerCap} to 100
			if {astralpower::%{_p}%} + {_astralpower} <= {_astralPowerCap}:
				add 2 to {astralpower::%{_p}%}
			else:
				set {astralpower::%{_p}%} to {_astralPowerCap}
			AstralPowerUpdate({_p})
			if string tag "Talents;Row 5" of nbt of {karta::%{_p}%} = "Orbit Breaker":
				set {_orbitBreaker} to metadata value "OrbitBreaker" of {_p}
				add 1 to {_orbitBreaker}
				if {_orbitBreaker} >= 30:
					set {_orbitBreaker} to 0
					FullMoon({_p}, {_target})
				set metadata value "OrbitBreaker" of {_p} to {_orbitBreaker}
			wait 1 tick
		clear {_enti::*}
		
function ShootingStarSpawn(target: entity, crashingStar: boolean = false) :: entity:
	set {_randomYcoordinate} to a random number between 8 and 35
	set {_l} to location of block {_randomYcoordinate} blocks above {_target}
	spawn an armor stand at {_l} with nbt from "{Invulnerable:1b,NoGravity:1b,Pose:{Head:[180.0f,0.0f,0.0f]}}"
	if {_crashingStar} = true:
		set name of last spawned armor stand to "CrashingStar"
	else:
		set name of last spawned armor stand to "ShootingStars"
	set {_shootingStar} to last spawned armor stand
	ShootingStarKill({_shootingStar})
	return {_shootingStar}

function ShootingStarKill(e: entity):
	wait 20 seconds
	#kill on server stop
	kill {_e}

function AstralPower(p: player):
	wait 1 tick
	set {_pospiech} to Haste({_p})
	set {_wait} to "%3/{_pospiech}% seconds" parsed as timespan
	set {_astralPowerCap} to 100
	if string tag "Talents;Row 2" of nbt of {karta::%{_p}%} = "Astral Communion":
		set {_astralPowerCap} to 120
	while metadata value "ECEngaged" of {_p} is set:
		if {_p} is alive:
			set {_astralpower} to 2
			if {astralpower::%{_p}%} + {_astralpower} <= {_astralPowerCap}:
				add 2 to {astralpower::%{_p}%}
			else:
				set {astralpower::%{_p}%} to {_astralPowerCap}
			AstralPowerUpdate({_p})
		stop loop if metadata value "ECEngaged" of {_p} is not set
		wait {_wait}

function AstralPowerUpdate(p: player):
	if metadata value "casting" of {_p} is not set:
		set {_message} to "&f <##6a5e9e>%rounded down {astralpower::%{_p}%}%"
		if metadata value "CelestialAlignment" of {_p} is set:
			set {_remainingCADuration} to durationShort("%metadata value "CelestialAlignment" of {_p}%")
			set {_message} to "%{_message}% &f|  <##6a5e9e>CA: &f%{_remainingCADuration}%"
		send action bar {_message} to {_p}

on rightclick:
	if player's tool is magenta dye:
		if boolean tag "Starsurge" of custom nbt of player's tool is set:
			if {kartaname::%player%} = "Cresselia":
				set {_target} to Target(player, 100, false)
				if {_target} is set:
					if CanUseAbility(player) != false:
						if metadata value "casting" of player is not set:
							if cooldown "StarsurgeDoublecast%player%" is finished:
								create cooldown "StarsurgeDoublecast%player%" for 1 tick
								
								set {_astralPowerCost} to 30
								if string tag "Talents;Row 2" of custom nbt of {karta::%player%} = "Astral Communion":
									if metadata value "CelestialAlignment" of player is set:
										set {_astralPowerCost} to 20

								set {_damage} to 5.5 + ({damage::%player%}/12) + ({versatility::%player%}/36) + ({primarystat::%player%}/6)

								if boolean tag "Constellation;Rattle the Stars" of custom nbt of {karta::%player%} is set:
									set {_astralPowerCost} to {_astralPowerCost}*0.9
									set {_damage} to {_damage}*1.08
									
								if {astralpower::%player%} >= {_astralPowerCost}:
									set {astralpower::%player%} to {astralpower::%player%} - {_astralPowerCost}
									AstralPowerUpdate(player)
									AbilityUse(player, "Starsurge")
									play sound "skill.cresselia.starsurgecast" with volume 4 and pitch 1 at player
									set {_crit} to 0 + ({criticalhit::%player%}/10)
									if metadata value "CelestialAlignment" of player is set:
										set {_damage} to {_damage}*1.15
										add 15 to {_crit}
									if metadata value "UmbralInspiration" of player is set:
										set {_damage} to {_damage}*1.3

									if boolean tag "Constellation;Starlord" of custom nbt of {karta::%player%} is set:
										Starlord(player)

									if string tag "Talents;Row 3" of custom nbt of {karta::%player%} = "Aetherial Kindling":
										if metadata value "CelestialAlignment" of player is set:
											if metadata value "AetherialKindlingExtension" of player is not set:
												set metadata value "AetherialKindlingExtension" of player to 0
											if metadata value "AetherialKindlingExtension" of player < 27:
												add 3 to metadata value "AetherialKindlingExtension" of player
												add 3 seconds to metadata value "CelestialAlignment" of player

									set {_particleLoc} to location 1.758 above {_p}
									set {_shape} to a line from {_particleLoc} to location 1 above {_target}

									if string tag "Variant" of custom nbt of {karta::%player%} = "Winter Delight":
										set {_particleList::*} to cyan concrete powder, blue concrete powder and lime concrete powder
									else:
										set {_particleList::*} to magenta concrete powder and purple concrete powder

									loop {_particleList::*}:
										set particle of {_shape} to item particle using loop-value
										draw {_shape} at {_particleLoc}
									CresseliaStarsurgeVisual(player, {_target})

									set {_starsurgeBonusMax} to 2
									if boolean tag "Constellation;Stellar Amplification" of custom nbt of {karta::%player%} is set:
										set {_starsurgeBonusMax} to 4

									if metadata value "StarsurgeStacks%player%" of {_target} is not set:
										set metadata value "StarsurgeStacks%player%" of {_target} to 0

									if metadata value "StarsurgeStacks%player%" of {_target} < {_starsurgeBonusMax}:
										add 1 to metadata value "StarsurgeStacks%player%" of {_target}

									set metadata value "StarsurgeTime%player%" of {_target} to 12 seconds
									if metadata value "StarsurgeBonus%player%" of {_target} is not set:
										set metadata value "StarsurgeBonus%player%" of {_target} to true
										StarsurgeBonus(player, {_target})
								
									if boolean tag "Constellation;Stellar Command" of custom nbt of {karta::%player%} is set:
										StellarCommand(player, {_target})
										
									set {_starsurgeBonus} to 1+(0.15*{_starsurgeStacks})
									set {_damage} to {_damage}*{_starsurgeBonus}

									chance of {_crit}%:
										set {_damage} to {_damage}*2
									
									set {_target}'s last damage cause to sweep attack
									set metadata value "Element" of player to "Astral"
									set {_lore} to "&8Basic Ability%nl%&fInstant cast%nl%&7Cooldown: &8 &fnone%nl%&7Use: &fRMB%nl%&7Cost: &f 30 Astral Power%nl%<##6a5e9e>Launches a surge of stellar energies at the%nl%<##6a5e9e>target, dealing &f%{_damage}% <##a99afc>Astral <##6a5e9e>damage and empowering%nl%<##b9aeeb>subsequent <##6a5e9e>uses of &f <##b9aeeb>Starsurge <##6a5e9e>within &f12 sec%nl%<##6a5e9e>on the target by &f15%%<##6a5e9e>.%nl% %nl%<##6a5e9e>This effect stacks up to &f2 <##6a5e9e>times."
									set metadata value "LastDamageCause" of {_target} to "<##6a5e9e>Starsurge"
									set metadata value "LastDamageCauseLore" of {_target} to {_lore}
									play sound "skill.cresselia.starsurgeimpact" with volume 4 and pitch 1 at location of {_target}
									make player damage {_target} by {_damage}*2

									CresseliaRecentlyDamaged(player, {_target})
							else:
								if {tekstcd::%player%} = true:
									send action bar "<##6a5e9e>You must have at least %{_astralPowerCost}% Astral Power to use this ability." to player
									play sound "entity.villager.no" with volume 3 and pitch 1 to player

			else:
				send "&8[&6Earthcraft&8] &6You don't have the required card selected to use this ability." to player
				play sound "block.glass.break" with volume 3 and pitch 0 to player

	else if player's tool is purple dye:
		if boolean tag "Starfall" of custom nbt of player's tool is set:
			if {kartaname::%player%} = "Cresselia":
				if CanUseAbility(player) != false:
					if metadata value "casting" of player is not set:
						if cooldown "StarfallDoublecast%player%" is finished:
							create cooldown "StarfallDoublecast%player%" for 1 tick

							set {_astralPowerCost} to 50
							if string tag "Talents;Row 2" of custom nbt of {karta::%player%} = "Astral Communion":
								if metadata value "CelestialAlignment" of player is set:
									set {_astralPowerCost} to 40

							if boolean tag "Constellation;Rattle the Stars" of custom nbt of {karta::%player%} is set:
								set {_astralPowerCost} to {_astralPowerCost}*0.9

							if {astralpower::%player%} >= {_astralPowerCost}:
								set {astralpower::%player%} to {astralpower::%player%} - {_astralPowerCost}
								AstralPowerUpdate(player)
								AbilityUse(player, "Starfall")
								play sound "skill.cresselia.starfall" with volume 5 and pitch 1 at player
								set {_starfallDuration} to 8 seconds
								if string tag "Talents;Row 4" of custom nbt of {karta::%player%} = "Hail of Stars":
									set {_pospiech} to Haste(player, 3.6)
									add 3 seconds to {_starfallDuration}
								else:
									set {_pospiech} to Haste(player)
								if boolean tag "Constellation;Stellar Amplification" of custom nbt of {karta::%player%} is set:
									add 3 seconds to {_starfallDuration}
								set {_wait} to "%1/{_pospiech}% seconds" parsed as timespan

								if string tag "Talents;Row 3" of custom nbt of {karta::%player%} = "Aetherial Kindling":
									if metadata value "CelestialAlignment" of player is set:
										if metadata value "AetherialKindlingExtension" of player is not set:
											set metadata value "AetherialKindlingExtension" of player to 0
										if metadata value "AetherialKindlingExtension" of player < 27:
											add 3 to metadata value "AetherialKindlingExtension" of player
											add 3 seconds to metadata value "CelestialAlignment" of player

								loop all living entities in radius 60 around the player:
									if loop-entity is not a player:
										if boolean tag "ECMob" of custom nbt of loop-entity is set:
											add loop-entity to {_enemies::*}
								if {_enemies::*} is set:
									set {_duration} to now
									wait 1 tick
									StellarDrift(player, {_starfallDuration})
									while (difference between {_duration} and now) < {_starfallDuration}:
										#15.08.2024 -> Maybe increase the amount of stars falling based on amount enemies in the list?
										#starfall would scale with the amount of enemies dynamically
										set {_randomEnemy} to a random element of {_enemies::*}
										set {_randomIncrease} to a random number between 8 and 35
										set {_loc} to location of {_randomEnemy}
										set y-coordinate of {_loc} to (y-coordinate of {_randomEnemy} + {_randomIncrease})

										spawn an armor stand at {_loc} with nbt from "{Invisible:1b,Invulnerable:1b,NoGravity:1b,Pose:{Head:[180.0f,0.0f,0.0f]}}"
										set {_starfallStar} to last spawned armor stand
										set helmet of {_starfallStar} to stick named "StarfallModel"
										StarfallStarKill({_starfallStar})
										StarfallStarTravel(player, {_starfallStar}, {_randomEnemy}, {_starfallDuration}, {_pospiech})

										spawn an armor stand at location 0.5 above {_loc} with nbt from "{Invulnerable:1b,NoGravity:1b}"
										set {_starfallParticle} to last spawned armor stand
										set name of {_starfallParticle} to "StarfallAnim"
										StarfallStarTravel(player, {_starfallParticle}, {_randomEnemy}, {_starfallDuration}, {_pospiech}, true)
										StarfallStarKill({_starfallParticle})

										wait {_wait}
										stop loop if (difference between {_duration} and now) >= {_starfallDuration}
										#WSZYSCY LOSOWO
							else:
								if {tekstcd::%player%} = true:
									send action bar "<##6a5e9e>You must have at least %{_astralPowerCost}% Astral Power to use this ability." to player
									play sound "entity.villager.no" with volume 3 and pitch 1 to player
			else:
				send "&8[&6Earthcraft&8] &6You don't have the required card selected to use this ability." to player
				play sound "block.glass.break" with volume 3 and pitch 0 to player

	else if player's tool = white dye:
		if boolean tag "Starfire" of custom nbt of player's tool is set:
			if {kartaname::%player%} = "Cresselia":
				set {_target} to Target(player, 100, false)
				if {_target} is set:
					if CanUseAbility(player) != false:
						if metadata value "AstralInvocation" of player is not set:
							if cooldown "Global Cooldown Interrupted Cast%player%" is finished:
								set {_pospiech} to Haste(player)
								set {_baseCastTime} to 2.25
								if boolean tag "Constellation;The Eternal Moon" of custom nbt of {karta::%player%} is set:
									if metadata value "CelestialAlignment" of player is set:
										set {_baseCastTime} to {_baseCastTime} - 0.25
								if metadata value "AstronomicalImpact" of player is set:
									set {_baseCastTime} to {_baseCastTime}/1.6
									set {_astronomicalImpact} to metadata value "AstronomicalImpact" of player
									remove 1 from {_astronomicalImpact}
									set metadata value "AstronomicalImpact" of player to {_astronomicalImpact}
									if {_astronomicalImpact} = 0:
										clear metadata value "AstronomicalImpact" of player
								set {_casttime} to "%round(({_baseCastTime}/{_pospiech}), 1)% seconds" parsed as timespan
								if metadata value "cast" of player is not set:
									set metadata value "casttimemax" of player to {_casttime}
									play sound "skill.cresselia.starfire_precast" with volume 3 and pitch 1 at player
									set metadata value "casting" of player to true
									if metadata value "channeling" of player is set:
										clear metadata value "channeling" of player
									set metadata value "lastspell" of player to player's tool's name
									set metadata value "cast" of player to {_casttime}
									while metadata value "casting" of player = true:
										if metadata value "cast" of player is not set:
											clear metadata value "casting" of player
											stop
										if {_casttime} > 0 seconds:
											set {_cst} to "%{_casttime}%"
											set metadata value "casttimeleft" of player to {_casttime}
											set {_message} to "Casting... %{_cst}% | &f <##6a5e9e>%rounded down {astralpower::%player%}%"
											if metadata value "CelestialAlignment" of player is set:
												set {_remainingCADuration} to durationShort("%metadata value "CelestialAlignment" of player%")
												set {_message} to "%{_message}% &f|  <##6a5e9e>CA: &f%{_remainingCADuration}%"
											send action bar {_message} to player
											wait 0.1 seconds
											remove 0.1 seconds from {_casttime}
										else:
											clear metadata value "casting" of player
											send action bar "" to player
								else:
									stop
								clear metadata value "casting" of player
								clear metadata value "cast" of player
								clear metadata value "casttimeleft" of player
								clear metadata value "casttimemax" of player
								stop sound "skill.cresselia.starfire_precast" for all players in radius 2 around the player
								if {_casttime} > 0 seconds:
									send action bar "&cInterrupted" to player
									stop
								if {_astronomicalImpact} is set:
									Starfire(player, {_target}, true)
								else:
									Starfire(player, {_target})
								AbilityUse(player, "Starfire")
							else:
								if {tekstcd::%player%} = true:
									set {_cdd} to cooldown "Global Cooldown Interrupted Cast%player%"
									send "<##6a5e9e>You must wait &f%{_cdd}%<##6a5e9e> to use this ability." to player
								stop
						else:
							if metadata value "casting" of player is not set:
								if cooldown "StarfireDoublecast%player%" is finished:
									create cooldown "StarfireDoublecast%player%" for 1 tick
									if {_astronomicalImpact} is set:
										Starfire(player, {_target}, true)
									else:
										Starfire(player, {_target})
									clear metadata value "AstralInvocation" of player
									send title " " with subtitle " " to player for 1 tick with fade in 0.0 second and fade out 0.0 second
									if string tag "Talents;Row 1" of custom nbt of {karta::%player%} = "Umbral Inspiration":
										UmbralInspiration(player)
					else:
						send action bar "<##6a5e9e>You can not use this ability right now." to player
						play sound "entity.villager.no" with volume 3 and pitch 1 to player
			else:
				send "&8[&6Earthcraft&8] &6You don't have the required card selected to use this ability." to player
				play sound "block.glass.break" with volume 3 and pitch 0 to player
	else if player's tool is light blue dye:
		if boolean tag "Celestial Alignment" of custom nbt of player's tool is set:
			if cooldown "CelestialAlignment%player%" is finished:
				if metadata value "casting" of player is not set:
					create cooldown "CelestialAlignment%player%" for 2 seconds
					play sound "skill.cresselia.celestial_alignment_cast" with volume 4 and pitch 1 at player
					AbilityUse(player, "Celestial Alignment")
					CelestialAlignment(player, 20 seconds)

					set {_astralPower} to 40
					if string tag "Talents;Row 2" of custom nbt of {karta::%player%} = "Astral Communion":
						set {_astralPowerCap} to 120
					else:
						set {_astralPowerCap} to 100
					if {astralpower::%player%} + {_astralPower} <= {_astralPowerCap}:
						add {_astralPower} to {astralpower::%player%}
					else:
						set {astralpower::%player%} to {_astralPowerCap}
					AstralPowerUpdate(player)
					
					if string tag "Talents;Row 1" of custom nbt of {karta::%player%} = "Solstice":
						Solstice(player)

					if boolean tag "Constellation;The Eternal Moon" of custom nbt of {karta::%player%} is set:
						set {_lastDamagedTarget} to (metadata value "MostRecentlyDamagedEnemy" of player)
						FullMoon(player, {_lastDamagedTarget})

			else:
				if {tekstcd::%player%} = true:
					set {_cdd} to cooldown "CelestialAlignment%player%"
					send "<##6a5e9e>You must wait &f%{_cdd}%<##6a5e9e> to use this ability." to player
				stop
	else if player's tool is blue dye:
		if boolean tag "Innervate" of custom nbt of player's tool is set:
			if {kartaname::%player%} = "Cresselia":
				if cooldown "innervate%player%" is finished:
					if CanUseAbility(player) != false:
						set {_id} to line 19 of lore of {karta::%player%}
						set {_pospiech} to Haste(player)
						set {_cd} to "%180/{_pospiech}% seconds" parsed as timespan
						set {_target} to target player of player
						if {_target} is set:
							create cooldown "innervate%player%" for {_cd}
							set {_lastusedability} to metadata value "lastusedability" of {_target}
							set {_cdreduction} to 40 seconds
							if {_lastusedability} = "Icy Veins":
								if {icyveins::use::%{_target}%} > {_cdreduction}:
									remove {_cdreduction} from {icyveins::use::%{_target}%}
									set {icyveins::cooldown::%{_target}%} to difference between {icyveins::use::%{_target}%} and now
								else:
									remove {icyveins::use::%{_target}%} from {icyveins::use::%{_target}%}
									set {icyveins::cooldown::%{_target}%} to difference between {icyveins::use::%{_target}%} and now
							else if {_lastusedability} = "Rain of Lava":
								if cooldown "wildfire%{_target}%" > {_cdreduction}:
									remove {_cdreduction} from cooldown "wildfire%{_target}%"
								else:
									set {_cdreduction} to cooldown "wildfire%{_target}%"
									remove {_cdreduction} from cooldown "wildfire%{_target}%"
							else:
								set {_ability} to {_lastusedability} in lowercase
								replace all " " in {_ability} with ""
								if {_ability} = "stopionalawa":
									set {_ability} to "moltenlava"
								else if {_ability} = "wybuchlawy":
									set {_ability} to "lavaburst"
								else if {_ability} = "deszczlawy":
									set {_ability} to "rainoflava"
								else if {_ability} = "gwiezdnepobudzenie":
									set {_ability} to "innervate"
								else if {_ability} = "płomiennabariera":
									set {_ability} to "flamebarrier"
								else if {_ability} = "nocnecięcie":
									set {_ability} to "nightslash"
								else if {_ability} = "kulablaskuksiężyca":
									set {_ability} to "moonlightorb"
								if cooldown "%{_ability}%%{_target}%" > {_cdreduction}:
									remove {_cdreduction} from cooldown "%{_ability}%%{_target}%"
								else:
									set {_cdreduction} to cooldown "%{_ability}%%{_target}%"
									remove {_cdreduction} from cooldown "%{_ability}%%{_target}%"
							send "<##6a5e9e>Innervate lowered the cooldown of your %{_lastusedability}% <##6a5e9e>by %{_cdreduction}% seconds!" to {_target}
				else: 
					cancel event
					if {tekstcd::%player%} = true:
						set {_cdd} to cooldown "innervate%player%"
						send "<##6a5e9e>You must wait &f%{_cdd}%<##6a5e9e> to use this ability." to player
					stop
			else:
				send "&8[&6Earthcraft&8] &6You don't have the required card selected to use this ability." to player

function Starfire(p: player, target: entity, astronomicalImpact: boolean = false):
	play sound "skill.cresselia.starfire_cast" with volume 3 and pitch 1 at {_p}

	set {_astralPower} to 8
	if string tag "Talents;Row 2" of nbt of {karta::%{_p}%} = "Astral Communion":
		set {_astralPowerCap} to 120
	else:
		set {_astralPowerCap} to 100

	set {_enemies::*} to LoopEntitiesAroundTarget({_target}, 5, true)
	if size of {_enemies::*} >= 3:
		set {_enemiesAffected} to 3
	else:
		set {_enemiesAffected} to size of {_enemies::*}

	if boolean tag "Constellation;Soul of the Cosmos" of custom nbt of {karta::%{_p}%} is set:
		set {_astralPower} to {_astralPower} * (1 + ({_enemiesAffected}/5))
		set {_soulOfTheCosmos} to (1 + ({_enemiesAffected}/5))

	if {astralpower::%{_p}%} + {_astralPower} <= {_astralPowerCap}:
		add {_astralPower} to {astralpower::%{_p}%}
	else:
		set {astralpower::%{_p}%} to {_astralPowerCap}
	AstralPowerUpdate({_p})
	
	set {_baseCastTime} to 2.25
	set {_haste} to Haste({_p})
	if metadata value "AstronomicalImpact" of {_p} is set:
		set {_baseCastTime} to {_baseCastTime}/1.6
	set {_casttime} to "%round(({_baseCastTime}/{_haste}), 1)% seconds" parsed as timespan

	loop {_enemies::*}:
		set {_damage} to 1.5 + (({damage::%{_p}%}/30) + ({versatility::%{_p}%}/90) + {primarystat::%{_p}%}/15)
		set {_crit} to 0 + ({criticalhit::%{_p}%}/10)
		if metadata value "CelestialAlignment" of {_p} is set:
			if string tag "Talents;Row 3" of nbt of {karta::%{_p}%} = "Aetherial Kindling":
				set {_damage} to {_damage}*1.15
			add 15 to {_crit}
		if {_astronomicalImpact} = true:
			set {_damage} to {_damage}*1.6
		if {_soulOfTheCosmos} is set:
			set {_damage} to {_damage}*{_soulOfTheCosmos}
		set {_damageMainTarget} to {_damage}
		if loop-value != {_target}:
			set {_damage} to {_damage}*0.6
			if string tag "Talents;Row 3" of nbt of {karta::%{_p}%} = "Aetherial Kindling":
				if metadata value "CelestialAlignment" of {_p} is set:
					set {_damage} to {_damage}*1.3
			set {_damageAoe} to {_damage}
			StarfireVisual({_p}, loop-value)
		else:
			StarfireVisual({_p}, loop-value, true)
		set {_lore} to "&8Basic Ability%nl%&f%{_casttime}% second cast%nl%&7Cooldown: &8 &fnone%nl%&7Use: &fRMB%nl%<##6a5e9e>Calls down a burst of star energy, causing%nl%&f%{_damageMainTarget}% <##a99afc>Astral <##6a5e9e>damage to the target, and &f%{_damageAoe}% <##a99afc>Astral%nl%<##6a5e9e>damage to all other enemies in a short radius.%nl% %nl%<##6a5e9e>Generates &f 8 <##b9aeeb>Astral Power<##6a5e9e>."
		set loop-value's last damage cause to sweep attack
		set metadata value "Element" of loop-value to "Astral"
		set metadata value "LastDamageCause" of loop-value to "<##6a5e9e>Starfire"
		set metadata value "LastDamageCauseLore" of loop-value to {_lore}
		chance of {_crit}%:
			set {_damage} to {_damage}*2
		make {_p} damage loop-value by {_damage}*2

	play sound "entity.player.hurt" with volume 0.5 and pitch 1 at location of {_target}

function StarfireVisual(p: player, target: entity, mainTarget: boolean = false):
	set {_l} to location 8 above {_target}
	set {_v} to vector between {_l} and {_target}
	draw 15 dust using dustOption(rgb(177, 170, 242), 1) at location above {_target} with offset vector(0.5, 0.5, 0.5) with extra 0.03
	loop round(distance between {_l} and {_target}) / 0.45 times:
		set {_v} to vector between {_l} and {_target}'s head
		set vector length of {_v} to loop-value * 0.45
		if {_mainTarget} = true:
			draw 1 flash particle at {_l} ~ {_v}
		draw 1 dust using dustOption(rgb(255, 255, 255), 1) at {_l} ~ {_v} with offset vector(0.1, 0.1, 0.1) with extra 0.01
		draw 1 item particle using pink wool at {_l} ~ {_v}
		draw 1 dust using dustOption(rgb(96, 146, 219), 1) at {_l} ~ {_v} offset by a random vector
		draw 2 dust using dustOption(rgb(177, 170, 242), 1) at {_l} ~ {_v} with offset vector(0.25, 0.1, 0.25) with extra 0.02
		if loop-number > 14:
			draw 2 dust using dustOption(rgb(145, 164, 255), 1) at {_l} ~ {_v} with offset vector(0.6, 0.25, 0.6) with extra 0.06
			draw 2 dust using dustOption(rgb(231, 145, 255), 1) at {_l} ~ {_v} with offset vector(0.6, 0.25, 0.6) with extra 0.06
		
function StarsurgeBonus(p: player, target: entity):
	if metadata value "StarsurgeBonus%{_p}%" of {_target} = true:
		set metadata value "StarsurgeBonus%{_p}%" of {_target} to false
		set {_id} to entity id of {_target}
		set {_meta} to metadata packet with id {_id}
		while metadata value "StarsurgeTime%{_p}%" of {_target} > 0 seconds:
			if {_target} is alive:
				set {_stacks} to metadata value "StarsurgeStacks%{_p}%" of {_target}
				set {_duration} to seconds of (metadata value "StarsurgeTime%{_p}%" of {_target})
				set {_name} to "%name of {_target}% &8| &f %{_stacks}%x (%{_duration}%s)"
				add data from "name %{_name}%" to {_meta}
				send packet {_meta} to {_p}
				wait 1 second
				remove 1 second from metadata value "StarsurgeTime%{_p}%" of {_target}
				if 0 seconds >= metadata value "StarsurgeTime%{_p}%" of {_target}:
					clear metadata value "StarsurgeStacks%{_p}%" of {_target}
					clear metadata value "StarsurgeTime%{_p}%" of {_target}
					clear metadata value "StarsurgeBonus%{_p}%" of {_target}
					stop loop
			else:
				clear metadata value "StarsurgeStacks%{_p}%" of {_target}
				clear metadata value "StarsurgeTime%{_p}%" of {_target}
				clear metadata value "StarsurgeBonus%{_p}%" of {_target}
				stop loop
		if {_target} is alive:
			add data from "name %name of {_target}%" to {_meta}
			send packet {_meta} to {_p}

function CresseliaStarsurgeVisual(p: player, target: entity):
	set {_l} to location 0.7 blocks below {_p}'s head
	set {_l} to location 0.4 blocks right of {_l}
	set {_v} to vector between {_l} and {_target}'s head
	loop round(distance between {_l} and {_target}) / 0.85 times:
		set {_v} to vector between {_l} and {_target}'s head
		set vector length of {_v} to loop-value * 0.85
		if string tag "Variant" of custom nbt of {karta::%{_p}%} = "Winter Delight":
			draw 1 dust using dustOption(rgb(176, 255, 185), 1) at {_l} ~ {_v} with offset vector(0.6, 0.25, 0.6) with extra 0.06
			draw 2 item particle using white concrete powder at {_l} ~ {_v}
			draw 1 end rod particle using pink wool at {_l} ~ {_v} offset by a random vector
			draw 1 of item particle using light blue wool at {_l} ~ {_v} offset by a random vector
			draw 1 of item particle using blue wool at {_l} ~ {_v} offset by a random vector
			draw 1 item particle using lime wool at {_l} ~ {_v} offset by a random vector
			draw 1 item particle using lime concrete powder at {_l} ~ {_v} offset by a random vector
		else:
			draw 1 firework particle at {_l} ~ {_v}
			draw 2 item particle using white concrete powder at {_l} ~ {_v}
			draw 1 end rod particle using pink wool at {_l} ~ {_v} offset by a random vector
			draw 1 of item particle using light blue wool at {_l} ~ {_v} offset by a random vector
			draw 1 item particle using blue wool at {_l} ~ {_v} offset by a random vector

function CresseliaRandomOffset() :: numbers:
	set {_offsetX} to a random number between -5 and -20
	set {_offsetY} to a random number between -5 and -20
	set {_offsetZ} to a random number between -5 and -20
	set {_offset::*} to {_offsetX} and {_offsetY} and {_offsetZ}
	return {_offset::*}

function StarfallStarTravel(p: player, e: entity, target: entity, duration: timespan, haste: number, particle: boolean = false):
	set {_y} to 0
	set {_locStar} to location of {_e}
	set {_count} to 0
	set {_starSpeed} to 0.25*{_haste}
	set {_starfallDuration} to "%{_duration}%"
	replace all " seconds" and " second" in {_starfalDuration} with " sec"
	while {_e} is alive:
		set {_targetLoc} to location 0.5 below {_target}
		set {_vec} to vector between {_locStar} and {_targetLoc}
		if {_count} is divisible by 7:
			set {_loc} to location of {_e}
			add 2.5 to y-location of {_loc}
			draw 1 firework particle at {_loc}
		set vector length of {_vec} to {_count} * {_starSpeed}
		teleport {_e} to {_locStar} ~ {_vec}
		add nbt from "{Rotation:[%{_y}%.0f,%{_y}%.0f]}" to nbt of {_e}
		stop loop if distance between {_e} and {_target} < 1
		wait 1 tick
		add 1 to {_count}
		add 10 to {_y}
	kill {_e}
	if {_particle} != true:
		set {_enemies::*} to LoopEntitiesAroundTarget({_target}, 3, true)
		loop {_enemies::*}:
			set {_crit} to 0 + ({criticalhit::%{_p}%}/10)
			set {_damage} to (1 + (({damage::%{_p}%}/63) + ({versatility::%{_p}%}/189) + {primarystat::%{_p}%}/31.5))
			if metadata value "CelestialAlignment" of {_p} is set:
				set {_damage} to {_damage}*1.15
				add 15 to {_crit}
			if metadata value "UmbralInspiration" of {_p} is set:
				set {_damage} to {_damage}*1.3
			if string tag "Talents;Row 2" of nbt of {karta::%{_p}%} = "Stellar Drift":
				set {_damage} to {_damage}*1.3
			if boolean tag "Constellation;Rattle the Stars" of custom nbt of {karta::%{_p}%} is set:
				set {_damage} to {_damage}*1.08
			set loop-value's last damage cause to sweep attack
			set {_lore} to "&8Basic Ability%nl%&fInstant cast%nl%&7Cooldown: &8 &fnone%nl%&7Use: &fRMB%nl%&7Cost: &f 50 Astral Power%nl%<##6a5e9e>Calls down waves of falling stars upon enemies%nl%<##6a5e9e>within a <##b9aeeb>huge radius<##6a5e9e>, dealing &f%{_damage}% <##a99afc>Astral <##6a5e9e>damage%nl%<##6a5e9e>over &f%{_starfallDuration}% sec <##6a5e9e>to targets at random and nearby%nl%<##6a5e9e>enemies.%nl% %nl%<##6a5e9e>Multiple uses of this ability may overlap."
			set metadata value "Element" of loop-value to "Astral"
			set metadata value "LastDamageCause" of loop-value to "<##6a5e9e>Starfall"
			set metadata value "LastDamageCauseLore" of loop-value to {_lore}
			chance of {_crit}%:
				set {_damage} to {_damage}*2
			make {_p} damage loop-value by {_damage}*2
			CresseliaRecentlyDamaged({_p}, loop-value)
			if loop-value = {_target}:
				play sound "entity.player.hurt" with volume 1.5 and pitch 1 at loop-value

function StarfallStarKill(e: entity):
	wait 20 seconds
	#kill on server stop
	kill {_e}

function CresseliaRecentlyDamaged(p: player, e: entity):
	if metadata value "RecentlyDamagedCresselia%{_p}%" of {_e} is not set:
		set metadata value "RecentlyDamagedCresselia%{_p}%" of {_e} to 20 seconds
		while metadata value "RecentlyDamagedCresselia%{_p}%" of {_e} > 0 seconds:
			wait 1 second
			set {_duration} to metadata value "RecentlyDamagedCresselia%{_p}%" of {_e}
			remove 1 second from {_duration}
			set metadata value "RecentlyDamagedCresselia%{_p}%" of {_e} to {_duration}
			if 0 seconds >= metadata value "RecentlyDamagedCresselia%{_p}%" of {_e}:
				clear metadata value "RecentlyDamagedCresselia%{_p}%" of {_e}
				stop loop
	else:
		set metadata value "RecentlyDamagedCresselia%{_p}%" of {_e} to 20 seconds

function AstralInvocation(p: player):
	send title " " with subtitle "" to {_p} for 1 minute with fade in 0.25 second and fade out 0 second
	set metadata value "AstralInvocation" of {_p} to true
	play sound "skill.cresselia.innervate_cast" with volume 2 and pitch 2 at {_p}
	set {_time} to 60 seconds
	while metadata value "AstralInvocation" of {_p} = true:
		wait 1 second
		remove 1 second from {_time}
		stop loop if 0 seconds >= {_time}
	send title " " with subtitle " " to {_p} for 1 second with fade in 0.0 second and fade out 0.0 second
			
function CelestialAlignmentVisual(p: player):
	set {_loc} to location 2.5 above {_p}
	if {_p}'s horizontal facing is south:
		set {_loc1} to location 2 east of {_loc}
		set {_loc2} to location 2 west of {_loc}
	set {_v} to vector between {_loc1} and {_loc2}
	loop round(distance between {_loc1} and {_loc2}) / 0.1 times:
		if loop-number < 20:
			set {_v} to vector between {_loc1} and {_loc}
		set vector length of {_v} to loop-value * 0.1
		draw 1 of dust using dustOption(rgb(255-loop-number, 255-loop-number, 255-loop-number), 1) at {_loc1} ~ {_v}

function Solstice(p: player):
	if metadata value "Solstice" of {_p} is not set:
		set metadata value "Solstice" of {_p} to 6 seconds
		while metadata value "Solstice" of {_p} > 0 seconds:
			buffRegister({_p}, "Solstice", 1, "", "-", "-", durationShort("%metadata value "Solstice" of {_p}%"))
			wait 1 second
			set {_duration} to metadata value "Solstice" of {_p}
			remove 1 second from {_duration}
			set metadata value "Solstice" of {_p} to {_duration}
			if 0 seconds >= metadata value "Solstice" of {_p}:
				clear metadata value "Solstice" of {_p}
				stop loop
		buffClear({_p}, "Solstice")
	else:
		set metadata value "Solstice" of {_p} to 6 seconds

function FullMoon(p: player, target: entity, effectiveness: number = 1):
	play sound "skill.cresselia.fullmoon_cast" with volume 3 and pitch 1 at location of {_target}
	set {_haste} to Haste({_p})
	set {_randomIncrease} to a random number between 10 and 40
	set {_loc} to location of {_target}
	set y-coordinate of {_loc} to (y-coordinate of {_target} + {_randomIncrease})
	spawn an armor stand at {_loc} with nbt from "{Invulnerable:1b,NoGravity:1b,Pose:{Head:[180.0f,0.0f,0.0f]}}"
	set name of last spawned armor stand to "CrashingStar"
	set {_e} to last spawned armor stand
	set {_y} to 0
	set {_locMoon} to location of {_e}
	set {_count} to 0
	set {_moonSpeed} to 0.15*{_haste}
	while {_e} is alive:
		set {_targetLoc} to location 0.5 below {_target}
		set {_vec} to vector between {_locMoon} and {_targetLoc}
		if {_count} is divisible by 2:
			set {_loc} to location of {_e}
			add 3 to y-location of {_loc}
			draw 1 of dust using dustOption((rgb 252, 240, 204), 1) at {_loc}
			draw 1 of end rod particle at {_e}
		set vector length of {_vec} to {_count} * {_moonSpeed}
		teleport {_e} to {_locMoon} ~ {_vec}
		add nbt from "{Rotation:[%{_y}%.0f,%{_y}%.0f]}" to nbt of {_e}
		stop loop if distance between {_e} and {_target} < 1
		wait 1 tick
		add 1 to {_count}
		add 10 to {_y}
	kill {_e}
	set {_enemies::*} to LoopEntitiesAroundTarget({_target}, 5, true)
	set {_astralpower} to 40
	set {_astralpower} to {_astralpower}*{_effectiveness}
	if string tag "Talents;Row 2" of nbt of {karta::%{_p}%} = "Astral Communion":
		set {_astralPowerCap} to 120
	else:
		set {_astralPowerCap} to 100
	if {_astralPowerCap} >= {astralpower::%{_p}%} + {_astralpower}:
		add {_astralpower} to {astralpower::%{_p}%}
	else:
		set {astralpower::%{_p}%} to {_astralPowerCap}
	AstralPowerUpdate({_p})
	draw 25 smoke at location above {_target} with offset vector(2, 0.5, 2) with extra 0.01
	draw 25 cloud at location above {_target} with offset vector(0.45, 0.5, 0.45) with extra 0.005
	
	set {_damageFullMoon} to (13 + (({damage::%{_p}%}/6.5) + ({versatility::%{_p}%}/19.5) + {primarystat::%{_p}%}/3.25)) * (1 + (({mastery::%{_p}%}/2.7)/100))
	set {_damageFullMoon} to {_damageFullMoon}*{_effectiveness}
	set {_lore} to "&f <##6a5e9e>Full Moon%nl%&7Deals &f%{_damage}% <##a99afc>Astral &7damage &7to the target and%nl%&f%{_damageFullMoon}*0.4% <##a99afc>Astral &7damage to all enemies around%nl%&7and generates &f40  <##6a5e9e>Astral Power&7."
	loop {_enemies::*}:
		set {_crit} to 0 + ({criticalhit::%{_p}%}/10)
		set {_damage} to {_damageFullMoon}
		if loop-value != {_target}:
			set {_damage} to {_damage}*0.4
		if metadata value "CelestialAlignment" of {_p} is set:
			set {_damage} to {_damage}*1.15
			add 15 to {_crit}
		set loop-value's last damage cause to sweep attack
		set metadata value "Element" of loop-value to "Astral"
		set metadata value "LastDamageCause" of loop-value to "<##6a5e9e>Full Moon"
		set metadata value "LastDamageCauseLore" of loop-value to {_lore}
		chance of {_crit}%:
			set {_damage} to {_damage}*2
		make {_p} damage loop-value by {_damage}*2
		CresseliaRecentlyDamaged({_p}, loop-value)
		play sound "entity.player.hurt" with volume 1.5 and pitch 1 at loop-value

function UmbralInspiration(p: player):
	if metadata value "UmbralInspiration" of {_p} is not set:
		set metadata value "UmbralInspiration" of {_p} to 6 seconds
		while metadata value "UmbralInspiration" of {_p} > 0 seconds:
			wait 1 second
			set {_duration} to metadata value "UmbralInspiration" of {_p}
			remove 1 second from {_duration}
			set metadata value "UmbralInspiration" of {_p} to {_duration}
			if 0 seconds >= metadata value "UmbralInspiration" of {_p}:
				clear metadata value "UmbralInspiration" of {_p}
				stop loop
	else:
		set metadata value "UmbralInspiration" of {_p} to 6 seconds

function CelestialAlignment(p: player, duration: timespan):
	if metadata value "CelestialAlignment" of {_p} is not set:
		set metadata value "CelestialAlignment" of {_p} to 20 seconds
		add 150 to {criticalhit::%{_p}%}
		add 60 to {bonusHaste::%{_p}%}
		while metadata value "CelestialAlignment" of {_p} > 0 seconds:
			buffRegister({_p}, "Alignment", 5, "", "-", "-", durationShort("%metadata value "CelestialAlignment" of {_p}%"))
			wait 1 second
			set {_timeRemaining} to metadata value "CelestialAlignment" of {_p}
			remove 1 second from {_timeRemaining}
			set metadata value "CelestialAlignment" of {_p} to {_timeRemaining}
			if 0 seconds >= metadata value "CelestialAlignment" of {_p}:
				clear metadata value "CelestialAlignment" of {_p}
				remove 150 from {criticalhit::%{_p}%}
				remove 60 from {bonusHaste::%{_p}%}
				AstronomicalImpact({_p})
				stop loop
		buffClear({_p}, "Alignment")
		clear metadata value "AetherialKindlingExtension" of {_p}
	else:
		set {_timeRemaining} to metadata value "CelestialAlignment" of {_p}
		set {_timeRemaining} to 0 seconds if {_timeRemaining} is not set
		add {_duration} to {_timeRemaining}
		set metadata value "CelestialAlignment" of {_p} to {_duration}

function StellarDrift(p: player, duration: timespan):
	if metadata value "StellarDrift" of {_p} is not set:
		set {_movementSpeed} to {_p}'s walking speed
		set metadata value "StellarDrift" of {_p} to {_duration}
		set {_p}'s walking speed to ({_p}'s walking speed*1.2)
		while metadata value "StellarDrift" of {_p} > 0 seconds:
			wait 1 second
			set {_duration} to metadata value "StellarDrift" of {_p}
			remove 1 second from {_duration}
			set metadata value "StellarDrift" of {_p} to {_duration}
			if 0 seconds >= metadata value "StellarDrift" of {_p}:
				clear metadata value "StellarDrift" of {_p}
				set {_p}'s walking speed to {_movementSpeed}
				stop loop
	else:
		set metadata value "StellarDrift" of {_p} to {_duration}

function AstronomicalImpact(p: player):
	if string tag "Talents;Row 1" of nbt of {karta::%{_p}%} = "Astronomical Impact":
		set metadata value "AstronomicalImpact" of {_p} to 3

function Starlord(p: player):
	if metadata value "StarlordStackCount" of {_p} is not set:
		set metadata value "StarlordStackCount" of {_p} to 0
	if metadata value "StarlordStackCount" of {_p} < 3:
		add 1 to metadata value "StarlordStackCount" of {_p}
		add 16 to {bonusHaste::%{_p}%}
	if metadata value "Starlord" of {_p} is not set:
		set metadata value "Starlord" of {_p} to 15 seconds
		while metadata value "Starlord" of {_p} > 0 seconds:
			set {_duration} to metadata value "Starlord" of {_p}
			set {_stackCount} to metadata value "StarlordStackCount" of {_p}
			buffRegister({_p}, "Starlord", 1, "", "Stacks", "<##19943e> &f%{_stackCount}*16% &7| &f%{_stackCount}%", durationShort("%{_duration}%"))
			wait 1 second	
			remove 1 second from {_duration}
			set metadata value "Starlord" of {_p} to {_duration}
		remove metadata value "StarlordStackCount" of {_p}*16 from {bonusHaste::%{_p}%}
		clear metadata value "StarlordStackCount" of {_p}
		clear metadata value "Starlord" of {_p}
		buffClear({_p}, "Starlord")	

function StellarCommand(p: player, target: entity):
	if metadata value "Stellar Command%{_p}%" of {_target} is not set:
		set metadata value "Stellar Command%{_p}%" of {_target} to 8 seconds
		while metadata value "Stellar Command%{_p}%" of {_target} > 0 seconds:
			wait 1 second
			remove 1 second from metadata value "Stellar Command%{_p}%" of {_target}
		clear metadata value "Stellar Command%{_p}%" of {_target}
	else:
		set metadata value "Stellar Command%{_p}%" of {_target} to 8 seconds

#on rightclick:
#	set {_shape} to a star with 5 points, inner radius 0.25, and outer radius 2
#	set particle of {_shape} to flame
#	set {_x} to vector of player
#	set {_p} to player's direction
	#rotate shape {_shape} around vector(1, 1, 1) by 2 radians
	#draw {_shape} at location 3.5 above player
	#gradient podobny do procu nad graczem