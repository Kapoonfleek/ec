
import:
    java.io.File
    com.sk89q.worldedit.math.BlockVector3
    com.sk89q.worldedit.extent.clipboard.io.ClipboardFormats
    com.sk89q.worldedit.bukkit.BukkitWorld
    org.mvplugins.multiverse.core.world.WorldManager
    org.mvplugins.multiverse.core.MultiverseCore
    org.mvplugins.multiverse.core.MultiverseCoreApi
    org.mvplugins.multiverse.core.world.options.CloneWorldOptions
    org.mvplugins.multiverse.core.world.options.DeleteWorldOptions
    org.mvplugins.multiverse.core.world.LoadedMultiverseWorld
    org.bukkit.event.world.TimeSkipEvent
    org.bukkit.event.weather.WeatherChangeEvent
    org.mvplugins.multiverse.core.world.MultiverseWorld
    org.bukkit.Bukkit
    org.bukkit.World
    org.bukkit.Chunk
    org.bukkit.plugin.Plugin
    kr.toxicity.model.api.BetterModel
    java.util.Optional
    kr.toxicity.model.api.tracker.EntityTrackerRegistry
    kr.toxicity.model.api.tracker.Tracker

options:
    safeworld: location(9270.5, 73.5, 1562.5, world "world")

effect paste schematic %string% at %location% [(1Â¦(with|including) air)]:
    trigger:
        set {_file} to new File(expr-1)

        set {_air} to true if parse mark = 1, else false
        set {_world} to new BukkitWorld(expr-2.getWorld())

        set {_loc} to BlockVector3.at(expr-2.getBlockX(), expr-2.getBlockY(), expr-2.getBlockZ())

        ClipboardFormats.findByFile({_file}).load({_file}).paste({_world}, {_loc}, false, {_air}, false, null)

effect prepare world %string% as %string%:
    trigger:
        set {_api} to MultiverseCoreApi.get()
        set {_manager} to {_api}.getWorldManager()
        
        set {_world} to {_manager}.getLoadedWorld(expr-1).getOrNull()
        set {_options} to CloneWorldOptions.fromTo({_world}, expr-2)

        {_manager}.cloneWorld({_options})

effect deleteworld %string%:
    trigger:
        set {_api} to MultiverseCoreApi.get()
        set {_manager} to {_api}.getWorldManager()

        set {_world} to {_manager}.getWorld(expr-1).getOrNull()
        set {_options} to DeleteWorldOptions.world({_world})

        {_manager}.deleteWorld({_options})

#function mythicMobSpawn(e: string, loc: location) :: entity:
    #set {_api} to MythicBukkit.inst().getAPIHelper()
    #set {_mob} to {_api}.spawnMythicMob({_e}, {_loc})
    #return {_mob}

function doesWorldExist(w: string) :: boolean:
    set {_api} to MultiverseCoreApi.get()
    set {_manager} to {_api}.getWorldManager()
    return {_manager}.isWorld({_w})

function getNewInstance(w: string) :: string:
    set {_bool} to true
    while {_bool} is true:
        set {_index} to random 6 char string from charset `0-9` `a-z`
        set {_bool} to false if doesWorldExist("%{_w}%-%{_index}%") = false
    return {_index}

function createNewInstance(w: string) :: string:
    set {_instance} to getNewInstance({_w})
    set {_newInstance} to "%{_w}%-%{_instance}%"
    prepare world {_w} as {_newInstance}
    return {_instance}

function isWorldIsland(w: world) :: boolean:
    set {_worldList::*} to getIslandWorlds()
    if "%{_w}%" contains "-":
        set {_world::*} to "%{_w}%" split at "-"
        set {_world} to {_world::1}
    else:
        set {_world} to "%{_w}%"
        replace all "0", "1", "2", "3", "4", "5", "6", "7", "8" and "9" in {_world} with ""
    if {_worldList::*} contains {_world}:
        set {_return} to true
    return {_return}

function getIslandWorlds() :: strings:
    load yaml "plugins/Skript/islandexpeditions/IslandList" as "IslandList"
    set {_islandList::*} to yaml list "Islands" in "IslandList"
    unload yaml "IslandList"

    return {_islandList::*}

function getIslandName(island: string) :: string:
    if {_island} = "PlunderCove":
        set {_island} to "Plunder Cove"
    return {_island}

on rightclick:
    if player's tool is bamboo:
        if player's name = "Pehrek":
            set {_islandList::*} to getIslandWorlds()
            set {_island} to a random element of {_islandList::*}

            set {_difficulty} to "<##ae38ff>Mythic"

            set {_direction} to a random element of "Longitude" and "Latitude"
            set {_enemyDirection} to a random element of "Longitude" and "Latitude"
            set {_directionsLongitude::*} to "North" and "South"
            set {_directionsLatitude::*} to "East" and "West"
            
            if {_direction} = "Longitude":
                set {_rotation} to a random element of "North" and "South"
                remove {_rotation} from {_directionsLongitude::*}
                
            else:
                set {_rotation} to a random element of "East" and "West"
                remove {_rotation} from {_directionsLatitude::*}

            if {_enemyDirection} = "Longitude":
                set {_enemyRotation} to a random element of {_directionsLongitude::*}
            else:
                set {_enemyRotation} to a random element of {_directionsLatitude::*}

            set {_instance} to createNewInstance({_island})
            set {_newInstance} to "%{_island}%-%{_instance}%"

            if player is in a party:
                set {_partyMembers::*} to party members of party of player
            else:
                add player to {_partyMembers::*}

            load yaml "plugins/Skript/islandexpeditions/%{_island}%/Locations.yml" as "%{_island}%Locations"
            set {_total} to yaml value "TotalLocations.ShipAlly.%{_direction}%" in "%{_island}%Locations"
            

            loop yaml node keys "Locations.ShipAlly.%{_direction}%.%{_rotation}%" in "%{_island}%Locations":
                set {_integer} to (loop-value parsed as integer)
                set {_allyLocations::*} to {_allyLocations::*} and {_integer}

            loop yaml node keys "Locations.ShipAlly.%{_enemyDirection}%.%{_enemyRotation}%" in "%{_island}%Locations":
                set {_integer} to (loop-value parsed as integer)
                set {_enemyLocations::*} to {_enemyLocations::*} and {_integer}

            set {_lowestAlly} to min({_allyLocations::*})
            set {_highestAlly} to max({_allyLocations::*})

            set {_lowestEnemy} to min({_enemyLocations::*})
            set {_highestEnemy} to max({_enemyLocations::*})

            set {_borderRadius} to yaml value "WorldBorderRadius" in "%{_island}%Locations"
            set {_borderMin} to {_borderRadius}-200
            set {_borderMax} to ({_borderRadius}*-1) + 200

            set {_chunkBorder1} to location({_borderMin}, 0, {_borderMin}, world {_newInstance})
            set {_chunkBorder2} to location({_borderMax}, 0, {_borderMax}, world {_newInstance})
            set {_plugin} to instance of plugin "Skript"
            
            loop all chunks within {_chunkBorder1} and {_chunkBorder2}:
                set {_chunkLoc} to block at 0,0,0 in loop-value
                set {_chunk} to loop-value.getWorld().getChunkAtAsync({_chunkLoc})

            set worldborder of world {_newInstance} to a worldborder:
                set worldborder radius of event-worldborder to {_borderRadius}
                set worldborder center of event-worldborder to location(0, 500, 0)
                set worldborder warning distance of event-worldborder to 10

            load yaml "plugins/Skript/islandexpeditions/%{_island}%/Properties" as "%{_island}%Properties"
            set {_sunChance} to yaml value "Properties.Weather.Sun" in "%{_island}%Properties"
            set {_rainChance} to yaml value "Properties.Weather.Rain" in "%{_island}%Properties"
            set {_thunderChance} to yaml value "Properties.Weather.Thunder" in "%{_island}%Properties"
            unload yaml "%{_island}%Properties"

            set {allowChangeConditions::%{_newInstance}%} to true
            set {_randomTime} to a random integer between 0 and 24000
            world {_newInstance}.setTime({_randomTime})

            set {_weather} to a random integer between 1 and 100
            if {_weather} is between 1 and {_sunChance}:
                set {_randomWeather} to "sun" parsed as weather type
            else if {_weather} is between {_sunChance} + 1 and {_sunChance} + {_rainChance}:
                set {_randomWeather} to "rain" parsed as weather type
            else if {_weather} is between ({_sunChance} + {_rainChance} + 1) and 100:
                set {_randomWeather} to "thunder" parsed as weather type
            set weather in world {_newInstance} to {_randomWeather}
            broadcast {_randomWeather}

            set {_shipStart} to a random integer between {_lowestAlly} and {_highestAlly}
            set {_enemyShipStart} to a random integer between {_lowestEnemy} and {_highestEnemy}

    
            set {_x} to yaml value "Locations.ShipAlly.%{_direction}%.%{_rotation}%.%{_shipStart}%.x" in "%{_island}%Locations"
            set {_y} to yaml value "Locations.ShipAlly.%{_direction}%.%{_rotation}%.%{_shipStart}%.y" in "%{_island}%Locations"
            set {_z} to yaml value "Locations.ShipAlly.%{_direction}%.%{_rotation}%.%{_shipStart}%.z" in "%{_island}%Locations"

            set {_xEnemy} to yaml value "Locations.ShipAlly.%{_enemyDirection}%.%{_enemyRotation}%.%{_enemyShipStart}%.x" in "%{_island}%Locations"
            set {_yEnemy} to yaml value "Locations.ShipAlly.%{_enemyDirection}%.%{_enemyRotation}%.%{_enemyShipStart}%.y" in "%{_island}%Locations"
            set {_zEnemy} to yaml value "Locations.ShipAlly.%{_enemyDirection}%.%{_enemyRotation}%.%{_enemyShipStart}%.z" in "%{_island}%Locations"

            unload yaml "%{_island}%Locations"
            
            set {_locShip} to location({_x}, {_y}, {_z}, world {_newInstance})
            set {_locEnemyShip} to location({_xEnemy}, {_yEnemy}, {_zEnemy}, world {_newInstance})
            
            if {_direction} = "Longitude":
                set {_rotationShip} to a random element of "North" and "South"
                
            else:
                set {_rotationShip} to a random element of "East" and "West"

            if {_enemyDirection} = "Longitude":
                set {_rotationShipEnemy} to a random element of "North" and "South"
                
            else:
                set {_rotationShipEnemy} to a random element of "East" and "West"

            broadcast "DEBUG: &aALLY: Start: [%{_shipStart}%]   Rotation: (%{_rotationShip}%)  &cStart: [%{_enemyShipStart}%]   Rotation: (%{_rotationShipEnemy}%)"
            wait 3 seconds
                
            paste schematic "plugins/FastAsyncWorldEdit/schematics/IslandExpeditionsShip%{_rotationShip}%.schem" at {_locShip}
            paste schematic "plugins/FastAsyncWorldEdit/schematics/IslandExpeditionsEnemyShip%{_rotationShipEnemy}%.schem" at {_locEnemyShip}

            load yaml "plugins/Skript/islandexpeditions/%{_island}%/Azerite" as "%{_island}%Azerite"
                    
            loop yaml node keys "Azerite" in "%{_island}%Azerite":
                set {_model} to yaml value "Models.%loop-value%" in "AzeriteModels"
                loop yaml node keys "Azerite.%loop-value%" in "%{_island}%Azerite":
                    set {_azeriteIndex} to loop-value-2 parsed as integer
                    set {_azeriteType} to loop-value-1
                    set {_azeriteLocX} to yaml value "Azerite.%{_azeriteType}%.%loop-value-2%.Location.X" in "%{_island}%Azerite"
                    set {_azeriteLocY} to yaml value "Azerite.%{_azeriteType}%.%loop-value-2%.Location.Y" in "%{_island}%Azerite"
                    set {_azeriteLocZ} to yaml value "Azerite.%{_azeriteType}%.%loop-value-2%.Location.Z" in "%{_island}%Azerite"
                    set {_azeriteLocYaw} to yaml value "Azerite.%{_azeriteType}%.%loop-value-2%.Location.Yaw" in "%{_island}%Azerite"
                    set {_azeriteLocPitch} to yaml value "Azerite.%{_azeriteType}%.%loop-value-2%.Location.Pitch" in "%{_island}%Azerite"

                    set {_azeriteLocation} to location({_azeriteLocX}, {_azeriteLocY}, {_azeriteLocZ}, world {_newInstance}, {_azeriteLocYaw}, {_azeriteLocPitch})
                    set {_yShift} to yaml value "Attributes.%{_azeriteType}%.YShift" in "AzeriteAttributes"
                    increase {_azeriteLocation}'s y-coordinate by {_yShift}

                    spawn armor stand at {_azeriteLocation} with nbt from "{Invisible:1b,NoGravity:1b,Invulnerable:1b}"
                    set {_scaleAttribute} to yaml value "Attributes.%{_azeriteType}%.Scale" in "AzeriteAttributes"
                    set helmet of last spawned armor stand to {_model}
                    set scale attribute of last spawned armor stand to {_scaleAttribute}
                    set pitch of last spawned armor stand to {_pitch}
                    set yaw of last spawned armor stand to {_yaw}
                    set int tag "AzeriteIndex" of custom nbt of last spawned armor stand to {_azeriteIndex}
                    set int tag "AzeriteId" of custom nbt of last spawned armor stand to {_azeriteId}
                    set string tag "AzeriteInstance" of custom nbt of last spawned armor stand to {_instance}
                    set string tag "AzeriteVeinType" of custom nbt of last spawned armor stand to {_azeriteType}

            unload yaml "%{_island}%Azerite"

            if {_rotationShip} = "North" or "South":
                if {_rotationShip} = "South":
                    set {_z} to z-coordinate of {_locShip} + 5.85
                    set {_x} to x-coordinate of {_locShip}
                    set {_yaw} to 0
                else:
                    set {_z} to z-coordinate of {_locShip} - 5.85
                    set {_x} to x-coordinate of {_locShip}
                    set {_yaw} to 180
            else:
                if {_rotationShip} = "West":
                    set {_x} to x-coordinate of {_locShip} - 5.85
                    set {_z} to z-coordinate of {_locShip}
                    set {_yaw} to 90
                else:
                    set {_x} to x-coordinate of {_locShip} + 5.85
                    set {_z} to z-coordinate of {_locShip}
                    set {_yaw} to -90

            set {_locFlynn} to location({_x}, y-coordinate of {_locShip} + 13.5, {_z}, world {_newInstance}, {_yaw}, -5)
            spawn an adult zombie at {_locFlynn} with nbt from "{Silent:1b,NoAI:1b}"
            set {_flynnFairwind} to last spawned zombie
            set display name of {_flynnFairwind} to "Flynn Fairwind"
            set scale attribute of {_flynnFairwind} to 0.9
            set {_flynnFairwind}'s tool to air

            entityTitle({_flynnFairwind}, "Captain")
            flynnFairwindIdleSounds({_flynnFairwind})

            teleport {_partyMembers::*} to {_locFlynn}
            islandExpeditionInit({_instance}, {_locFlynn}, {_island}, {_difficulty}, {_partyMembers::*})

            load yaml "plugins/Skript/islandexpeditions/DialoguesIslands.yml" as "IslandsDialogues"
            set {_totalDialogues} to size of (yaml node keys "Dialogues.Arrive" in "IslandsDialogues")
            set {_arriveDialogue} to a random integer between 1 and {_totalDialogues}

            if {_arriveDialogue} = 4:
                while {_arriveDialogue} = 4:
                    set {_arriveDialogue} to a random integer between 1 and {_totalDialogues}
            else if {_arriveDialogue} = 3:
                set {_arriveSoundFollowup} to yaml value "Dialogues.Arrive.4.Sound" in "IslandsDialogues"
                set {_arriveQuoteFollowup} to yaml value "Dialogues.Arrive.4.Quote" in "IslandsDialogues"
                flynnFairwindFollowupDialogue({_flynnFairwind}, {_locFlynn}, 10 seconds, {_arriveSoundFollowup}, {_arriveQuoteFollowup}, {_partymembers::*})

            set {_arriveSound} to yaml value "Dialogues.Arrive.%{_arriveDialogue}%.Sound" in "IslandsDialogues"
            set {_arriveQuote} to yaml value "Dialogues.Arrive.%{_arriveDialogue}%.Quote" in "IslandsDialogues"

            unload yaml "IslandsDialogues"

            islandExpeditionCountdown({_locFlynn}, {_partyMembers::*}, {_instance})
            
            wait 1 second

            while {_partyMembers::*} are not in world {_newInstance}:
                wait 1 tick

            play sound {_arriveSound} with volume 2 and pitch 1 at {_locFlynn}
            send "&eFlynn Fairwind says: %{_arriveQuote}%" to {_partyMembers::*}
            dialogue({_arriveQuote}, (location 0.25 above {_locFlynn}), 0 seconds, 0 seconds, {_partyMembers::*})

            #Enemies
            #       Undead:
            #           fdsf
            #       Fire Elementals


            #Entity (config)
            #IsModeledEntity
            #Stroll (true/false) etc.

            #Azerite
            #   Crystal
            #   Chunk
            #   Shard

            #set metadata value "Azerite%yaml value..%"
            #make all players see block at azerite as air
            #packet id and spawn id (in file id)
function flynnFairwindIdleSounds(e: entity):
    while {_e} is alive:
        if metadata value "Speaking" of {_e} != true:
            play sound "npc.flynnfairwind.idle" with volume 0.9 and pitch 1 at location of {_e}
        set {_randomWait} to a random number between 10 and 20
        set {_wait} to "%{_randomWait}% seconds" parsed as timespan
        wait {_wait}

function flynnFairwindFollowupDialogue(e: entity, loc: location, wait: timespan, sound: string, quote: string, partymembers: players):
    set metadata value "Speaking" of {_e} to true
    wait {_wait}
    play sound {_sound} with volume 2 and pitch 1 at {_loc}
    send "&eFlynn Fairwind says: %{_quote}%" to {_partymembers::*}
    clear metadata value "Speaking" of {_e}

function islandExpeditionInit(instance: string, spawnLoc: location, islandName: string, difficulty: string, partymembers: players):
    set {_dif} to uncolored {_difficulty}
    if {_dif} = "Normal":
        set {_azeriteRequired} to 6000
    else if {_dif} = "Heroic":
        set {_azeriteRequired} to 9000
    else if {_dif} = "Mythic":
        set {_azeriteRequired} to 12000
    set {azeriteRequired::%{_instance}%} to {_azeriteRequired}
    set {azeriteCollectedAlly::%{_instance}%} to 0
    set {azeriteCollectedEnemy::%{_instance}%} to 0

    loop {_partymembers::*}:
        if metadata value "InsideInstance" of loop-value is not set:
            set metadata value "InsideInstance" of loop-value to true
            set metadata value "IslandExpeditionInstance" of loop-value to {_instance}
            set metadata value "SpawnpointIslandExpedition" of loop-value to {_spawnLoc}
            set metadata value "IslandName" of loop-value to {_islandName}
            set metadata value "IslandExpeditionTime" of loop-value to 0 seconds
            set metadata value "IslandDifficulty" of loop-value to {_difficulty}

            clear loop-value's fastboard
            islandExpeditionFastboard(loop-value)

            set {_player} to Bukkit.getPluginManager().getPlugin("Essentials").getUser(loop-value)
            if {_player}.isGodModeEnabled() = true:
                {_player}.setGodModeEnabled(false)

            if loop-value can fly:
                disable flight for loop-value

            heal loop-value
        else:
            set {_players::*} to {_partymembers::*} where [input != loop-value]
            send "&c&o%loop-value% is already in an instance. The Island Expedition will start without the player." to {_players::*}
        
command /islandleave:
    trigger:
        islandExpeditionLeave(player)

command /islanddelete:
    trigger:
        load yaml "plugins/Skript/islandexpeditions/IslandList" as "IslandsClear"
        set {_islandList::*} to yaml list "Islands" in "IslandsClear"
        unload yaml "IslandsClear"
        loop {_islandList::*}:  
            loop all worlds where ["%input%" contains "%loop-value%"]:
                if "%loop-value-2%" != "%loop-value-1%":
                    teleport all players in world "%loop-value-2%" to {@safeworld}
                    deleteworld "%loop-value-2%"

function islandExpeditionCountdown(loc: location, players: players, instance: string):
    set {_radius} to 9
    loop all blocks in radius ({_radius} + 1) around {_loc} where [distance between {_loc} and input > {_radius}]:
        if (y-coordinate of loop-block) >= (y-coordinate of {_loc}):
            set {_blocks::*} to {_blocks::*} and type of loop-block
            set block at loop-block to (blue stained glass) fast
            set boolean tag "CountdownBlock" of custom nbt of loop-block to true
            wait 1 tick if loop-counter is divisible by 72
    set {_am} to 10
    set metadata value "CannotUseAbilities" of {_players::*} to true

    send title " " with subtitle "&e20 sec" to {_players::*} for 4 seconds with fade in 0.5 second and fade out 0.5 second
    play sound "block.note_block.pling" with volume 3 and pitch 0.2 to {_players::*}
    wait 10 seconds
    loop 10 times:
        loop {_players::*}:
            set {_player} to loop-value-2
            if metadata value "IslandExpeditionInstance" of {_player} is set:
                send title "&e&l%{_am}%" with subtitle " " to {_player} for 1 second with fade in 0.5 second and fade out 0.5 second
                remove 1 from {_am}
                play sound "block.note_block.pling" with volume 3 and pitch 0.2 to {_player}
            else:
                loop 2 times:
                    execute {_player} command "Spawn"
                    remove {_player} from {_players::*}
            stop loop
        wait 1 second
    clear metadata value "CannotUseAbilities" of {_players::*}
    set {_num} to 0
    loop all blocks in radius ({_radius} + 1) around {_loc} where [boolean tag "CountdownBlock" of custom nbt of input is set]:
        add 1 to {_num}
        clear boolean tag "CountdownBlock" of custom nbt of loop-block
        set block at loop-block to {_blocks::%{_num}%}

    if size of {_players::*} > 0:
        loop {_players::*}:
            islandExpeditionStart(loop-value)

function islandExpeditionFastboard(p: player):
    set {_islandName} to metadata value "IslandName" of {_p}
    set {_difficulty} to metadata value "IslandDifficulty" of {_p}
    set {_instance} to metadata value "IslandExpeditionInstance" of {_p}
    set {_azeriteRequired} to {azeriteRequired::%{_instance}%}

    set title of {_p}'s fastboard to "    &b&lIsland Expedition   "
    set line 1 of {_p}'s fastboard to " "
    set line 2 of {_p}'s fastboard to "&fIsland: &b%getIslandName({_islandName})%"
    set line 4 of {_p}'s fastboard to "&fDifficulty: %{_difficulty}%"
    set line 5 of {_p}'s fastboard to " "
    set line 6 of {_p}'s fastboard to "&fCollect î  %{_azeriteRequired}% Azerite."
    set line 7 of {_p}'s fastboard to "<##3aff17>Ally: &f%{azeriteCollectedAlly::%{_instance}%}% | <##ff1742>Enemy: &f%{azeriteCollectedEnemy::%{_instance}%}%"
    set line 8 of {_p}'s fastboard to " "
    set line 10 of {_p}'s fastboard to "&fWorth î  &b0 &fAzerite."

function islandExpeditionStart(p: player):
    broadcast "This is when the start timer ends. Initialize timer here."
    islandExpeditionTimer({_p})

function islandExpeditionLeave(p: player):
    set {_instance} to metadata value "IslandExpeditionInstance" of {_p}
    set {_islandName} to metadata value "IslandName" of {_p}

    clear metadata value "InsideInstance" of {_p}
    clear metadata value "IslandExpeditionInstance" of {_p}
    clear metadata value "SpawnpointIslandExpedition" of {_p}
    clear metadata value "IslandName" of {_p}
    clear metadata value "IslandExpeditionTime" of {_p}
    clear metadata value "IslandDifficulty" of {_p}
    clear metadata value "cast" of {_p}
    clear metadata value "mining" of {_p}
    clear metadata value "casting" of {_p}
    clear {_p}'s fastboard
    if metadata value "ECEngaged" of {_p} is not set:
        if metadata value "DungeonInstance" of {_p} is not set:
            UpdateScoreboard({_p})
    loop 2 times:
        execute {_p} command "Spawn"
    set {_players::*} to all players where ["%world of input%" contains {_instance}]
    if {_players::*} is not set:
        teleport all players in world "%{_islandName}%-%{_instance}%" to {@safeworld}
        deleteworld "%{_islandName}%-%{_instance}%"
        clear {azeriteRequired::%{_instance}%}
        clear {azeriteCollectedAlly::%{_instance}%}
        clear {azeriteCollectedEnemy::%{_instance}%}

function islandExpeditionTimer(p: player):
    set {_time} to metadata value "IslandExpeditionTime" of {_p}
    while metadata value "IslandExpeditionInstance" of {_p} is set:
        if {_time} > 1 hour:
            set {_timeText} to ({_time} from (unix date of 0)) formatted as "hh:mm:ss"
        else:
            set {_timeText} to ({_time} from (unix date of 0)) formatted as "mm:ss"
        set line 3 of {_p}'s fastboard to "&fTime on Island: &e%{_timeText}%"
        wait 1 second
        add 1 second to {_time}
        set metadata value "IslandExpeditionTime" of {_p} to {_time}

function seagullsAmbientSounds(p: player):
    while "%regions at {_p}%" contains "SpawnArea":
        set {_random} to a random integer between 1 and 14
        set {_sound} to yaml value "Sounds.Ambient.Seagulls.%{_random}%.Sound" in "IslandsSounds"
        set {_duration} to yaml value "Sounds.Ambient.Seagulls.%{_random}%.Duration" in "IslandsSounds"
        play sound {_sound} with volume 1 and pitch 1 to {_p}
        set {_w} to a random number between 1 and 6
        set {_wait} to "%{_w}% seconds" parsed as timespan
        wait {_duration} + {_wait}
        stop loop if metadata value "AtDocks" of {_p} is not set
    stop sound {_sound} for {_p}

function shoreAmbientSounds(p: player):
    while "%regions at {_p}%" contains "SpawnArea":
        set {_random} to a random integer between 1 and 4
        set {_sound} to yaml value "Sounds.Ambient.Shore.%{_random}%.Sound" in "IslandsSounds"
        set {_duration} to yaml value "Sounds.Ambient.Shore.%{_random}%.Duration" in "IslandsSounds"
        play sound {_sound} with volume 1 and pitch 1 to {_p}
        set {_w} to a random number between 1 and 6
        set {_wait} to "%{_w}% seconds" parsed as timespan
        wait {_duration} + {_wait}
        stop loop if metadata value "AtDocks" of {_p} is not set
    stop sound {_sound} for {_p}

function windAmbientSounds(p: player):
    if {wind} is set:
        while "%regions at {_p}%" contains "SpawnArea":
            set {_random} to a random integer between 1 and 4
            set {_sound} to yaml value "Sounds.Ambient.Wind.%{wind}%.%{_random}%.Sound" in "IslandsSounds"
            set {_duration} to yaml value "Sounds.Ambient.Wind.%{wind}%.%{_random}%.Duration" in "IslandsSounds"
            play sound {_sound} with volume 1 and pitch 1 to {_p}
            set {_w} to a random number between 1 and 6
            set {_wait} to "%{_w}% seconds" parsed as timespan
            wait {_duration} + {_wait}
            stop loop if metadata value "AtDocks" of {_p} is not set
        stop sound {_sound} for {_p}
    
    
command /diatest:
    trigger:
        set {_islandList::*} to getIslandWorlds()
        set {_island} to a random element of {_islandList::*}

        load yaml "plugins/Skript/islandexpeditions/DialoguesIslands.yml" as "IslandsDialogues"
        set yaml value "Dialogues.Arrive.1.Sound" in "IslandsDialogues" to "npc.flynnfairwind.island_start_arrive_anchorsaway"
        set yaml value "Dialogues.Arrive.1.Quote" in "IslandsDialogues" to "Anchor's away and planks are down! We'll get the Azerite detector online, you handle the bad guys."

        set yaml value "Dialogues.Arrive.2.Sound" in "IslandsDialogues" to "npc.flynnfairwind.island_start_arrive_lookslike"
        set yaml value "Dialogues.Arrive.2.Quote" in "IslandsDialogues" to "Looks like we've arrived! We'll get the detector up and running while you get acquainted with the island."

        set yaml value "Dialogues.Arrive.3.Sound" in "IslandsDialogues" to "npc.flynnfairwind.island_start_arrive_opensea"
        set yaml value "Dialogues.Arrive.3.Quote" in "IslandsDialogues" to "Ahh, the open sea. A shanty on your lips, the wind in your chest hair. Now that's freedom!"

        set yaml value "Dialogues.Arrive.4.Sound" in "IslandsDialogues" to "npc.flynnfairwind.island_start_arrive_opensea_wellunless"
        set yaml value "Dialogues.Arrive.4.Quote" in "IslandsDialogues" to "Well... unless you've been pressed into service with the Navy. Or captured by pirates. And then... captured by the Navy."

        set yaml value "Dialogues.Arrive.5.Sound" in "IslandsDialogues" to "npc.flynnfairwind.island_start_arrive_shipsdocked"
        set yaml value "Dialogues.Arrive.5.Quote" in "IslandsDialogues" to "Ship's docked! Enjoy your adventure while we spin up the ol' Azerite detector."
        
        save yaml "IslandsDialogues"
        unload yaml "IslandsDialogues"
        stop
        #Pet island dialogues
        load yaml "plugins/Skript/islandexpeditions/%{_island}%/Dialogues.yml" as "%{_island}%Dialogues"
        unload yaml "%{_island}%Dialogues"

on rightclick on an entity:
    if name of clicked entity = "Flynn Fairwind":
        if cooldown "Flynn Fairwind-Talk%player%" is finished:
            create cooldown "Flynn Fairwind-Talk%player%" for 2 seconds
            set {_greeting} to a random integer between 1 and 7
            if {_greeting} = 1:
                set {_sound} to "npc.flynnfairwind.greeting_ahoy"
            else if {_greeting} = 2:
                set {_sound} to "npc.flynnfairwind.greeting_ajobs"
            else if {_greeting} = 3:
                set {_sound} to "npc.flynnfairwind.greeting_areyou"
            else if {_greeting} = 4:
                set {_sound} to "npc.flynnfairwind.greeting_blood"
            else if {_greeting} = 5:
                set {_sound} to "npc.flynnfairwind.greeting_imall"
            else if {_greeting} = 6:
                set {_sound} to "npc.flynnfairwind.greeting_whatsthe"
            else if {_greeting} = 7:
                set {_sound} to "npc.flynnfairwind.greeting_whatsyour"
            play sound {_sound} with volume 3 and pitch 1 to player
  
        if clicked entity is a player:
            play sound "entity.experience_orb.pickup" with volume 3 and pitch 1 to player
            set metadata tag "islandExpeditions" of player to chest inventory with 3 rows named "Set sail for an Island Expedition!"
            set {_gui} to metadata tag "islandExpeditions" of player
            set {_azeriteCollect} to 36000

            set {_azerite} to 300000
            set {_barFill} to round(({_azerite}/{_azeriteCollect})*10, 0)*10
            
            if {_azerite} > {_azeriteCollect}:
                set {_azeriteTooltip} to {_azeriteCollect}
            else:
                set {_azeriteTooltip} to {_azerite}

            if {_azerite} >= 0.1*{_azeriteCollect}:
                if {_azerite} >= {_azeriteCollect}:
                    set {_tooltip} to "azeriteweekly_full"
                else:
                    set {_tooltip} to "azeriteweekly_%{_barFill}%"
            else:
                set {_tooltip} to "azeriteweekly"
            set slot 4 of {_gui} to book named " " with lore "%nl%%nl%%nl%     &fWeekly Quest%nl%     &7Collect Azerite on Island Expeditions.%nl% %nl% %nl%     <##fdd002>Azerite Gathered:     &f%{_azeriteTooltip}%/%{_azeriteCollect}%%nl% %nl% %nl% %nl%     <##fdd002>Reward:%nl%     &fî¨ <##a335ee>[Humming Azerite Heart]%nl%        î¦&f(3500 Azerite)"
            set slot 12 of {_gui} to diamond named "<##23fa02>Normal Difficulty" with lore "&7Click here to set sail for a <##00ff00>Normal%nl%&7difficulty Island Expedition.%nl% %nl%&7Enemies on this difficulty will have%nl%&fnormal &7amounts of health.%nl% %nl%&7Recommended Item Level: &f50%nl% %nl%&7Rewards:%nl%&8- &f600 Player EXP%nl%&8- &fî© <##00ff00>[Small Azerite Cluster]%nl%      &f(150 Azerite)" with nbt from "{""minecraft:custom_model_data"":{floats:[47.0f]}}"
            set slot 13 of {_gui} to diamond named "<##0382ff>Heroic Difficulty" with lore "&7Click here to set sail for a <##0070dd>Heroic%nl%&7difficulty Island Expedition.%nl% %nl%&7Enemies on this difficulty will have%nl%&fhigh &7amounts of health.%nl% %nl%&7Recommended Item Level: &f70%nl% %nl%&7Rewards:%nl%&8- &f1300 Player EXP%nl%&8- &fî± <##0070dd>[Glowing Azerite Crystal]%nl%      &f(300 Azerite)" with nbt from "{""minecraft:custom_model_data"":{floats:[48.0f]}}"
            set slot 14 of {_gui} to diamond named "<##ae38ff>Mythic Difficulty" with lore "&7Click here to set sail for a <##a335ee>Mythic%nl%&7difficulty Island Expedition.%nl% %nl%&7Choose this difficulty to face a%nl%&fchallenging &7Island Expedition.%nl% %nl%&7Recommended Item Level: &f100%nl% %nl%&7Rewards:%nl%&8- &f2000 Player EXP%nl%&8- &fî° <##0070dd>[Glowing Azerite Geode]%nl%      &f(450 Azerite)" with nbt from "{""minecraft:custom_model_data"":{floats:[49.0f]}}"
            set slot 16 of {_gui} to light blue stained glass pane named "&bPVP" with lore "&7Click here to set sail for a &fPVP%nl%&7Island Expedition and race against%nl%&7other players for Azerite.%nl% %nl%&7You can queue &fsolo &7or with a party%nl%&7of up to &ftwo &7players.%nl% %nl%&7Rewards:%nl%&8- &f1300 Player EXP%nl%&8- &fî± <##0070dd>[Glowing Azerite Crystal]%nl%      &f(300 Azerite)%nl% %nl%&7COMING IN 8.4.0:%nl%&7Tournament of Elements%nl% %nl%&câ Not Available"
            add "                                                        " to lore of slot 4 of {_gui}
            loop 6 times:
                add " " to lore of slot 4 of {_gui}
            set tooltip style of slot 4 of {_gui} to {_tooltip}
            set string tag "Difficulty" of custom nbt of slot 4 of {_gui} to "Normal"
            set string tag "Difficulty" of custom nbt of slot 5 of {_gui} to "Heroic"
            set string tag "Difficulty" of custom nbt of slot 6 of {_gui} to "Mythic"
            open {_gui} to player

on inventory click:
    if player's current inventory = metadata tag "islandExpeditions" of player:
        cancel event
        if (index of event-slot) is between 12 and 14:
            set {_partymembers::*} to party members of party of player
            set {_partymembers::*} to player if {_partymembers::*} is not set
            set {_size} to size of {_partymembers::*}
            loop {_partymembers::*}:
                send " " to loop-value
                send " &bQueue for Island Expedition with current party?" to loop-value
                send " <##40eb34>[YES] &e(0/%{_size}%)" to loop-value
                send " " to loop-value
            stop
            set {_difficulty} to name of event-slot
            replace all " Difficulty" in {_difficulty} with ""
            set {_partymembers::*} to party members of party of player
            set {_partymembers::*} to player if {_partymembers::*} is not set
            send "&bYou are now queued for an Island Expedition." to {_partymembers::*}

on inventory close:
    if player's current inventory = metadata tag "islandExpeditions" of player:
        if cooldown "Flynn Fairwind-Farewell%player%" is finished:
            create cooldown "Flynn Fairwind-Farewell%player%" for 2 seconds
            set {_farewell} to a random integer between 1 and 7
            if {_farewell} = 1:
                set {_sound} to "npc.flynnfairwind.farewell_dontlookback"
            else if {_farewell} = 2:
                set {_sound} to "npc.flynnfairwind.farewell_eyesonthehorizon"
            else if {_farewell} = 3:
                set {_sound} to "npc.flynnfairwind.farewell_letsgetpaid"
            else if {_farewell} = 4:
                set {_sound} to "npc.flynnfairwind.farewell_nextround"
            else if {_farewell} = 5:
                set {_sound} to "npc.flynnfairwind.farewell_powderdry"
            else if {_farewell} = 6:
                set {_sound} to "npc.flynnfairwind.farewell_seeyouaround"
            else if {_farewell} = 7:
                set {_sound} to "npc.flynnfairwind.farewell_watchyourback"
            play sound {_sound} with volume 3 and pitch 1 to player
        clear metadata tag "islandExpeditions" of player

#To do:

#When difficulty is selected, play ship sail sound
#Send message: You are now queued for Island Expedition with (players from party)

on rightclick on an armor stand:
    if string tag "AzeriteInstance" of custom nbt of clicked entity is set:
        #clear metadata value "cast" of player
        AzeriteOreMine(player, event-entity)

function AzeriteOreMine(p: entity, e: entity, team: string = "Ally"):
    if metadata value "IslandExpeditionInstance" of {_p} = string tag "AzeriteInstance" of custom nbt of {_e}:
        set {_instance} to metadata value "IslandExpeditionInstance" of {_p}
        set {_typeOfOre} to string tag "AzeriteVeinType" of custom nbt of {_e}
        set {_azeriteItem} to yaml value "Models.%{_typeOfOre}%" in "AzeriteModels"

        if {_typeOfOre} = "Crystal":
            set {_azerite} to 270
            set {_casttime} to 4 seconds
            set {_above} to 5
        else if {_typeOfOre} = "Chunk":
            set {_azerite} to 190
            set {_casttime} to 3 seconds
            set {_above} to 2
        else if {_typeOfOre} = "Shard":
            set {_azerite} to 110
            set {_casttime} to 2 seconds
            set {_above} to 1
        else if {_typeOfOre} = "Chest":
            set {_azerite} to 200
            set {_casttime} to 3 seconds
            set {_above} to 1

        set {_distance} to 6
        set {_castTimeValue} to "%{_casttime}%"
        replace all " seconds" and " second" in {_castTimeValue} with ""
        set {_castTimeValue} to {_castTimeValue} parsed as number
        set {_originalCastTimeValue} to {_castTimeValue}
        
        if metadata value "cast" of {_p} is not set:
            set metadata value "mining" of {_p} to true
            set metadata value "cast" of {_p} to {_casttime}
            set {_break} to 0
            if {_typeOfOre} = "Chest":
                play sound "azerite.chest_loop" with volume 2 and pitch 1 to {_p}
            while metadata value "mining" of {_p} = true:
                if metadata value "channeling" of {_p} is set:
                    clear metadata value "channeling" of {_p}
                if metadata value "cast" of {_p} is not set:
                    clear metadata value "mining" of {_p}
                    stop sound "azerite.chest_loop" for {_p}
                    stop
                if distance between {_p} and {_e} > {_distance}:
                    stop sound "azerite.chest_loop" for {_p}
                    stop loop
                if {_casttime} > 0 seconds:
                    set metadata value "casttimeleft" of {_p} to {_casttime}
                    send action bar "Mining... %{_casttime}% " to {_p}
                    if {_castTimeValue} is divisible by 1:
                        make {_p} swing their hand
                        add 1/{_originalCastTimeValue} to {_break}
                        if {_typeOfOre} != "Chest":
                            play sound "misc.mine_ore" with volume 2 and pitch 1 on {_e}
                            draw 20 block particle using diamond block at location {_above} above {_e} with offset vector({_above}/5, {_above}/2, {_above}/5) with extra 0.04
                            draw 20 block particle using gold block at location {_above} above {_e} with offset vector({_above}/5, {_above}/2, {_above}/5) with extra 0.04
                        else:
                            play sound "entity.zombie.attack_wooden_door" with volume 2 and pitch 2 on {_e}
                            draw 10 block particle using jungle wood at location {_above} above {_e} with offset vector({_above}/5, {_above}/2, {_above}/5) with extra 0.04
                    wait 0.1 seconds
                    remove 0.1 seconds from {_casttime}
                    remove 0.1 from {_castTimeValue}
                else:
                    clear metadata value "mining" of {_p}
                    send action bar "" to {_p}
        else:
            stop
            
        clear metadata value "mining" of {_p}
        clear metadata value "cast" of {_p}
        clear metadata value "casttime" of {_p}
        
        if {_casttime} > 0 seconds:
            send action bar "&cCancelled" to {_p}
            stop sound "azerite.chest_loop" for {_p}
            stop

        azeriteAddIslands({_p}, {_instance}, {_typeOfOre}, {_azerite}, "Ally")
        set {_e}'s helmet to air
        clear string tag "AzeriteInstance" of custom nbt of {_e}
        if {_typeOfOre} = "Chest":
            set {_tracker} to EntityTrackerRegistry.registry({_e}).tracker("azeritechest")
            if {_tracker} is set:
                {_tracker}.animate("chestopen")
                play sound "block.chest.open" with volume 2 and pitch 2 on {_e}
                stop sound "azerite.chest_loop" for {_p}
                wait 3 seconds
                add nbt from "{Invisible:1b,Marker:1b}" to nbt of {_e}
                {_tracker}.despawn()
                play sound "entity.zombie.break_wooden_door" with volume 2 and pitch 2 on {_e}
        #Spawn text display or armor stand here and animate (Text will get bigger and OPACITY (FADE) slowly turns to 0)
        #On azerite collect, do not remove the entity, remove the tags. When aezrite detector is online, show all azerite on dynmap
    else:
        send "&cYou are not in this Island Expedition instance to take this action." to {_p}
        play sound "block.glass.break" with volume 3 and pitch 1 to {_p}

on damage:
    if metadata value "mining" of victim is set:
        clear metadata value "mining" of victim

function azeriteCollectedTextTransform(id: integer, partyMembers: players):
    loop 10 times:
        move entity with id {_id} by 0 700 0 for {_partyMembers::*}
        set {_packet} to raw metadata packet with id {_id}
        send packet {_packet} to {_partyMembers::*}
        wait 1 tick
    remove fake entity with id {_id} for {_partyMembers::*}
        
function azeriteAddIslands(p: player, instance: string, azeriteType: string, azerite: integer, team: string):
    play sound "azerite.collect" with volume 2 and pitch 1 at {_p}
    send "<##fff200>+%{_azerite}% Azerite Collected <##e8ce81>from Azerite %{_azeriteType}%" to {_p}
    add {_azerite} to {azeriteCollected%{_team}%::%{_instance}%}
    set {_worthAzerite} to 0
    set line 7 of {_p}'s fastboard to "<##3aff17>Ally: &f%{azeriteCollectedAlly::%{_instance}%}% | <##ff1742>Enemy: &f%{azeriteCollectedEnemy::%{_instance}%}%"
    set line 10 of {_p}'s fastboard to "&fWorth î  &b%{_worthAzerite}% &fAzerite."

    
    set {_partyMembers::*} to all players in world of {_p}
    loop {_partyMembers::*}:
        set {_id} to random integer between 0 and 999999
        spawn fake text display entity at location above loop-value for {_partyMembers::*} with id {_id}
        set {_packet} to raw metadata packet with id {_id}
        set {_text} to mini message from "<##e8ce81>+%{_azerite}% Azerite Collected"
        add data from "display text %{_text}%" to packet {_packet}
        add data from "display billboard center" to packet {_packet}
        add data from "display brightness 15 15" to packet {_packet}
        send packet {_packet} to {_partyMembers::*}
        azeriteCollectedTextTransform({_id}, {_partyMembers::*})

    #add to yaml here: azerite collected by player, type of azerite interacted with, enemies kileld etc

on TimeSkipEvent:
    set {_world} to event.getWorld()
    if isWorldIsland({_world}) = true:
        if {allowChangeConditions::%{_world}%} != true:
            broadcast "AAAA"
            cancel event

on WeatherChangeEvent:
    set {_world} to event.getWorld()
    if isWorldIsland({_world}) = true:
        if {allowChangeConditions::%{_world}%} != true:
            broadcast "BBBB"
            cancel event
        else:
            clear {allowChangeConditions::%{_world}%}
            broadcast "allowed"

on block break:
    if isWorldIsland(player's world) = true:
        cancel event

on block place:
    if isWorldIsland(player's world) = true:
        cancel event

on rightclick:
    if isWorldIsland(player's world) = true:
        cancel event
    if "%regions at player%" contains "IslandShipMap":
        cancel event

on leftclick:
    if "%regions at player%" contains "IslandShipMap":
        cancel event
on combust:
    if isWorldIsland(event-world) = true:
        cancel event

on region enter:
    if "%event-region%" contains "beachdocksship":
        if metadata value "AtDocks" of player is not set:
            set metadata value "AtDocks" of player to true
            seagullsAmbientSounds(player)

on region exit:
    wait 1 tick
    if "%regions at player%" does not contain "beachdocksship":
        clear metadata value "AtDocks" of player

on skript stop:
    load yaml "plugins/Skript/islandexpeditions/IslandList" as "IslandsClear"
    set {_islandList::*} to yaml list "Islands" in "IslandsClear"
    unload yaml "IslandsClear"
    loop {_islandList::*}:  
        loop all worlds where ["%input%" contains "%loop-value%"]:
            if "%loop-value-2%" != "%loop-value-1%":
                teleport all players in world "%loop-value-2%" to {@safeworld}
                deleteworld "%loop-value-2%"



command /ieconfig [<string>] [<string>] [<string>] [<string>] [<integer>]:
    trigger:
        if player's name = "Pehrek":
            if arg-1 is set:
                if arg-2 is set:
                    if arg-3 is set:
                        if arg-4 is set:

                            set {_type} to arg-3
                            set {_island} to arg-1
                            set {_direction} to arg-4
                            load yaml "plugins/Skript/islandexpeditions/%arg-1%/Locations.yml" as "%arg-1%Locations-%player%"

                            if arg-2 = "addlocation":
                                set {_loc} to player's location
                                set yaml value "Locations.%{_type}%.%{_direction}%.%arg-5%.x" in "%arg-1%Locations-%player%" to x-coordinate of {_loc}
                                set yaml value "Locations.%{_type}%.%{_direction}%.%arg-5%.y" in "%arg-1%Locations-%player%" to y-coordinate of {_loc}
                                set yaml value "Locations.%{_type}%.%{_direction}%.%arg-5%.z" in "%arg-1%Locations-%player%" to z-coordinate of {_loc}
                                send "&aSet the location for &f%{_type}% &ain &f%{_direction}% &aIsland &f%arg-1% &ato &f%{_loc}%&a." to player
                            else if arg-2 = "addtotal":
                                set yaml value "TotalLocations.%{_type}%.%{_direction}%" in "%arg-1%Locations-%player%" to arg-5
                                send "&aSet the total locations for &f%{_type}% &ain &f%{_direction}% &aIsland &f%arg-1% &ato &f%arg-5%&a." to player
                            else if arg-2 = "border":
                                set yaml value "WorldBorderRadius" in "%arg-1%Locations-%player%" to arg-5
                                send "&aSet the border radius for Island &f%arg-1% &ato &f%arg-5%&a." to player
                            
                            save yaml "%arg-1%Locations-%player%"
                            unload yaml "%arg-1%Locations-%player%"

                        else:
                            send "&cArg-4 must be provided. (Longitude/Latitude)" to player
                    else:
                        send "&cArg-3 must be provided. (ShipAlly/ShipEnemy)" to player
                else:
                    send "&cArg-2 must be provided. (addlocation/addtotal/border)"
            else:
                send "&cArg-1 must be an Island Expedition map." to player
        else:
            send "&cYou cannot use this command." to player

command /addisland [<string>]:
    trigger:
        if player's name = "Pehrek":
            if arg-1 is set:
                load yaml "plugins/Skript/islandexpeditions/IslandList" as "IslandList"
                add arg-1 to yaml list "Islands" in "IslandList"
                save yaml "IslandList"
                unload yaml "IslandList"
                send "&aSuccessfully added &f%arg-1% &aas a new Island Expedition map."
            else:
                send "&cArg-1 must be an Island Expedition map." to player
        else:
            send "&cYou cannot use this command." to player

command /addazerite [<string>] [<string>]:
    trigger:
        if player's name = "Pehrek":
            if arg-1 is set:
                if arg-2 is set:
                    set {_island} to arg-1
                    load yaml "plugins/Skript/islandexpeditions/%{_island}%/Azerite" as "%{_island}%Azerite"
                    set {_size} to size of yaml node keys "Azerite.%arg-2%" in "%{_island}%Azerite" + 1
                    set {_loc} to player's location
                    set yaml value "Azerite.%arg-2%.%{_size}%.Location.X" in "%{_island}%Azerite" to x-coordinate of {_loc}
                    set yaml value "Azerite.%arg-2%.%{_size}%.Location.Y" in "%{_island}%Azerite" to y-coordinate of {_loc}
                    set yaml value "Azerite.%arg-2%.%{_size}%.Location.Z" in "%{_island}%Azerite" to z-coordinate of {_loc}
                    set yaml value "Azerite.%arg-2%.%{_size}%.Location.Pitch" in "%{_island}%Azerite" to pitch of {_loc}
                    set yaml value "Azerite.%arg-2%.%{_size}%.Location.Yaw" in "%{_island}%Azerite" to yaw of {_loc}
                    save yaml "%{_island}%Azerite"             
                    unload yaml "%{_island}%Azerite"
                else:
                    send "&cArg-2 must be set." to player
            else:
                send "&cArg-1 must be an Island Expedition map." to player
        else:
            send "&cYou cannot use this command." to player

command /azeriteset [<string>] [<string>] [<integer>]:
    trigger:
        if player's name = "Pehrek":
            set {_island} to arg-1
            load yaml "plugins/Skript/islandexpeditions/%{_island}%/Azerite" as "%{_island}%Azerite"
            set {_size} to arg-3
            set {_loc} to player's location
            set yaml value "Azerite.%arg-2%.%{_size}%.Location.X" in "%{_island}%Azerite" to x-coordinate of {_loc}
            set yaml value "Azerite.%arg-2%.%{_size}%.Location.Y" in "%{_island}%Azerite" to y-coordinate of {_loc}
            set yaml value "Azerite.%arg-2%.%{_size}%.Location.Z" in "%{_island}%Azerite" to z-coordinate of {_loc}
            set yaml value "Azerite.%arg-2%.%{_size}%.Location.Pitch" in "%{_island}%Azerite" to pitch of {_loc}
            set yaml value "Azerite.%arg-2%.%{_size}%.Location.Yaw" in "%{_island}%Azerite" to yaw of {_loc}
            save yaml "%{_island}%Azerite"             
            unload yaml "%{_island}%Azerite"
        else:
            send "&cYou cannot use this command." to player

command /showazerite [<string>]:
    trigger:
        if player's name = "Pehrek":
            set {_island} to arg-1
            load yaml "plugins/Skript/islandexpeditions/%{_island}%/Azerite" as "%{_island}%Azerite"
            loop yaml node keys "Azerite" in "%{_island}%Azerite":
                set {_model} to yaml value "Models.%loop-value%" in "AzeriteModels"
                loop yaml node keys "Azerite.%loop-value%" in "%{_island}%Azerite":
                    set {_azeriteIndex} to loop-value-2 parsed as integer
                    set {_azeriteType} to loop-value-1
                    set {_azeriteLocX} to yaml value "Azerite.%{_azeriteType}%.%loop-value-2%.Location.X" in "%{_island}%Azerite"
                    set {_azeriteLocY} to yaml value "Azerite.%{_azeriteType}%.%loop-value-2%.Location.Y" in "%{_island}%Azerite"
                    set {_azeriteLocZ} to yaml value "Azerite.%{_azeriteType}%.%loop-value-2%.Location.Z" in "%{_island}%Azerite"
                    set {_azeriteLocYaw} to yaml value "Azerite.%{_azeriteType}%.%loop-value-2%.Location.Yaw" in "%{_island}%Azerite"
                    set {_azeriteLocPitch} to yaml value "Azerite.%{_azeriteType}%.%loop-value-2%.Location.Pitch" in "%{_island}%Azerite"

                    set {_azeriteLocation} to location({_azeriteLocX}, {_azeriteLocY}, {_azeriteLocZ}, world "%player's world%", {_azeriteLocYaw}, {_azeriteLocPitch})
                    set {_yShift} to yaml value "Attributes.%{_azeriteType}%.YShift" in "AzeriteAttributes"
                    increase {_azeriteLocation}'s y-coordinate by {_yShift}

                    spawn armor stand at {_azeriteLocation} with nbt from "{Invisible:1b,NoGravity:1b,Invulnerable:1b}"
                    set {_scaleAttribute} to yaml value "Attributes.%{_azeriteType}%.Scale" in "AzeriteAttributes"
                    set helmet of last spawned armor stand to {_model}
                    set scale attribute of last spawned armor stand to {_scaleAttribute}
                    set pitch of last spawned armor stand to {_pitch}
                    set yaw of last spawned armor stand to {_yaw}
                    set int tag "AzeriteIndex" of custom nbt of last spawned armor stand to {_azeriteIndex}
                    set int tag "AzeriteId" of custom nbt of last spawned armor stand to {_azeriteId}
                    set string tag "AzeriteVeinType" of custom nbt of last spawned armor stand to {_azeriteType}

            unload yaml "%{_island}%Azerite"
        else:
            send "&cYou cannot use this command." to player

command /addazeritemodel [<string>]:
    trigger:
        if player's name = "Pehrek":
            if arg-1 is set:
                load yaml "plugins/Skript/islandexpeditions/AzeriteModels" as "AzeriteModels"
                set yaml value "Models.%arg-1%" in "AzeriteModels" to player's tool
                save yaml "AzeriteModels"
            else:
                send "&cArg-1 must be an Island Expedition map." to player
        else:
            send "&cYou cannot use this command." to player

command /addazeriteattributes [<string>] [<string>] [<string>]:
    trigger:
        if player's name = "Pehrek":
            if arg-1 is set:
                if arg-2 is set:
                    if arg-3 is set:
                        load yaml "plugins/Skript/islandexpeditions/AzeriteAttributes" as "AzeriteAttributes"
                        set yaml value "Attributes.%arg-1%.%arg-2%" in "AzeriteAttributes" to arg-3
                        save yaml "AzeriteAttributes"
                    else:
                        send "&cArg-3 must be a number." to player
                else:
                    send "&cArg-2 must be an attribute. (YShift/Scale)" to player
            else:
                send "&cArg-1 must be an Azerite type." to player
        else:
            send "&cYou cannot use this command." to player

command /addislandproperties [<string>] [<string>] [<string>] [<number>]:
    trigger:
        if player's name = "Pehrek":
            set {_island} to arg-1
            set {_property} to arg-2
            set {_type} to arg-3
            set {_value} to arg-4
            load yaml "plugins/Skript/islandexpeditions/%{_island}%/Properties" as "%{_island}%Properties"
            set yaml value "Properties.%{_property}%.%{_type}%" in "%{_island}%Properties" to {_value}
            save yaml "%{_island}%Properties"
            unload yaml "%{_island}%Properties"