#STAT ICONS & COLORS:

#PRIMARY:

#AGILITY&a<##59e393#5ee359>
#INTELLECT&b<##59e3c0#59c1e3>
#STRENGTH&c<##e36759#e35959>

#SECONDARY:
#HEALTH<##c0ff02>
#DAMAGE<##f74428>
#RESISTANCE<##ffef45>
#MOBILITY&f
#UTILITY<##ae78d0>
#CROWD CONTROL<##58c3f5>
#VERSATILITY<##e3ebff>
#MASTERY<##f53b98>
#CRITICAL HIT<##fca417>
#ELEMENT<##d5ff57>
#HASTE<##19943e>
#AVOIDANCE<##2154ad>

#ARTIFACT FORMULA
#5 STAR
#Substats: s(x) = 0,186 * 4,7385x


function Artifact(artifactType: string, starLevel: integer, itemLevel: integer) :: item:
    set {_substatValues::*} to 0.186, 0.174, 0.162 and 0.15
    set {_substats} to 3
    set {_stats::*} to "<##c0ff02> x Health", "<##f74428> x Damage", "<##ffef45> x Resistance", "&f x Mobility", "<##ae78d0> x Utility", "<##58c3f5> x Crowd Control", "<##e3ebff> x Versatility", "<##f53b98> x Mastery", "<##fca417> x Critical Hit", "<##d5ff57> x Element", "<##19943e> x Haste" and "<##2154ad> x Avoidance"
    if {_starLevel} = 1:
        set {_starLevelLore} to "&e★"
        set {_rarity} to "<##cccccc>Common"
        set {_rarityPL} to "<##cccccc>Częsty"
        set {_loreSubstats} to "&8&oby a random value. One star artifacts%nl%&8&oalways start with one substat."
        set {_loreSubstatsPL} to "&8&oo losową wartość. Jednogwiazdkowe artefakty%nl%&8&ozawsze zaczynają z jedną statystyką podrzędną."
        set {_substats} to 1
    else if {_starLevel} = 2:
        set {_starLevelLore} to "&e★★"
        set {_rarity} to "<##1fef00>Uncommon"
        set {_rarityPL} to "<##1fef00>Nieczęsty"
        set {_loreSubstats} to "&8&oby a random value. Two star artifacts%nl%&8&ostart with one substat and have a%nl%&8&o33.33%% chance to start with two."
        set {_loreSubstatsPL} to "&8&oo losową wartość. Dwugwiazdkowe artefakty%nl%&8&ozaczynają z jedną statystyką podrzędną%nl%&8&oi mają 33.33%% szans, żeby zacząć z dwiema."
        set {_substats} to 1
        chance of 1/3%%:
            set {_substats} to 2
    else if {_starLevel} = 3:
        set {_starLevelLore} to "&e★★★"
        set {_rarity} to "<##0070dd>Rare"
        set {_rarityPL} to "<##0070dd>Rzadki"
        set {_loreSubstats} to "&8&oby a random value. Three star artifacts%nl%&8&ostart with two substats and have a%nl%&8&o33.33%% chance to start with three."
        set {_loreSubstatsPL} to "&8&oo losową wartość. Trzygwiazdkowe artefakty%nl%&8&ozaczynają z dwiema statystykami podrzędnymi%nl%&8&oi mają 33.33%% szans, żeby zacząć z trzema."
        set {_substats} to 2
        chance of 1/3%%:
            set {_substats} to 3
    else if {_starLevel} = 4:
        set {_starLevelLore} to "&e★★★★"
        set {_rarity} to "<##a335ee>Epic"
        set {_rarityPL} to "<##a335ee>Epicki"
        set {_loreSubstats} to "&8&oby a random value. Four star artifacts%nl%&8&oalways start with three substats."
        set {_loreSubstatsPL} to "&8&oo losową wartość. Czterogwiazdkowe artefakty%nl%&8&ozawsze zaczynają z trzema statystykami podrzędnymi."
        set {_substats} to 3
    else if {_starLevel} = 5:
        set {_starLevelLore} to "&e★★★★★"
        set {_rarity} to "<##ff8000>Legendary"
        set {_rarityPL} to "<##ff8000>Legendarny"
        set {_loreSubstats} to "&8&oby a random value. Five star artifacts%nl%&8&ostart with three substats and have a%nl%&8&o33.33%% chance to start with four."
        set {_loreSubstatsPL} to "&8&opodrzędną o losową wartość. Pięciogwiazdkowe%nl%&8&oartefakty zaczynają z trzema statystykami%nl%&8&opodrzędnymi i mają 33.33%% szans, żeby zacząć%nl%&8&oz czterema."
        set {_substats} to 3
        chance of 1/3%%:
            set {_substats} to 4

    #Make a .yaml with loot table and items --- 21.12.2024

    set {_artifactInfo} to "&fUpgraded: +0%nl%&m&8-------------------------------------------%nl%&7Star Level: &e%{_starLevelLore}%%nl%&8&o(!) Every five upgrades raises a random substat%nl%%{_loreSubstats}%"
    set {_artifactLoreScorched} to "%nl%<##ff7045>2 Set Bonus: <##ff3014>Lava &7and <##ff4d00>Fire &7damage dealt is%nl%&7increased by &f8%%&7.%nl%<##ff7045>4 Set Bonus: &7Using your ultimate ability increases%nl%&7your <##f53b98> Mastery &7by &f30%% &7for &f10 sec&7. This effect%nl%&7has a &f20 sec &7cooldown.%nl% %nl%%{_artifactInfo}%"
    set {_artifactLoreArcaneMysteries} to "%nl%<##7154b8>2 Set Bonus: &7Gain &f40 <##f53b98> Mastery &7if it is your highest stat.%nl%<##7154b8>4 Set Bonus: &7Gain a fluctuating &f+2%% &7elemental damage bonus%nl%&7every &f2 sec&7. &7After reaching an increase of &f+16%%&7,%nl%&7the effect will persist for &f5 sec &7before it will rapidly%nl%&7start declining every &f1 sec &7and ultimately reset.%nl% %nl%&7When you use your Ultimate ability, double the%nl%&7current effect and extend its duration by &f10 sec&7.%nl%&7The elemental damage bonus is halved if your element%nl%&7is not <##512989>Magic&7, <##431d53>Ghost &7or <##333333>Dark&7.%nl% %nl%%{_artifactInfo}%"
    set {_artifactLoreMarksmanship} to "%nl%<##aad372>2 Set Bonus: &7Damage dealt while at least &f20 &7blocks%nl%&7from the target is increased by &f12%%&7.%nl%<##aad372>4 Set Bonus: &7Increases damage dealt by ranged%nl%&7weapons and projectiles by &f35%%&7.%nl% %nl%%{_artifactInfo}%"
    set {_artifactLoreDeepfrost} to "%nl%<##73b7ff>2 Set Bonus: <##add8e6>Ice &7damage dealt is increased by &f15%%&7.%nl%<##73b7ff>4 Set Bonus: <##fca417> Critically Striking &7an enemy will grant%nl%&7you &f+3%% &7Critical Damage for &f20 sec&7. Each following%nl%<##fca417> Critical Hit &7will increase this bonus by an additional%nl%&f3%%&7, stacking up to &f12 &7times.%nl% %nl%%{_artifactInfo}%"
    
    set {_artifactInfoPL} to "&fUlepszono: +0%nl%&m&8-------------------------------------------%nl%&7Gwiezdny Poziom: &e%{_starLevelLore}%%nl%&8&o(!) Co pięć ulepszeń zwiększa losową statystykę%nl%%{_loreSubstatsPL}%"
    set {_artifactLoreScorchedPL} to "%nl%<##ff7045>2-Komplet Bonus: &7Zwiększa zadawane obrażenia <##ff3014>Lawy%nl%&7oraz <##ff4d00>Ognia &7o &f8%%&7.%nl%<##ff7045>4-Komplet Bonus: &7Użycie Superumiejętności zwiększy%nl%&7twoje <##f53b98> Mistrzostwo &7o &f30%% &7na &f10 sek&7. Ten efekt ma%nl%&f20 sek &7cooldown.%nl% %nl%%{_artifactInfoPL}%"
    set {_artifactLoreArcaneMysteriesPL} to "%nl%<##7154b8>2-Komplet Bonus: &7Zyskaj &f40 <##f53b98> Mistrzostwa &7jeśli jest%nl%&7ono twoją najwyższą statystyką.%nl%<##7154b8>4-Komplet Bonus: &7Zyskaj oscylujący bonus &f+2%% &7do%nl%&7zadawanych żywiołowych obrażeń co &f2 sek&7. &7Po%nl%&7uzyskaniu bonusu &f+16%%&7, efekt zostanie aktywny%nl%&7przez &f5 sek&7, zanim zacznie się zmniejszać co &f1 sek%nl%&7i ostatecznie zresetuje.%nl% %nl%&7Kiedy używasz swojej Superumiejętności, podwój swój%nl%&7obecny bonus tego Kompletu i przedłuż czas jego%nl%&7trwania o &f10 sek&7. Bonus do żywiołowych obrażeń jest%nl%&7zmniejszony o połowę, gdy twóim żywiołem nie jest%nl%<##512989>Magia&7, <##431d53>Duch &7lub <##333333>Mrok&7.%nl% %nl%%{_artifactInfoPL}%"
    set {_artifactLoreMarksmanshipPL} to "%nl%<##aad372>2-Komplet Bonus: &7Zwiększa zadawane obrażenia%nl%&7o &f15%%&7, gdy znajdujesz się conajmniej &f20 &7bloków%nl%&7od celu.%nl%<##aad372>4-Komplet Bonus: &7Zwiększa obrażenia zadawane%nl%&7przez zasięgowe bronie i pociski o &f35%%&7.%nl% %nl%%{_artifactInfoPL}%"
    set {_artifactLoreDeepfrostPL} to "%nl%<##73b7ff>2-Komplet Bonus: &7Obrażenia <##add8e6>Lodu &7są zwiększone o &f15%%&7.%nl%<##73b7ff>4-Komplet Bonus: &7Zadanie <##fca417> Krytycznego Ciosu &7wrogowi%nl%&7przyzna ci &f+3%% &7Krytycznych Obrażeń na &f20 sek&7.%nl%&7Każdy kolejny <##fca417> Cios Krytyczny &7zwiększy ten bonus%nl%&7o kolejne &f3%%&7, stackując się aż do &f12 &7razy.%nl% %nl%%{_artifactInfoPL}%"
    
    #Flower Artifacts
    if {_artifactType} = "Scorched Lavaflower":
        set {_artifact} to green dye named "<##fa5320>Scorched Lavaflower" with lore "%{_rarity}% Flower Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Scorched Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[10.0f]}},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreScorched}
    else if {_artifactType} = "Hushed Nightshade":
        set {_artifact} to green dye named "<##7154b8>Hushed Nightshade" with lore "%{_rarity}% Flower Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Arcane Mysteries Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[11.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreArcaneMysteries}
    else if {_artifactType} = "Marksman's Anemone":
        set {_artifact} to green dye named "<##aad372>Marksman's Anemone" with lore "%{_rarity}% Flower Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Marksmanship Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[12.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreMarksmanship}
    else if {_artifactType} = "Morning Frost":
        set {_artifact} to green dye named "<##73b7ff>Morning Frost" with lore "%{_rarity}% Flower Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Deepfrost Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[13.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreDeepfrost}

    #PL Flower Artifacts
    if {_artifactType} = "Spopielony Lawokwiat":
        set {_artifact} to green dye named "<##fa5320>Spopielony Lawokwiat" with lore "%{_rarityPL}% Artefakt Kwiatu%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Spopielony Komplet%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[10.0f]}},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreScorchedPL}
    else if {_artifactType} = "Skryty Cieniokwiat":
        set {_artifact} to green dye named "<##7154b8>Skryty Cieniokwiat" with lore "%{_rarityPL}% Artefakt Kwiatu%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Komplet Nieprzeniknionych Tajemnic%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[11.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreArcaneMysteriesPL}
    else if {_artifactType} = "Anemon Strzelca":
        set {_artifact} to green dye named "<##aad372>Anemon Strzelca" with lore "%{_rarityPL}% Artefakt Kwiatu%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Komplet Strzelca%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[12.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreMarksmanshipPL}
    else if {_artifactType} = "Poranny Mróz":
        set {_artifact} to green dye named "<##73b7ff>Poranny Mróz" with lore "%{_rarityPL}% Artefakt Kwiatu%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Komplet Głębokiego Mrozu%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[13.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreDeepfrostPL}

    #Orb Artifacts
    else if {_artifactType} = "Searing Eye":
        set {_artifact} to firework star named "<##fa5320>Searing Eye" with lore "%{_rarity}% Orb Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Scorched Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[1.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreScorched}
    else if {_artifactType} = "Clairvoyance":
        set {_artifact} to firework star named "<##7154b8>Clairvoyance" with lore "%{_rarity}% Orb Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Arcane Mysteries Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[2.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreArcaneMysteries}
    else if {_artifactType} = "Vision of the Hunt":
        set {_artifact} to firework star named "<##aad372>Vision of the Hunt" with lore "%{_rarity}% Orb Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Marksmanship Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[3.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreMarksmanship}
    else if {_artifactType} = "Glacial Heart":
        set {_artifact} to firework star named "<##73b7ff>Glacial Heart" with lore "%{_rarity}% Orb Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Deepfrost Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[4.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreDeepfrost}
    #PL Orb Artifacts
    else if {_artifactType} = "Żarzące Oko":
        set {_artifact} to firework star named "<##fa5320>Żarzące Oko" with lore "%{_rarityPL}% Artefakt Kuli%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Spopielony Komplet%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[1.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreScorchedPL}
    else if {_artifactType} = "Przepowiednia":
        set {_artifact} to firework star named "<##7154b8>Przepowiednia" with lore "%{_rarityPL}% Artefakt Kuli%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Komplet Nieprzeniknionych Tajemnic%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[2.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreArcaneMysteriesPL}
    else if {_artifactType} = "Wizja Myślistwa":
        set {_artifact} to firework star named "<##aad372>Wizja Myślistwa" with lore "%{_rarityPL}% Artefakt Kuli%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Komplet Strzelca%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[3.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreMarksmanshipPL}
    else if {_artifactType} = "Oziębłe Serce":
        set {_artifact} to firework star named "<##73b7ff>Oziębłe Serce" with lore "%{_rarityPL}% Artefakt Kuli%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Komplet Głębokiego Mrozu%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[4.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreDeepfrostPL}

    #Phial Artifacts
    else if {_artifactType} = "Charred Contrivance":
        set {_artifact} to glass bottle named "<##fa5320>Charred Contrivance" with lore "%{_rarity}% Phial Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Scorched Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[2.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreScorched}
    else if {_artifactType} = "Umbral Conundrum":
        set {_artifact} to glass bottle named "<##7154b8>Umbral Conundrum" with lore "%{_rarity}% Phial Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Arcane Mysteries Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[3.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreArcaneMysteries}
    else if {_artifactType} = "Archer's Belt Pouch":
        set {_artifact} to glass bottle named "<##aad372>Archer's Belt Pouch" with lore "%{_rarity}% Phial Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Marksmanship Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[4.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreMarksmanship}
    else if {_artifactType} = "Winter's Eon":
        set {_artifact} to glass bottle named "<##73b7ff>Winter's Eon" with lore "%{_rarity}% Phial Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Deepfrost Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[5.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreDeepfrost}

    #PL Phial Artifacts
    else if {_artifactType} = "Rozżarzony Wytwór":
        set {_artifact} to glass bottle named "<##fa5320>Rozżarzony Wytwór" with lore "%{_rarityPL}% Artefakt Fiolki%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Spopielony Komplet%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[2.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreScorchedPL}
    else if {_artifactType} = "Mroczna Enigma":
        set {_artifact} to glass bottle named "<##7154b8>Mroczna Enigma" with lore "%{_rarityPL}% Artefakt Fiolki%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Komplet Nieprzeniknionych Tajemnic%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[3.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreArcaneMysteriesPL}
    else if {_artifactType} = "Bukłak Łucznika":
        set {_artifact} to glass bottle named "<##aad372>Bukłak Łucznika" with lore "%{_rarityPL}% Artefakt Fiolki%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Komplet Strzelca%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[4.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreMarksmanshipPL}
    else if {_artifactType} = "Wieczna Zima":
        set {_artifact} to glass bottle named "<##73b7ff>Wieczna Zima" with lore "%{_rarityPL}% Artefakt Fiolki%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Komplet Głębokiego Mrozu%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[5.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreDeepfrostPL}

    #Scroll Artifacts
    else if {_artifactType} = "Singed Chapter":
        set {_artifact} to book named "<##fa5320>Singed Chapter" with lore "%{_rarity}% Scroll Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Scorched Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[3.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreScorched}
    else if {_artifactType} = "Arcanomicon":
        set {_artifact} to book named "<##7154b8>Arcanomicon" with lore "%{_rarity}% Scroll Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Arcane Mysteries Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[4.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreArcaneMysteries}
    else if {_artifactType} = "Hunter's Manuscript":
        set {_artifact} to book named "<##aad372>Hunter's Manuscript" with lore "%{_rarity}% Scroll Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Marksmanship Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[5.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreMarksmanship}
    else if {_artifactType} = "Icy Memorial":
        set {_artifact} to book named "<##73b7ff>Icy Memorial" with lore "%{_rarity}% Scroll Artifact%nl%<##fdd002>Item Level %{_itemLevel}%%nl%&7Deepfrost Set%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[6.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreDeepfrost}

    #PL Scroll Artifacts
    else if {_artifactType} = "Osmolone Pismo":
        set {_artifact} to book named "<##fa5320>Osmolone Pismo" with lore "%{_rarity}% Artefakt Zwoju%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Spopielony Komplet%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[3.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreScorchedPL}
    else if {_artifactType} = "Arkanomikon":
        set {_artifact} to book named "<##7154b8>Arkanomikon" with lore "%{_rarity}% Artefakt Zwoju%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Komplet Nieprzeniknionych Tajemnic%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[4.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreArcaneMysteriesPL}
    else if {_artifactType} = "Rękopis Łowcy":
        set {_artifact} to book named "<##aad372>Rękopis Łowcy" with lore "%{_rarity}% Artefakt Zwoju%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Komplet Strzelca%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[5.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreMarksmanshipPL}
    else if {_artifactType} = "Lodowy Memoriał":
        set {_artifact} to book named "<##73b7ff>Lodowy Memoriał" with lore "%{_rarity}% Artefakt Zwoju%nl%<##fdd002>Poziom Przedmiotu %{_itemLevel}%%nl%&7Komplet Głębokiego Mrozu%nl% %nl%" with nbt from "{""minecraft:custom_model_data"":{floats:[6.0f]},""minecraft:custom_data"":{""Artifact"":1b}}"
        set {_artifactLore} to {_artifactLoreDeepfrostPL}

    loop {_substats} times:
        set {_randomStat} to a random element of {_stats::*}
        remove {_randomStat} from {_stats::*}
        set {_randomSubstatValue} to a random element of {_substatValues::*}
        set {_statAmount} to rounded (({_randomSubstatValue} * 4.7385*{_itemLevel})/6)
        replace all " x " in {_randomStat} with " %{_statAmount}% "
        add {_randomStat} to lore of {_artifact}
        set {_nbtText::*} to uncolored {_randomStat} split at " "
        clear {_nbtText::2} and {_nbtText::1} and {_nbtText::0}
        set {_nbtText} to join {_nbtText::*} by " "
        set int tag "Stats;%{_nbtText}%" of nbt of {_artifact} to {_statAmount}
    add {_artifactLore} to lore of {_artifact}
    set {_statList::*} to "Health", "Damage", "Resistance", "Mobility", "Utility", "Crowd Control", "Versatility", "Mastery", "Critical Hit", "Element", "Haste" and "Avoidance"
    loop {_statList::*}:
        if int tag "Stats;%loop-value%" of custom nbt of {_artifact} is set:
            add loop-value to {_artifactStats::*}
    set {_lore::*} to lore of {_artifact}
    set lore of {_artifact} to {_lore::*}
    set int tag "Upgraded" of custom nbt of {_artifact} to 0
    set long tag "Experience" of custom nbt of {_artifact} to 0
    set int tag "ItemLevel" of custom nbt of {_artifact} to {_itemLevel}
    set int tag "StarLevel" of custom nbt of {_artifact} to {_starLevel}
    return {_artifact}

#Generic formula for calculating secondary stat budget
function statFormula(itemLevel: integer) :: number:
    set {_formula} to (1.0136^({_itemLevel}/3)) * 0.287*{_itemLevel}
    return {_formula}

#Formula for calculating secondary stat budget on Ring, Neck, Bracer, Cloak slots
function accessoryGearFormula(itemLevel: integer) :: number:
    set {_formula} to 1 + 0.2*({_itemLevel}^1.5)/3
    return {_formula}

#Formula for calculating health on gear
function healthFormula(itemLevel: integer) :: number:
    set {_healthFormula} to (((0.0337397 * {_itemLevel}) + 1.981137)*(1.15^((1/13.62)*{_itemLevel})))*1.81108
    return {_healthFormula}

function statMultiplierGear(type: string) :: number:
    if {_type} = "accessory":
        set {_multiplier} to 9/16
    else if {_type} = "minorMain":
        set {_multiplier} to 12/16
    else if {_type} = "majorMain":
        set {_multiplier} to 1
    return {_multiplier}

function Gear(gearItem: string, itemType: string, itemLevel: integer, rarity: string, gearType: string) :: item:
    set {_socketColours::*} to "<##ff6969> &7Red Socket", "<##9dff80> &7Green Socket", "<##b96eff> &7Purple Socket", "<##6392ff> &7Blue Socket", "&f &7Prismatic Socket" #"<##ffc830> &7Yellow Socket"
    #Siege of Spawn
    set {_-} to ""
    loop 36 times:
        set {_-} to "%{_-}%&8&m-"

    set {_primaryStatFormula} to 5.16 * (1.26^((1/13.6)*{_itemLevel}))
    set {_healthFormula} to healthFormula({_itemLevel})
    set {_formula} to statFormula({_itemLevel})

    if {_itemType} = "Ring" or "Necklace" or "Bracers" or "Cloak":
        set {_formula} to accessoryGearFormula({_itemLevel})
        set {_multiplier} to statMultiplierGear("accessory")  
    else if {_itemType} = "Boots" or "Shoulders" or "Belt" or "Gloves":
        set {_multiplier} to statMultiplierGear("minorMain")
        set {_formula} to {_formula}*{_multiplier}
    else if {_itemType} = "Helmet" or "Chestplate" or "Leggings" or "Weapon":
        set {_multiplier} to statMultiplierGear("majorMain")
        set {_formula} to {_formula}*{_multiplier}
    
    set {_primaryStat} to {_primaryStatFormula}*{_multiplier}
    set {_secondaryStatBudget} to {_formula}
    set {_health} to {_healthFormula}*{_multiplier}

    if {_gearType} = "Strength":
        set {_primaryIcon} to "<##e35959>"
    else if {_gearType} = "Intellect":
        set {_primaryIcon} to "<##59c1e3>"
    else if {_gearType} = "Agility":
        set {_primaryIcon} to "<##5ee359>"
    
    set {_socketBonusFormula} to 1 + 0.0275*{_itemLevel}
    #DUNGEONS
    #Siege of Spawn
    if {_gearItem} = "Ring of Forbidden Techniques":
        set {_item} to gold nugget named "<##632c99>Ring of Forbidden Techniques" with lore "%{_rarity}% %{_itemType}%%nl%&fBinds when equipped%nl%<##fdd002>Item Level %{_itemLevel}%" with nbt from "{""minecraft:custom_model_data"":{floats:[11.0f]}}"
        set {_stats} to "<##c0ff02> +%round({_health}, 0)% Health%nl%<##f53b98> +%round((19/24)*{_secondaryStatBudget}, 0)% Mastery%nl%<##19943e> +%round((5/24*{_secondaryStatBudget}), 0)% Haste"
        set {_lore} to "&6'A dragon soul once encaged in this signet%nl%&6provides its wielder with unstable powers.'"        
        set {_randomColour} to a random element of {_socketColours::*}
        set {_socket} to "%{_randomColour}%%nl%&7Socket Bonus:  +%round({_socketBonusFormula}, 0)% Mastery"
        set {_socketBonus::*} to "%round({_socketBonusFormula}, 0)% Mastery"
    else if {_gearItem} = "Volcanic Treads":
        set {_item} to leather named "<##a83232>Volcanic Treads" with lore "%{_rarity}% %{_itemType}%%nl%&fBinds when equipped%nl%<##fdd002>Item Level %{_itemLevel}%" with nbt from "{HideFlags:127,CustomModelData:2}"
        set {_stats} to "%{_primaryIcon}% +%round({_primaryStat}, 0)% %{_gearType}%%nl%<##c0ff02> +%round({_health}, 0)% Health%nl%<##fca417> +%round((7/13)*{_secondaryStatBudget}, 0)% Critical Hit%nl%<##f74428> +%round((6/13)*{_secondaryStatBudget}, 0)% Damage"
        set {_lore} to "&6'These volcanic stone boots allow their%nl%&6wearer to safely walk across hot surfaces.'"
    
    #Exp Areas
    else if {_gearItem} = "Spirit of the Woods":
        set {_item} to gold nugget named "<##50b55f>Spirit of the Woods" with lore "%{_rarity}% %{_itemType}%%nl%&fBinds when equipped%nl%<##fdd002>Item Level %{_itemLevel}%" with nbt from "{""minecraft:custom_model_data"":{floats:[12.0f]}}"
        set {_stats} to "<##c0ff02> +%round({_health}, 0)% Health%nl%<##19943e> +%round((1/2)*{_secondaryStatBudget}, 0)% Haste%nl%<##d5ff57> +%round((1/2*{_secondaryStatBudget}), 0)% Element"      
        set {_lore} to " "
        set {_randomColour} to a random element of {_socketColours::*}
        set {_socket} to "%{_randomColour}%%nl%&7Socket Bonus:  +%round({_socketBonusFormula}*0.5, 0)% Haste%nl%&7Socket Bonus:  +%round({_socketBonusFormula}*0.5, 0)% Element"
        set {_socketBonus::*} to "%round({_socketBonusFormula}, 0)% Haste" and "%round({_socketBonusFormula}, 0)% Element"
        set int tag "Stats;Haste" of custom nbt of {_item} to round((1/2)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Element" of custom nbt of {_item} to round((1/2)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Health" of custom nbt of {_item} to round({_health}, 0)
    else if {_gearItem} = "Verdant Blessing":
        set {_item} to gold nugget named "<##50b55f>Verdant Blessing" with lore "%{_rarity}% %{_itemType}%%nl%&fBinds when equipped%nl%<##fdd002>Item Level %{_itemLevel}%" with nbt from "{""minecraft:custom_model_data"":{floats:[14.0f]}}"
        set {_stats} to "<##c0ff02> +%round({_health}, 0)% Health%nl%<##19943e> +%round((1/2)*{_secondaryStatBudget}, 0)% Haste%nl%<##e3ebff> +%round((1/2*{_secondaryStatBudget}), 0)% Versatility"      
        set {_lore} to " "
        set {_randomColour} to a random element of {_socketColours::*}
        set {_socket} to "%{_randomColour}%%nl%&7Socket Bonus:  +%round({_socketBonusFormula}, 0)% Haste"
        set {_socketBonus::*} to "%round({_socketBonusFormula}, 0)% Haste"
        set int tag "Stats;Haste" of custom nbt of {_item} to round((1/2)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Versatility" of custom nbt of {_item} to round((1/2)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Health" of custom nbt of {_item} to round({_health}, 0)
    else if {_gearItem} = "Cizin's Curse":
        set {_item} to gold nugget named "<##e08b22>Cizin's Curse" with lore "%{_rarity}% %{_itemType}%%nl%&fBinds when equipped%nl%<##fdd002>Item Level %{_itemLevel}%"
        set {_stats} to "<##c0ff02> +%round({_health}, 0)% Health%nl%<##fca417> +%round((1/2)*{_secondaryStatBudget}, 0)% Critical Hit%nl%&f +%round((1/2*{_secondaryStatBudget}), 0)% Mobility"      
        set {_lore} to "&6'Feared, yet respected deeply; No soul could%nl%&6ever dream of resting peacefully under the%nl%&6death deity's curse.'"
        set {_randomColour} to a random element of {_socketColours::*}
        set {_socket} to "%{_randomColour}%%nl%&7Socket Bonus:  +%round({_socketBonusFormula}*0.5, 0)% Critical Hit%nl%&7Socket Bonus:  +%round({_socketBonusFormula}*0.5, 0)% Mobility"
        set {_socketBonus::*} to "%round({_socketBonusFormula}, 0)% Critical Hit" and "%round({_socketBonusFormula}, 0)% Mobility"
        set int tag "Stats;Critical Hit" of custom nbt of {_item} to round((1/2)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Mobility" of custom nbt of {_item} to round((1/2)*{_secondaryStatBudget}, 0) 
        set int tag "Stats;Health" of custom nbt of {_item} to round({_health}, 0)
    else if {_gearItem} = "Tangled Boots":
        set {_item} to leather boots named "<##488741>Tangled Boots" with lore "%{_rarity}% %{_itemType}%%nl%&fBinds when equipped%nl%<##fdd002>Item Level %{_itemLevel}%" with nbt from "{HideFlags:127}"
        set {_stats} to "%{_primaryIcon}% +%round({_primaryStat}, 0)% %{_gearType}%%nl%<##c0ff02> +%round({_health}, 0)% Health%nl%<##58c3f5> +%round((6/10)*{_secondaryStatBudget}, 0)% Crowd Control%nl%<##ae78d0> +%round((4/10)*{_secondaryStatBudget}, 0)% Utility"
        set {_lore} to " "
        set int tag "Stats;Crowd Control" of custom nbt of {_item} to round((6/10)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Utility" of custom nbt of {_item} to round((4/10)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Health" of custom nbt of {_item} to round({_health}, 0)
        set int tag "Stats;%{_gearType}%" of nbt of {_item} to round({_primaryStat}, 0)
    else if {_gearItem} = "Vision of the Serpent":
        set {_item} to leather helmet named "<##419623>Vision of the Serpent" with lore "%{_rarity}% %{_itemType}%%nl%&fBinds when equipped%nl%<##fdd002>Item Level %{_itemLevel}%" with nbt from "{HideFlags:127}"
        set {_stats} to "%{_primaryIcon}% +%round({_primaryStat}, 0)% %{_gearType}%%nl%<##c0ff02> +%round({_health}, 0)% Health%nl%&f +%round((7/12)*{_secondaryStatBudget}, 0)% Mobility%nl%<##f74428> +%round((5/12)*{_secondaryStatBudget}, 0)% Damage%nl% %nl%&7Serpent Follower Set%nl%&72 Set Bonus: Increases  Mobility by 5."
        set {_lore} to "&6'...And as the Serpent's precious feathers%nl%&6fluttered with the wind, thus blossomed life%nl%&6on their sacred land.'"
        set {_2setBonus} to "5 Mobility"
        set int tag "Stats;Mobility" of custom nbt of {_item} to round((7/12)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Damage" of custom nbt of {_item} to round((5/12)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Health" of custom nbt of {_item} to round({_health}, 0)
        set int tag "Stats;%{_gearType}%" of nbt of {_item} to round({_primaryStat}, 0)
    else if {_gearItem} = "Quetzalcoatl's Creation":
        set {_item} to leather helmet named "<##c98c12>Quetzalcoatl's Creation" with lore "%{_rarity}% %{_itemType}%%nl%&fBinds when equipped%nl%<##fdd002>Item Level %{_itemLevel}%" with nbt from "{HideFlags:127}"
        set {_stats} to "%{_primaryIcon}% +%round({_primaryStat}, 0)% %{_gearType}%%nl%<##c0ff02> +%round({_health}, 0)% Health%nl%<##ffef45> +%round((3/4)*{_secondaryStatBudget}, 0)% Resistance%nl%<##fca417> +%round((1/4)*{_secondaryStatBudget}, 0)% Critical Hit%nl% %nl%&7Quetzalcoatl's Guardianship Set%nl%&72 Set Bonus: Increases  Resistance by 5."
        set {_lore} to " "
        set {_2setBonus} to "5 Resistance"
        set int tag "Stats;Resistance" of custom nbt of {_item} to round((3/4)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Critical Hit" of custom nbt of {_item} to round((1/4)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Health" of custom nbt of {_item} to round({_health}, 0)
        set int tag "Stats;%{_gearType}%" of nbt of {_item} to round({_primaryStat}, 0)
    else if {_gearItem} = "Grasp of the Foregone Tribe":
        set {_item} to leather named "<##419623>Grasp of the Foregone Tribe" with lore "%{_rarity}% %{_itemType}%%nl%&fBinds when equipped%nl%<##fdd002>Item Level %{_itemLevel}%"
        set {_stats} to "%{_primaryIcon}% +%round({_primaryStat}, 0)% %{_gearType}%%nl%<##c0ff02> +%round({_health}, 0)% Health%nl%<##2154ad> +%round((9/10)*{_secondaryStatBudget}, 0)% Avoidance%nl%<##e3ebff> +%round((1/10)*{_secondaryStatBudget}, 0)% Versatility%nl% %nl%&7Serpent Follower Set%nl%&72 Set Bonus: Increases  Mobility by 5."
        set {_lore} to " "
        set {_2setBonus} to "5 Mobility"
        set int tag "Stats;Avoidance" of custom nbt of {_item} to round((9/10)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Versatility" of custom nbt of {_item} to round((1/10)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Health" of custom nbt of {_item} to round({_health}, 0)
        set int tag "Stats;%{_gearType}%" of nbt of {_item} to round({_primaryStat}, 0)
    else if {_gearItem} = "Guardianship of the Deities":
        set {_item} to leather chestplate named "<##c98c12>Guardianship of the Deities" with lore "%{_rarity}% %{_itemType}%%nl%&fBinds when equipped%nl%<##fdd002>Item Level %{_itemLevel}%" with nbt from "{HideFlags:127}"
        set {_stats} to "%{_primaryIcon}% +%round({_primaryStat}, 0)% %{_gearType}%%nl%<##c0ff02> +%round({_health}, 0)% Health%nl%<##ffef45> +%round((5/10)*{_secondaryStatBudget}, 0)% Resistance%nl%<##f74428> +%round((3/10)*{_secondaryStatBudget}, 0)% Damage%nl%<##e3ebff> +%round((2/10)*{_secondaryStatBudget}, 0)% Versatility%nl% %nl%&7Quetzalcoatl's Guardianship Set%nl%&72 Set Bonus: Increases  Resistance by 5."
        set {_lore} to " "
        set {_2setBonus} to "5 Resistance"
        set int tag "Stats;Resistance" of custom nbt of {_item} to round((5/10)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Damage" of custom nbt of {_item} to round((3/10)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Versatility" of custom nbt of {_item} to round((2/10)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Health" of custom nbt of {_item} to round({_health}, 0)
        set int tag "Stats;%{_gearType}%" of nbt of {_item} to round({_primaryStat}, 0)
    else if {_gearItem} = "Nature's Curtain":
        set {_item} to rabbit hide named "<##488741>Nature's Curtain" with lore "%{_rarity}% %{_itemType}%%nl%&fBinds when equipped%nl%<##fdd002>Item Level %{_itemLevel}%"
        set {_stats} to "%{_primaryIcon}% +%round({_primaryStat}, 0)% %{_gearType}%%nl%<##c0ff02> +%round({_health}, 0)% Health%nl%<##2154ad> +%round((2/6)*{_secondaryStatBudget}, 0)% Avoidance%nl%<##d5ff57> +%round((2/6)*{_secondaryStatBudget}, 0)% Element%nl%<##ae78d0> +%round((2/6)*{_secondaryStatBudget}, 0)% Utility"
        set {_lore} to " "
        set int tag "Stats;Avoidance" of custom nbt of {_item} to round((2/6)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Element" of custom nbt of {_item} to round((2/6)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Utility" of custom nbt of {_item} to round((2/6)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Health" of custom nbt of {_item} to round({_health}, 0)
        set int tag "Stats;%{_gearType}%" of nbt of {_item} to round({_primaryStat}, 0)
    else if {_gearItem} = "Old Hunter's Handiwork":
        set {_item} to rabbit foot named "<##488741>Old Hunter's Handiwork" with lore "%{_rarity}% %{_itemType}%%nl%&fBinds when equipped%nl%<##fdd002>Item Level %{_itemLevel}%"
        set {_stats} to "%{_primaryIcon}% +%round({_primaryStat}, 0)% %{_gearType}%%nl%<##c0ff02> +%round({_health}, 0)% Health%nl%<##f53b98> +%round((3/5)*{_secondaryStatBudget}, 0)% Mastery%nl%<##58c3f5> +%round((2/5)*{_secondaryStatBudget}, 0)% Crowd Control"
        set {_lore} to " "  
        set int tag "Stats;Mastery" of custom nbt of {_item} to round((3/5)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Crowd Control" of custom nbt of {_item} to round((2/5)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Health" of custom nbt of {_item} to round({_health}, 0)
        set int tag "Stats;%{_gearType}%" of nbt of {_item} to round({_primaryStat}, 0)
    else if {_gearItem} = "Outworn Gauntlets":
        set {_item} to feather named "<##488741>Outworn Gauntlets" with lore "%{_rarity}% %{_itemType}%%nl%&fBinds when equipped%nl%<##fdd002>Item Level %{_itemLevel}%"
        set {_stats} to "%{_primaryIcon}% +%round({_primaryStat}, 0)% %{_gearType}%%nl%<##c0ff02> +%round({_health}, 0)% Health%nl%<##fca417> +%round((3/6)*{_secondaryStatBudget}, 0)% Critical Hit%nl%<##ffef45> +%round((2/6)*{_secondaryStatBudget}, 0)% Resistance%nl%<##e3ebff> +%round((1/6)*{_secondaryStatBudget}, 0)% Versatility"
        set {_lore} to " "
        set int tag "Stats;Critical Hit" of custom nbt of {_item} to round((3/6)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Resistance" of custom nbt of {_item} to round((2/6)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Versatility" of custom nbt of {_item} to round((1/6)*{_secondaryStatBudget}, 0)
        set int tag "Stats;Health" of custom nbt of {_item} to round({_health}, 0)
        set int tag "Stats;%{_gearType}%" of nbt of {_item} to round({_primaryStat}, 0)

    set string tag "GearSlot" of custom nbt of {_item} to {_itemType}
    set int tag "ItemLevel" of custom nbt of {_item} to {_itemLevel}
    set string tag "Rarity" of custom nbt of {_item} to uncolored {_rarity}

    if {_2setBonus} is set:
        set string tag "2SetBonus" of custom nbt of {_item} to {_2setBonus}
    
    chance of 10%:
        set boolean tag "Socket" of custom nbt of {_item} to true
        if {_socket} is not set:
            if {_rarity} != "<##a335ee>Epic":
                set {_randomSocket} to a random integer between 1 and 2
                if {_randomSocket} = 1:
                    set {_randomColour} to a random element of {_socketColours::*}
                    set string tag "SocketType" of custom nbt of {_item} to {_randomColour}
                    if {_lore} != " ":
                        set {_lore} to " %nl%%{_randomColour}%%nl% %nl%%{_lore}%"
                    else:
                        set {_lore} to " %nl%%{_randomColour}%"
                else:
                    if {_rarity} = "<##cccccc>Common" or "<##1fef00>Uncommon":
                        set string tag "SocketType" of custom nbt of {_item} to "<##85ff99> &7Uncommon Socket"
                        if {_lore} != " ":
                            set {_lore} to " %nl%<##85ff99> &7Uncommon Socket%nl% %nl%%{_lore}%"
                        else:
                            set {_lore} to " %nl%<##85ff99> &7Uncommon Socket"
                    else if {_rarity} = "<##0070dd>Rare":
                        set string tag "SocketType" of custom nbt of {_item} to "<##85a7ff> &7Rare Socket"
                        if {_lore} != " ":
                            set {_lore} to " %nl%<##85a7ff> &7Rare Socket%nl% %nl%%{_lore}%"
                        else:
                            set {_lore} to " %nl%<##85a7ff> &7Rare Socket"
            else:
                set {_randomColour} to a random element of {_socketColours::*}
                set string tag "SocketType" of custom nbt of {_item} to {_randomColour}
                if {_lore} != " ":
                    set {_lore} to " %nl%%{_randomColour}%%nl% %nl%%{_lore}%"
                else:
                    set {_lore} to " %nl%%{_randomColour}%"
        else:
            set {_socketBonus} to join {_socketBonus::*} by ""
            set string tag "SocketType" of custom nbt of {_item} to {_randomColour}
            if {_lore} != " ":
                set {_lore} to " %nl%%{_socket}%%nl% %nl%%{_lore}%"
            else:
                set {_lore} to " %nl%%{_socket}%"
            set string tag "SocketBonus" of custom nbt of {_item} to {_socketBonus}
    if {_lore} is not " ":
        if boolean tag "Socket" of custom nbt of {_item} is not set:
            set {_lore} to "%nl%%{_lore}%"
        set lore of {_item} to (lore of {_item}) and {_stats} and {_lore}
    else:
        set lore of {_item} to (lore of {_item}) and {_stats}
    add "&m&8%{_-}%%nl%&8(!) This item can go in the %{_itemType}% slot and%nl%&8becomes Cardbound when equipped." to lore of {_item}
    return {_item}

function GearItemLevel(mobLevel: integer, type: string, keystoneLevel: integer) :: integer:
    if {_type} = "dungeon":
        if {_keystoneLevel} = 1:
            set {_itemLevel} to 56
        else if {_keystoneLevel} is between 2 and 3:
            set {_itemLevel} to 59
        else if {_keystoneLevel} = 4:
            set {_itemLevel} to 62
        else if {_keystoneLevel} is between 5 and 6:
            set {_itemLevel} to 65
        else if {_keystoneLevel} = 7:
            set {_itemLevel} to 68
        else if {_keystoneLevel} is between 8 and 10:
            set {_itemLevel} to 71
        else if {_keystoneLevel} is between 11 and 13:
            set {_itemLevel} to 74
        else if {_keystoneLevel} is between 14 and 15:
            set {_itemLevel} to 77
        else if {_keystoneLevel} is between 16 and 18:
            set {_itemLevel} to 80
        else if {_keystoneLevel} >= 19:
            set {_itemLevel} to 83            
    else if {_type} = "grandvault":
        if {_keystoneLevel} = 1:
            set {_itemLevel} to 59
        else if {_keystoneLevel} = 2:
            set {_itemLevel} to 62
        else if {_keystoneLevel} = 3:
            set {_itemLevel} to 65
        else if {_keystoneLevel} is between 4 and 5:
            set {_itemLevel} to 68
        else if {_keystoneLevel} = 6:
            set {_itemLevel} to 71
        else if {_keystoneLevel} is between 7 and 9:
            set {_itemLevel} to 74
        else if {_keystoneLevel} is between 10 and 11:
            set {_itemLevel} to 77
        else if {_keystoneLevel} is between 12 and 14:
            set {_itemLevel} to 80
        else if {_keystoneLevel} is between 15 and 16:
            set {_itemLevel} to 83
        else if {_keystoneLevel} is between 17 and 18:
            set {_itemLevel} to 86
        else if {_keystoneLevel} = 19:
            set {_itemLevel} to 89
        else if {_keystoneLevel} >= 20:
            set {_itemLevel} to 92
    return {_itemLevel}

command /givegear [<text>]:
    trigger:
        if arg-1 = "forbiddentechniques":
            set {_-} to ""
            loop 36 times:
                set {_-} to "%{_-}%&8&m-"
            set {_item} to gold nugget named "<##a335ee>Ring of Forbidden Techniques" with lore "<##a335ee>Epic Ring%nl%<##fdd002>Item Level 53%nl%<##c0ff02> +7 Health%nl%<##f53b98> +19 Mastery%nl%<##19943e> +5 Haste%nl% %nl%&6'A dragon soul once encaged in this signet%nl%&6provides its wielder with unstable powers.'" with nbt from "{""minecraft:custom_model_data"":{floats:[11.0f]}}"
            set {_itemType} to "Ring"
        if arg-1 = "volcanictreads":
            give player leather boots named "<##a335ee>Volcanic Treads" with lore "<##a335ee>Epic Boots%nl%<##fdd002>Item Level 53%nl%<##e35959> +6 Strength%nl%<##c0ff02> +10 Health%nl%<##fca417> +7 Critical Hit%nl%<##d5ff57> +6 Element%nl% %nl%&6'A dragon soul once encaged in this signet%nl%&6provides its wielder with unstable powers.'%nl% %nl%&8(!) This item can go in the Boots slot." with nbt from "{""minecraft:custom_model_data"":{floats:[1.0f]}}"
        add "&m&8%{_-}%%nl%&8(!) This item can go in the %{_itemType}% slot and%nl%&8becomes Cardbound when equipped." to lore of {_item}
command /giverelic [<text>]:
    trigger:
        if player's name = "Pehrek":
            if arg-1 = "xalatath":
                set {_relic} to netherite sword named "<##613E82>Xal'Atath" with lore "<##ff8000>Legendary Brother Therold Relic%nl%<##fdd002>Item Level 1%nl%&7Character Relic%nl% %nl%&b 4 Intellect%nl%<##f53b98> 8 Mastery%nl%<##19943e> 8 Haste%nl% %nl%<##613E82>Special Effect: Mass Hysteria%nl%<##613E82>Every 1 sec, Voidform increases damage%nl%<##613E82>dealt by Shadow Word: Pain and Vampiric%nl%<##613E82>Touch by &f2%%<##613E82>, stacking until Voidform ends.%nl% %nl%<##fdd002>""Xal'atath has a mind of its own. Ignore its%nl%<##fdd002>maddening whispers. Do not trust the lies it%nl%<##fdd002>spins. Take from it what you need, but always%nl%<##fdd002>remember that the dark presence in the blade is%nl%<##fdd002>not your ally.""%nl% %nl%&fUpgraded: +0 | Enhanced: +0%nl%&m&8---------------------------------------------%nl%&7Star Level: &e★★★★★%nl%&8&o(!) This Relic can only be equipped by Brother Therold.%nl%&8&oUpgrading this item will increase its combat potential.%nl%&8&oEnhancing this Relic will increase the effectiveness%nl%&8&oof its Special Effect. The Item Level of this item scales%nl%&8&owith the average Item Level of your equipped gear." with nbt from "{""minecraft:custom_model_data"":{floats:[1.0f]}}" with nbt from "{HideFlags:127,Relic:1b,CustomModelData:1}"
            if arg-1 = "icebreaker":
                set {_relic} to netherite sword named "<##613E82>Xal'Atath" with lore "<##ff8000>Legendary Brother Therold Relic%nl%<##fdd002>Item Level 1%nl%&7Character Relic%nl% %nl%&b 4 Intellect%nl%<##f53b98> 8 Mastery%nl%<##19943e> 8 Haste%nl% %nl%<##613E82>Special Effect: Mass Hysteria%nl%<##613E82>Every 1 sec, Voidform increases damage%nl%<##613E82>dealt by Shadow Word: Pain and Vampiric%nl%<##613E82>Touch by &f2%%<##613E82>, stacking until Voidform ends.%nl% %nl%<##fdd002>""Xal'atath has a mind of its own. Ignore its%nl%<##fdd002>maddening whispers. Do not trust the lies it%nl%<##fdd002>spins. Take from it what you need, but always%nl%<##fdd002>remember that the dark presence in the blade is%nl%<##fdd002>not your ally.""%nl% %nl%&fUpgraded: +0 | Enhanced: +0%nl%&m&8---------------------------------------------%nl%&7Star Level: &e★★★★★%nl%&8&o(!) This Relic can only be equipped by Brother Therold.%nl%&8&oUpgrading this item will increase its combat potential.%nl%&8&oEnhancing this Relic will increase the effectiveness%nl%&8&oof its Special Effect. The Item Level of this item scales%nl%&8&owith the average Item Level of your equipped gear." with nbt from "{""minecraft:custom_model_data"":{floats:[1.0f]}}" with nbt from "{HideFlags:127,Relic:1b,CustomModelData:1}"
            set int tag "Upgraded" of custom nbt of {_relic} to 0
            set int tag "Enhanced" of custom nbt of {_relic} to 0
            set long tag "Experience" of custom nbt of {_relic} to 0
            set int tag "ItemLevel" of custom nbt of {_relic} to 1
            set long tag "EffectValue" of custom nbt of {_relic} to 2.0
            set int tag "StarLevel" of custom nbt of {_relic} to 5
            set int tag "Stats;Intellect" of custom nbt of {_relic} to 4
            set int tag "Stats;Mastery" of custom nbt of {_relic} to 8
            set int tag "Stats;Haste" of custom nbt of {_relic} to 8
            set string tag "Id" of custom nbt of {_relic} to (random 8 char string from charset `0-9` `a-z`)
            give player {_relic}
function ArtifactStarLevel(starlvl: integer, mobLevel: integer) :: integer:
    if {_starlvl} = 1:
        set {_ilvl} to round(3 + ({_mobLevel}*0.4), 0)
    else if {_starlvl} = 2:
        set {_ilvl} to round(4 + ({_mobLevel}*0.46), 0)
    else if {_starlvl} = 3:
        set {_ilvl} to round(6 + ({_mobLevel}*0.6), 0)
    else if {_starlvl} = 4:
        set {_ilvl} to round(8 + ({_mobLevel}*0.72), 0)
    else if {_starlvl} = 5:
        set {_ilvl} to round(10 + ({_mobLevel}*0.84), 0)
    return {_ilvl}
function ArtifactReqExp(artifact: item) :: integer:
    set {_upgradeLevel} to int tag "Upgraded" of custom nbt of {_artifact}
    set {_experience} to long tag "Experience" of custom nbt of {_artifact}
    if {_upgradeLevel} < 25:
        if {_upgradeLevel} = 0:
            set {_requiredExp} to 2

        else if {_upgradeLevel} = 1:
            set {_requiredExp} to 3

        else if {_upgradeLevel} = 2:
            set {_requiredExp} to 5

        else if {_upgradeLevel} = 3:
            set {_requiredExp} to 7

        else if {_upgradeLevel} = 4:
            set {_requiredExp} to 9
        
        else if {_upgradeLevel} = 5:
            set {_requiredExp} to 11

        else if {_upgradeLevel} = 6:
            set {_requiredExp} to 13

        else if {_upgradeLevel} = 7:
            set {_requiredExp} to 16

        else if {_upgradeLevel} = 8:
            set {_requiredExp} to 19

        else if {_upgradeLevel} = 9:
            set {_requiredExp} to 22

        else if {_upgradeLevel} = 10:
            set {_requiredExp} to 25

        else if {_upgradeLevel} = 11:
            set {_requiredExp} to 28

        else if {_upgradeLevel} = 12:
            set {_requiredExp} to 31

        else if {_upgradeLevel} = 13:
            set {_requiredExp} to 32

        else if {_upgradeLevel} = 14:
            set {_requiredExp} to 34

        else if {_upgradeLevel} = 15:
            set {_requiredExp} to 37

        else if {_upgradeLevel} = 16:
            set {_requiredExp} to 40

        else if {_upgradeLevel} = 17:
            set {_requiredExp} to 44

        else if {_upgradeLevel} = 18:
            set {_requiredExp} to 48

        else if {_upgradeLevel} = 19:
            set {_requiredExp} to 52

        else if {_upgradeLevel} = 20:
            set {_requiredExp} to 56

        else if {_upgradeLevel} = 21:
            set {_requiredExp} to 60

        else if {_upgradeLevel} = 22:
            set {_requiredExp} to 64

        else if {_upgradeLevel} = 23:
            set {_requiredExp} to 64

        else if {_upgradeLevel} = 24:
            set {_requiredExp} to 64
        
    return {_requiredExp}

function RelicReqExp(relic: item) :: integer:
    set {_upgradeLevel} to int tag "Upgraded" of custom nbt of {_relic}
    set {_maxUpgradeLevel} to 125
    set {_requiredExp} to rounded (2 * ((sqrt({_upgradeLevel}+1)/sqrt({_maxUpgradeLevel})))*2.515) * ({_upgradeLevel}+1) + 2
    #if {_upgradeLevel} < 25:
    #    set {_requiredExp} to ArtifactReqExp({_relic})
    #else:
    #    set {_requiredExp} to 256
    return {_requiredExp}
#give player purple dye named "<##a335ee>Elemental Lariat" with lore "&6Item Level 350%nl%&fNecklace%nl%&d<##fca417> +141 Critical Hit%nl%<##19943e> +141 Haste%nl% %nl%<##9985ff>Equip: Your spells and abilities have%nl%<##9985ff>a chance to empower one of your%nl%<##9985ff>Card's elemental gems, granting 330%nl%<##9985ff>of their associated stat for 12 sec.%nl% %nl%&f &b +75 Intellect <##fca417> +66 Critical Hit%nl%&f <##fca417> +48 Intellect <##19943e> +23 Haste%nl%&f <##fca417> +48 Intellect <##19943e> +23 Haste"
#give player gold nugget named "<##a335ee>Ring of Forbidden Techniques" with lore  "<##fdd002>Item Level 53%nl%&fRing%nl%<##c0ff02> +7 Health%nl%<##f53b98> +19 Mastery%nl%<##19943e> +5 Haste" with nbt from "{""minecraft:custom_model_data"":{floats:[11.0f]}}"

on inventory click:
    if player's current inventory = metadata tag "gearcard" of player:
        cancel event
    if event-inventory = metadata tag "gearcard" of player:
        if event-slot is between 0 and 53:
            cancel event
            set {_possibleSlots::*} to 10, 11, 12, 19, 20, 21, 28, 29, 30, 37, 38, 39, 14, 23, 32, 41
            if {_possibleSlots::*} contains index of event-slot:
                if inventory action != instant move:
                    play sound "block.chest.close" with volume 2 and pitch 1 to player
                    #Helmet
                    if event-slot = 10:
                        set {_gearSlot} to "Helmet"
                    else if event-slot = 11:
                        set {_gearSlot} to "Necklace"
                    else if event-slot = 12:
                        set {_gearSlot} to "Cloak"
                    else if event-slot = 19:
                        set {_gearSlot} to "Chestplate"
                    else if event-slot = 20:
                        set {_gearSlot} to "Shoulders"
                    else if event-slot = 21:
                        set {_gearSlot} to "Bracers"
                    else if event-slot = 28:
                        set {_gearSlot} to "Leggings"
                    else if event-slot = 29:	
                        set {_gearSlot} to "Belt"
                    else if event-slot = 30:
                        set {_gearSlot} to "Gloves"
                    else if event-slot = 37:
                        set {_gearSlot} to "Boots"
                    else if event-slot = 38:
                        set {_gearSlot} to "Ring"
                        set metadata value "RingSlot" of player to 1
                    else if event-slot = 39:
                        set {_gearSlot} to "Ring"
                        set metadata value "RingSlot" of player to 2
                    else if event-slot = 14:
                        set {_gearSlot} to "Flower Artifact"
                    else if event-slot = 23:
                        set {_gearSlot} to "Orb Artifact"
                    else if event-slot = 32:
                        set {_gearSlot} to "Phial Artifact"
                    else if event-slot = 41:
                        set {_gearSlot} to "Scroll Artifact"
                    if {_gearSlot} is set:
                        set metadata value "CardGearSlot" of player to chest inventory with 1 row named "Gear Slot - %{_gearSlot}%"
                        set slot 4 of metadata value "CardGearSlot" of player to black stained glass pane named "&f%{_gearSlot}%"
                        set lore of slot 4 of metadata value "CardGearSlot" of player to "&7Click on this slot to pick an%nl%&7item from your inventory and have%nl%&7your card equip it."
                        open metadata value "CardGearSlot" of player to player
                else:
                    if event-slot != air:
                        if string tag "GearSlot" of custom nbt of event-slot is set:
                            set {_slot} to event-slot
                        else if boolean tag "Artifact" of custom nbt of event-slot is set:
                            set {_slot} to event-slot
                        if {_slot} is set:
                            set {_gearItem} to event-slot
                            clear metadata tag "GearConfirm" of player
                            if event-slot = 10:
                                set {_gearSlot} to "Helmet"
                            else if event-slot = 11:
                                set {_gearSlot} to "Necklace"
                            else if event-slot = 12:
                                set {_gearSlot} to "Cloak"
                            else if event-slot = 19:
                                set {_gearSlot} to "Chestplate"
                            else if event-slot = 20:
                                set {_gearSlot} to "Shoulders"
                            else if event-slot = 21:
                                set {_gearSlot} to "Bracers"
                            else if event-slot = 28:
                                set {_gearSlot} to "Leggings"
                            else if event-slot = 29:	
                                set {_gearSlot} to "Belt"
                            else if event-slot = 30:
                                set {_gearSlot} to "Gloves"
                            else if event-slot = 37:
                                set {_gearSlot} to "Boots"
                            else if event-slot = 38:
                                set {_gearSlot} to "Ring"
                                set metadata value "RingSlot" of player to 1
                            else if event-slot = 39:
                                set {_gearSlot} to "Ring"
                                set metadata value "RingSlot" of player to 2
                            else if event-slot = 14:
                                set {_gearSlot} to "Flower Artifact"
                            else if event-slot = 23:
                                set {_gearSlot} to "Orb Artifact"
                            else if event-slot = 32:
                                set {_gearSlot} to "Phial Artifact"
                            else if event-slot = 41:
                                set {_gearSlot} to "Scroll Artifact"
                            teleport the player to player's location
                            play sound "block.chest.close" with volume 2 and pitch 1.3 to player
                            play sound "entity.player.levelup" with volume 2 and pitch 0.15 to player
                            if {_gearSlot} does not contain "Artifact":
                                set {_gearSlot} to string tag "GearSlot" of custom nbt of {_gearItem}
                            else:
                                set {_artifactSet} to uncolored line 3 of lore of {_gearItem}
                                set {_artifactSetCount} to string tag {_artifactSet} of custom nbt of player's tool
                                remove 1 from {_artifactSetCount}
                                if {_artifactSetCount} = 0:
                                    clear string tag {_artifactSet} of custom nbt of player's tool
                                else:
                                    set string tag {_artifactSet} of custom nbt of player's tool to {_artifactSetCount}
                            if line 19 of lore of {karta::%player%} contains "Id: ":
                                set {_id} to uncolored line 19 of lore of {karta::%player%}
                                replace all "Id: " in {_id} with ""
                                if line 2 of lore of {_gearItem} contains "Binds when equipped":
                                    set line 2 of lore of {_gearItem} to "&fCardbound: %{_id}%"
                                    set string tag "Cardbound" of custom nbt of {_gearItem} to {_id}
                                set {_card} to {kartaname::%player%}
                                load yaml "plugins/Skript/playerdata/karty/%{_card}%/%{_id}%.yml" as "cardGearUnequip-%player%"		
                                if {_gearSlot} = "Ring":
                                    set {_gearSlot} to "%{_gearSlot}% %metadata value "RingSlot" of player%"
                                giveItem(player, event-slot)
                                loop yaml nodes with keys "Card.Gear.%{_gearSlot}%.Stats" from "cardGearUnequip-%player%":
                                    set {_loopStatAmount} to yaml value "Card.Gear.%{_gearSlot}%.Stats.%loop-value%" in "cardGearUnequip-%player%"
                                    set {_statNbt} to int tag "Stats;%loop-value%" of custom nbt of player's tool
                                    set {_statNbt} to {_statNbt} - {_loopStatAmount}
                                    set int tag "Stats;%loop-value%" of custom nbt of player's tool to {_statNbt}
                                    set {_statNbtTotal} to int tag "Stats;Total" of nbt of player's tool
                                    set {_statNbtTotal} to {_statNbtTotal} - {_loopStatAmount}
                                    set int tag "Stats;Total" of nbt of player's tool to {_statNbtTotal}
                                    set {_statNbtTotalGear} to int tag "Stats;GearTotal" of nbt of player's tool
                                    set {_statNbtTotalGear} to {_statNbtTotalGear} - {_loopStatAmount}
                                    set int tag "Stats;GearTotal" of nbt of player's tool to {_statNbtTotalGear}
                                loop yaml nodes with keys "Card.Gear.%{_gearSlot}%.Socket.Stats" from "cardGearUnequip-%player%":
                                    set {_loopStatAmount} to yaml value "Card.Gear.%{_gearSlot}%.Socket.Stats.%loop-value%" in "cardGearUnequip-%player%"
                                    set {_statNbt} to int tag "Stats;%loop-value%" of custom nbt of player's tool
                                    set {_statNbt} to {_statNbt} - {_loopStatAmount}
                                    set int tag "Stats;%loop-value%" of custom nbt of player's tool to {_statNbt}
                                    set {_statNbtTotal} to int tag "Stats;Total" of nbt of player's tool
                                    set {_statNbtTotal} to {_statNbtTotal} - {_loopStatAmount}
                                    set int tag "Stats;Total" of nbt of player's tool to {_statNbtTotal}
                                    set {_statNbtTotalGear} to int tag "Stats;GearTotal" of nbt of player's tool
                                    set {_statNbtTotalGear} to {_statNbtTotalGear} - {_loopStatAmount}
                                    set int tag "Stats;GearTotal" of nbt of player's tool to {_statNbtTotalGear}
                                loop yaml nodes with keys "Card.Gear.%{_gearSlot}%.Socket.Socket Bonus" from "cardGearUnequip-%player%":
                                    set {_loopStatAmount} to yaml value "Card.Gear.%{_gearSlot}%.Socket.Socket Bonus.%loop-value%" in "cardGearUnequip-%player%"
                                    set {_statNbt} to int tag "Stats;%loop-value%" of custom nbt of player's tool
                                    set {_statNbt} to {_statNbt} - {_loopStatAmount}
                                    set int tag "Stats;%loop-value%" of custom nbt of player's tool to {_statNbt}
                                    set {_statNbtTotal} to int tag "Stats;Total" of nbt of player's tool
                                    set {_statNbtTotal} to {_statNbtTotal} - {_loopStatAmount}
                                    set int tag "Stats;Total" of nbt of player's tool to {_statNbtTotal}
                                    set {_statNbtTotalGear} to int tag "Stats;GearTotal" of nbt of player's tool
                                    set {_statNbtTotalGear} to {_statNbtTotalGear} - {_loopStatAmount}
                                    set int tag "Stats;GearTotal" of nbt of player's tool to {_statNbtTotalGear}
                                clear yaml value "Card.Gear.%{_gearSlot}%" in "cardGearUnequip-%player%"
                                clear yaml value "Gear.%{_gearSlot}%" in "cardGearUnequip-%player%"
                save yaml "cardGearUnequip-%player%"
                unload yaml "cardGearUnequip-%player%"
                UpdateCard(player)
                CardStatUpdate(player)
                set max health of player to 25 + ({health::%player%}/5)
                set scaled health of player to 20
                heal the player

    else if player's current inventory = (metadata value "CardGearSlot" of player):
        if event-slot is between 0 and 8:
            cancel event
            if event-slot is 4:
                set {_slotIndex} to 0
                if line 19 of lore of {karta::%player%} contains "Id: ":
                    set {_id} to uncolored line 19 of lore of {karta::%player%}
                    replace all "Id: " in {_id} with ""
                    set {_card} to {kartaname::%player%}
                    load yaml "plugins/Skript/playerdata/karty/%{_card}%/%{_id}%.yml" as "cardGear-%player%"
                set {_cardLevel} to yaml value "Card.Level" in "cardGear-%player%"
                set metadata value "gearEquip" of player to chest inventory with 6 rows named "Equip Gear"
                play sound "block.chest.close" with volume 2 and pitch 1.1 to player
                loop all items in the player's inventory:
                    if (item amount of loop-item) = 1:
                        if uncolored name of event-slot does not contain "Artifact":
                            if string tag "GearSlot" of custom nbt of loop-item = (uncolored name of event-slot):    
                                set {_item} to loop-item
                        else:
                            if boolean tag "Artifact" of custom nbt of loop-item is set:
                                if (line 1 of lore of loop-item) contains (uncolored name of event-slot):
                                    set {_item} to loop-item
                        if {_item} is set:
                            set slot {_slotIndex} of metadata value "gearEquip" of player to loop-item
                            if boolean tag "Artifact" of custom nbt of {_item} is not set:
                                set {_itemLevel} to (int tag "ItemLevel" of custom nbt of loop-item)
                                if {_cardLevel} >= round(0.6*{_itemLevel}, 0):
                                    set {_canUpgrade} to true
                                else:
                                    if round({_itemLevel}*0.6, 0) > {_cardLevel}:
                                        if {_cardLevel} >= 50:
                                            set {_canUpgrade} to true
                            else:
                                set {_canUpgrade} to true
                            if {_canUpgrade} = true:
                                if string tag "Cardbound" of custom nbt of slot {_slotIndex} of (metadata value "gearEquip" of player) is set:
                                    set {_cardBound} to string tag "Cardbound" of custom nbt of slot {_slotIndex} of (metadata value "gearEquip" of player)
                                    if {_cardBound} != {_id}:
                                        add "%nl%&c&oThis item is Cardbound to % {_cardBound}%." to lore of slot {_slotIndex} of metadata value "gearEquip" of player
                                    else if {_cardBound} = {_id}:
                                        add "%nl%&f&oClick here to equip this item." to lore of slot {_slotIndex} of metadata value "gearEquip" of player
                                        set boolean tag "CanInteract" of custom nbt of (slot {_slotIndex} of metadata value "gearEquip" of player) to true		
                                else:
                                    add "%nl%&f&oClick here to equip this item." to lore of slot {_slotIndex} of metadata value "gearEquip" of player
                                    set boolean tag "CanInteract" of custom nbt of (slot {_slotIndex} of metadata value "gearEquip" of player) to true								
                            else:
                                add "%nl%&c&oCard level is too low." to lore of slot {_slotIndex} of metadata value "gearEquip" of player
                            add 1 to {_slotIndex}
                            add 1 to {_items}
                        clear {_item}
                if {_slotIndex} > 0:
                    open metadata value "gearEquip" of player to player
                else:
                    play sound "entity.villager.no" with volume 5 and pitch 0.62 to player
                    send "&c&oThere are no Gear items in your inventory." to player
            unload yaml "cardGear-%player%"
    else if player's current inventory = (metadata value "gearEquip" of player):
        if event-slot is between 0 and 26:
            cancel event
        if boolean tag "CanInteract" of custom nbt of event-slot is set:
            clear boolean tag "CanInteract" of custom nbt of event-slot
            set {_slot} to event-slot
            loop lore of {_slot}:
                if loop-value does not contain "Click here to equip":
                    add loop-value to {_lore::*}
            delete {_lore::%size of {_lore::*}%}
            set lore of {_slot} to {_lore::*}
            set metadata tag "GearConfirm" of player to chest inventory with 3 rows named "Gear - Confirm"
            set slot 11 of metadata tag "GearConfirm" of player to {_slot}
            set slot 15 of metadata tag "GearConfirm" of player to lime stained glass pane named "&aConfirm?" with lore "&7Click here to confirm the process and%nl%&7equip this item.%nl%&7This item will be removed from your inventory.%nl% %nl%&c&l(&4&l!&c&l) &c&nWarning!&c &oThis item will become Cardbound%nl%&cwhen equipped."
            open metadata tag "GearConfirm" of player to player
            play sound "block.chest.close" with volume 2 and pitch 1.2 to player
    #Equipping / Replacing gear
    else if player's current inventory = (metadata tag "GearConfirm" of player):
        if event-slot is between 0 and 26:
            cancel event
        if event-slot is 15:
            set {_gearItem} to slot 11 of metadata tag "GearConfirm" of player
            set {_gearItemRemove} to slot 11 of metadata tag "GearConfirm" of player
            if string tag "ArtifactType" of custom nbt of {_gearItem} is not set:
                if line 1 of lore of {_gearItem} contains "Flower Artifact":
                    set string tag "ArtifactType" of custom nbt of {_gearItem} to "Flower Artifact"
                else if line 1 of lore of {_gearItem} contains "Orb Artifact":
                    set string tag "ArtifactType" of custom nbt of {_gearItem} to "Orb Artifact"
                else if line 1 of lore of {_gearItem} contains "Phial Artifact":
                    set string tag "ArtifactType" of custom nbt of {_gearItem} to "Phial Artifact"
                else if line 1 of lore of {_gearItem} contains "Scroll Artifact":
                    set string tag "ArtifactType" of custom nbt of {_gearItem} to "Scroll Artifact"
            clear metadata tag "GearConfirm" of player
            remove {_gearItemRemove} from player
            teleport the player to player's location
            play sound "block.chest.close" with volume 2 and pitch 1.3 to player
            play sound "entity.player.levelup" with volume 2 and pitch 0.15 to player
            if boolean tag "Artifact" of custom nbt of {_gearItem} is not set:
                set {_gearSlot} to string tag "GearSlot" of custom nbt of {_gearItem}
            else if boolean tag "Artifact" of custom nbt of {_gearItem} is set:
                set {_gearSlot} to string tag "ArtifactType" of custom nbt of {_gearItem}
            if line 19 of lore of {karta::%player%} contains "Id: ":
                set {_id} to uncolored line 19 of lore of {karta::%player%}
                replace all "Id: " in {_id} with ""
                if line 2 of lore of {_gearItem} contains "Binds when equipped":
                    set line 2 of lore of {_gearItem} to "&fCardbound: %{_id}%"
                    set string tag "Cardbound" of custom nbt of {_gearItem} to {_id}
                set {_card} to {kartaname::%player%}
                if yaml "cardGear-%player%" is not loaded:
                    load yaml "plugins/Skript/playerdata/karty/%{_card}%/%{_id}%.yml" as "cardGear-%player%"
                if {_gearSlot} = "Helmet":
                    set {_checkSlot} to slot 10 of metadata tag "gearcard" of player		
                else if {_gearSlot} = "Ring":
                    set {_gearSlot} to "%{_gearSlot}% %metadata value "RingSlot" of player%"
                    if metadata value "RingSlot" of player = 1:
                        set {_checkSlot} to slot 38 of metadata tag "gearcard" of player
                    else if metadata value "RingSlot" of player = 2:
                        set {_checkSlot} to slot 39 of metadata tag "gearcard" of player
                else if {_gearSlot} = "Necklace":
                    set {_checkSlot} to slot 11 of metadata tag "gearcard" of player
                else if {_gearSlot} = "Cloak":
                    set {_checkSlot} to slot 12 of metadata tag "gearcard" of player
                else if {_gearSlot} = "Chestplate":
                    set {_checkSlot} to slot 19 of metadata tag "gearcard" of player
                else if {_gearSlot} = "Shoulders":
                    set {_checkSlot} to slot 20 of metadata tag "gearcard" of player
                else if {_gearSlot} = "Bracers":
                    set {_checkSlot} to slot 21 of metadata tag "gearcard" of player
                else if {_gearSlot} = "Leggings":
                    set {_checkSlot} to slot 28 of metadata tag "gearcard" of player
                else if {_gearSlot} = "Belt":
                    set {_checkSlot} to slot 29 of metadata tag "gearcard" of player
                else if {_gearSlot} = "Gloves":
                    set {_checkSlot} to slot 30 of metadata tag "gearcard" of player
                else if {_gearSlot} = "Boots":
                    set {_checkSlot} to slot 37 of metadata tag "gearcard" of player
                else if {_gearSlot} = "Flower Artifact":
                    set {_checkSlot} to slot 14 of metadata tag "gearcard" of player
                else if {_gearSlot} = "Orb Artifact":
                    set {_checkSlot} to slot 23 of metadata tag "gearcard" of player
                else if {_gearSlot} = "Phial Artifact":
                    set {_checkSlot} to slot 32 of metadata tag "gearcard" of player
                else if {_gearSlot} = "Scroll Artifact":
                    set {_checkSlot} to slot 41 of metadata tag "gearcard" of player
                if {_gearSlot} contains "Artifact":
                    set {_artifactSet} to uncolored line 3 of lore of {_gearItem}
                    set {_artifactSetCount} to string tag {_artifactSet} of custom nbt of player's tool
                    add 1 to {_artifactSetCount}
                    set string tag {_artifactSet} of custom nbt of player's tool to {_artifactSetCount}
                if {_checkSlot} != air:
                    giveItem(player, {_checkSlot})
                    if boolean tag "Artifact" of custom nbt of {_checkSlot} is set:
                        set {_artifactSet} to uncolored line 3 of lore of {_checkSlot}
                        set {_artifactSetCount} to string tag {_artifactSet} of custom nbt of player's tool
                        remove 1 from {_artifactSetCount}
                        if {_artifactSetCount} = 0:
                            clear string tag {_artifactSet} of custom nbt of player's tool
                        else:
                            set string tag {_artifactSet} of custom nbt of player's tool to {_artifactSetCount}
                loop yaml nodes with keys "Card.Gear.%{_gearSlot}%.Stats" from "cardGear-%player%":
                    set {_loopStatAmount} to yaml value "Card.Gear.%{_gearSlot}%.Stats.%loop-value%" in "cardGear-%player%"
                    set {_statNbt} to int tag "Stats;%loop-value%" of custom nbt of player's tool
                    if {_statNbt} - {_loopStatAmount} > 0:
                        set {_statNbt} to {_statNbt} - {_loopStatAmount}
                        set int tag "Stats;%loop-value%" of custom nbt of player's tool to {_statNbt}
                    else:
                        set int tag "Stats;%loop-value%" of custom nbt of player's tool to 0
                    set {_statNbtTotal} to int tag "Stats;Total" of nbt of player's tool
                    if {_statNbtTotal} - {_loopStatAmount} > 0:
                        set {_statNbtTotal} to {_statNbtTotal} - {_loopStatAmount}
                        set int tag "Stats;Total" of nbt of player's tool to {_statNbtTotal}
                    else:
                        set int tag "Stats;Total" of nbt of player's tool to 0
                    set {_statNbtTotalGear} to int tag "Stats;GearTotal" of nbt of player's tool
                    if {_statNbtTotalGear} - {_loopStatAmount} > 0:
                        set {_statNbtTotalGear} to {_statNbtTotalGear} - {_loopStatAmount}
                        set int tag "Stats;GearTotal" of nbt of player's tool to {_statNbtTotalGear}
                    else:
                        set int tag "Stats;GearTotal" of nbt of player's tool to 0
                loop yaml nodes with keys "Card.Gear.%{_gearSlot}%.Socket.Stats" from "cardGear-%player%":
                    set {_loopStatAmount} to yaml value "Card.Gear.%{_gearSlot}%.Socket.Stats.%loop-value%" in "cardGear-%player%"
                    set {_statNbt} to int tag "Stats;%loop-value%" of custom nbt of player's tool
                    if {_statNbt} - {_loopStatAmount} > 0:
                        set {_statNbt} to {_statNbt} - {_loopStatAmount}
                        set int tag "Stats;%loop-value%" of custom nbt of player's tool to {_statNbt}
                    else:
                        set int tag "Stats;%loop-value%" of custom nbt of player's tool to 0
                    set {_statNbtTotal} to int tag "Stats;Total" of nbt of player's tool
                    if {_statNbtTotal} - {_loopStatAmount} > 0:
                        set {_statNbtTotal} to {_statNbtTotal} - {_loopStatAmount}
                        set int tag "Stats;Total" of nbt of player's tool to {_statNbtTotal}
                    else:
                        set int tag "Stats;Total" of nbt of player's tool to 0
                    set {_statNbtTotalGear} to int tag "Stats;GearTotal" of nbt of player's tool
                    if {_statNbtTotalGear} - {_loopStatAmount} > 0:
                        set {_statNbtTotalGear} to {_statNbtTotalGear} - {_loopStatAmount}
                        set int tag "Stats;GearTotal" of nbt of player's tool to {_statNbtTotalGear}
                    else:
                        set int tag "Stats;GearTotal" of nbt of player's tool to 0
                loop yaml nodes with keys "Card.Gear.%{_gearSlot}%.Socket.Socket Bonus" from "cardGear-%player%":
                    set {_loopStatAmount} to yaml value "Card.Gear.%{_gearSlot}%.Socket.Socket Bonus.%loop-value%" in "cardGear-%player%"
                    set {_statNbt} to int tag "Stats;%loop-value%" of custom nbt of player's tool
                    if {_statNbt} - {_loopStatAmount} > 0:
                        set {_statNbt} to {_statNbt} - {_loopStatAmount}
                        set int tag "Stats;%loop-value%" of custom nbt of player's tool to {_statNbt}
                    else:
                        set int tag "Stats;%loop-value%" of custom nbt of player's tool to 0
                    set {_statNbtTotal} to int tag "Stats;Total" of nbt of player's tool
                    if {_statNbtTotal} - {_loopStatAmount} > 0:
                        set {_statNbtTotal} to {_statNbtTotal} - {_loopStatAmount}
                        set int tag "Stats;Total" of nbt of player's tool to {_statNbtTotal}
                    else:
                        set int tag "Stats;Total" of nbt of player's tool to 0
                    set {_statNbtTotalGear} to int tag "Stats;GearTotal" of nbt of player's tool
                    if {_statNbtTotalGear} - {_loopStatAmount} > 0:
                        set {_statNbtTotalGear} to {_statNbtTotalGear} - {_loopStatAmount}
                        set int tag "Stats;GearTotal" of nbt of player's tool to {_statNbtTotalGear}
                    else:
                        set int tag "Stats;GearTotal" of nbt of player's tool to 0
                clear yaml value "Card.Gear.%{_gearSlot}%" in "cardGear-%player%"
                clear yaml value "Gear.%{_gearSlot}%" in "cardGear-%player%"
                set {_statsGear} to "%compound list tag "Stats" of custom nbt of {_gearItem}%"
                replace all """" and "{" and "}" in {_statsGear} with ""
                set {_statsType::*} to ({_statsGear} split at ",")
                set {_index} to 1
                loop {_statsType::*}:
                    set {_values::*} to loop-value split at ":"
                    set {_value} to {_values::2}
                    set {_statsValue::%{_index}%} to {_value} parsed as number
                    replace all ":" and {_value} in {_statsType::%{_index}%} with ""
                    add 1 to {_index}
                set yaml value "Card.Gear.%{_gearSlot}%.Name" in "cardGear-%player%" to uncolored name of {_gearItem}
                set yaml value "Card.Gear.%{_gearSlot}%.Item Level" in "cardGear-%player%" to int tag "ItemLevel" of custom nbt of {_gearItem}
                loop {_statsType::*}:
                    set yaml value "Card.Gear.%{_gearSlot}%.Stats.%loop-value%" in "cardGear-%player%" to {_statsValue::%loop-index%}
                    set {_statNbt} to int tag "Stats;%loop-value%" of custom nbt of player's tool
                    set {_statNbt} to {_statNbt} + {_statsValue::%loop-index%}
                    set int tag "Stats;%loop-value%" of custom nbt of player's tool to {_statNbt}
                    set {_statNbtTotal} to int tag "Stats;Total" of nbt of player's tool
                    set {_statNbtTotal} to {_statNbtTotal} + {_statsValue::%loop-index%}
                    set int tag "Stats;Total" of nbt of player's tool to {_statNbtTotal}
                    set {_statNbtTotalGear} to int tag "Stats;GearTotal" of nbt of player's tool
                    set {_statNbtTotalGear} to {_statNbtTotalGear} + {_statsValue::%loop-index%}
                    set int tag "Stats;GearTotal" of nbt of player's tool to {_statNbtTotalGear}
                if boolean tag "Socket" of custom nbt of {_gearItem} is set:
                    if string tag "SocketedGem" of custom nbt of {_gearItem} is set:
                        set {_socketedGem} to string tag "SocketedGem" of custom nbt of {_gearItem}
                        set {_socketedGemStats} to "%compound list tag "SocketStats" of custom nbt of {_gearItem}%"
                        replace all """" and "{" and "}" in {_socketedGemStats} with ""
                        set {_statsType::*} to ({_socketedGemStats} split at ",")
                        clear {_statsValue::*}
                        set {_index} to 1
                        loop {_statsType::*}:
                            set {_values::*} to loop-value split at ":"
                            set {_value} to {_values::2}
                            set {_statsValue::%{_index}%} to {_value} parsed as number
                            replace all ":" and {_value} in {_statsType::%{_index}%} with ""
                            add 1 to {_index}
                        set yaml value "Card.Gear.%{_gearSlot}%.Socket.Gem" in "cardGear-%player%" to {_socketedGem}
                        loop {_statsType::*}:
                            set yaml value "Card.Gear.%{_gearSlot}%.Socket.Stats.%loop-value%" in "cardGear-%player%" to {_statsValue::%loop-index%}
                            set {_statNbt} to int tag "Stats;%loop-value%" of custom nbt of player's tool
                            set {_statNbt} to {_statNbt} + {_statsValue::%loop-index%}
                            set int tag "Stats;%loop-value%" of custom nbt of player's tool to {_statNbt}
                            set {_statNbtTotal} to int tag "Stats;Total" of nbt of player's tool
                            set {_statNbtTotal} to {_statNbtTotal} + {_statsValue::%loop-index%}
                            set int tag "Stats;Total" of nbt of player's tool to {_statNbtTotal}
                            set {_statNbtTotalGear} to int tag "Stats;GearTotal" of nbt of player's tool
                            set {_statNbtTotalGear} to {_statNbtTotalGear} + {_statsValue::%loop-index%}
                            set int tag "Stats;GearTotal" of nbt of player's tool to {_statNbtTotalGear}
                        set {_quality} to string tag "GemQuality" of custom nbt of {_gearItem}
                        set yaml value "Card.Gear.%{_gearSlot}%.Socket.Gem Quality" in "cardGear-%player%" to {_quality}
                        if boolean tag "SocketBonusActive" of custom nbt of {_gearItem} is set:
                            set {_socketedGemBonusStats::*} to string tag "SocketBonus" of custom nbt of {_gearItem}
                            loop {_socketedGemBonusStats::*}:
                                set {_socketBonusStatValue::*} to loop-value split at " "
                                set {_socketBonusValue} to ({_socketBonusStatValue::1} parsed as number)
                                if {_socketBonusStatValue::3} is set:
                                    set {_statTypeBonus} to join {_socketBonusStatValue::2} and {_socketBonusStatValue::3} by " "
                                else:
                                    set {_statTypeBonus} to {_socketBonusStatValue::2}
                                set yaml value "Card.Gear.%{_gearSlot}%.Socket.Socket Bonus.%{_statTypeBonus}%" in "cardGear-%player%" to {_socketBonusValue}
                                set {_statNbt} to int tag "Stats;%{_statTypeBonus}%" of nbt of player's tool
                                set {_statNbt} to {_statNbt} + {_socketBonusValue}
                                set int tag "Stats;%{_statTypeBonus}%" of nbt of player's tool to {_statNbt}
                                set {_statNbtTotal} to int tag "Stats;Total" of nbt of player's tool
                                set {_statNbtTotal} to {_statNbtTotal} + {_socketBonusValue}
                                set int tag "Stats;Total" of nbt of player's tool to {_statNbtTotal}
                                set {_statNbtTotalGear} to int tag "Stats;GearTotal" of nbt of player's tool
                                set {_statNbtTotalGear} to {_statNbtTotalGear} + {_statsValue::%loop-index%}
                                set int tag "Stats;GearTotal" of nbt of player's tool to {_statNbtTotalGear}
                    else:
                        set yaml value "Card.Gear.%{_gearSlot}%.Socket.Gem" in "cardGear-%player%" to "Empty"
                if string list tag "Enchants" of custom nbt of {_gearItem} is set:
                    set {_enchants::*} to string list tag "Enchants" of custom nbt of {_gearItem}
                    set yaml list "Card.Gear.%{_gearSlot}%.Enchants" in "cardGear-%player%" to {_enchants::*}
                set yaml value "Gear.%{_gearSlot}%" in "cardGear-%player%" to {_gearItem}
            save yaml "cardGear-%player%"
            unload yaml "cardGear-%player%"
            UpdateCard(player)
            CardStatUpdate(player)
            set max health of player to 25 + ({health::%player%}/5)
            set scaled health of player to 20
            heal the player
            #Add stats...
            #Update lore
            #Update Gear score
            #Update .yml stats 
            #Shift click = unequip

function Marksmanship4Set(p: player) :: boolean:
    if int tag "Marksmanship Set" of custom nbt of {karta::%{_p}%} is set:
        set {_setCount} to int tag "Marksmanship Set" of custom nbt of {karta::%{_p}%}
        if {_setCount} >= 4:
            set {_bool} to true
    return {_bool}

function StatBarUpdate(p: player, statAmount: number, line: integer, statEN: string, statPL: string, colour: string):
    set {_kwadraciki} to (rounded down {_statAmount}/50)
    set {_stata} to "&7■■■■■■■■■■"
    if {_kwadraciki} > 10:
        set {_kwadraciki} to 10
    set {_statas::*} to {_stata} split at ""
    loop {_kwadraciki} times:
        set {_f} to character at 2 + loop-number in {_stata}
        replace all "■" in {_f} with "%{_colour}%■&7"
        set {_statas::%loop-number + 2%} to {_f}
    set {_stata} to join {_statas::*} by ""
    if {language::%{_p}%} = "English":
        set line {_line} of lore of {_p}'s tool to "&7%{_statEN}%: %{_stata}% &7(%{_colour}%%{_statAmount}%&7)"
    else:
        set line {_line} of lore of {_p}'s tool to "&7%{_statPL}%: %{_stata}% &7(%{_colour}%%{_statAmount}%&7)"

function CardStatUpdate(p: player):
    if string tag "PrimaryStat" of nbt of {_p}'s tool = "Intellect":
        set {_intellect} to int tag "Stats;Intellect" of nbt of {_p}'s tool
        StatBarUpdate({_p}, {_intellect}, 4, "Intellect", "Intelekt", "<##59c1e3>")
    else if string tag "PrimaryStat" of nbt of {_p}'s tool = "Agility":
        set {_agility} to int tag "Stats;Agility" of nbt of {_p}'s tool
        StatBarUpdate({_p}, {_agility}, 4, "Agility", "Zwinność", "<##5ee359>")
    else if string tag "PrimaryStat" of nbt of {_p}'s tool = "Strength":
        set {_strength} to int tag "Stats;Strength" of nbt of {_p}'s tool
        StatBarUpdate({_p}, {_strength}, 4, "Strength", "Siła", "<##e35959>")
    set {_health} to int tag "Stats;Health" of custom nbt of {_p}'s tool
    StatBarUpdate({_p}, {_health}, 5, "Health", "Zdrowie", "<##c0ff02>")
    set {_damage} to int tag "Stats;Damage" of custom nbt of {_p}'s tool
    StatBarUpdate({_p}, {_damage}, 6, "Damage", "Obrażenia", "<##f74428>")
    set {_resistance} to int tag "Stats;Resistance" of custom nbt of {_p}'s tool
    StatBarUpdate({_p}, {_resistance}, 7, "Resistance", "Wytrzymałość", "<##ffef45>")
    set {_mobility} to int tag "Stats;Mobility" of nbt of {_p}'s tool
    StatBarUpdate({_p}, {_mobility}, 8, "Mobility", "Mobilność", "&f")
    set {_utility} to int tag "Stats;Utility" of custom nbt of {_p}'s tool
    StatBarUpdate({_p}, {_utility}, 9, "Utility", "Użyteczność", "<##ae78d0>")
    set {_crowdcontrol} to int tag "Stats;Crowd Control" of nbt of {_p}'s tool
    StatBarUpdate({_p}, {_crowdcontrol}, 10, "Crowd Control", "Kontrola Tłumu", "<##58c3f5>")
    set {_versatility} to int tag "Stats;Versatility" of custom nbt of {_p}'s tool
    StatBarUpdate({_p}, {_versatility}, 11, "Versatility", "Uniwersalność", "<##e3ebff>")
    set {_mastery} to int tag "Stats;Mastery" of custom nbt of {_p}'s tool
    StatBarUpdate({_p}, {_mastery}, 12, "Mastery", "Mistrzostwo", "<##f53b98>")
    set {_criticalhit} to int tag "Stats;Critical Hit" of custom nbt of {_p}'s tool
    StatBarUpdate({_p}, {_criticalhit}, 13, "Critical Hit", "Cios Krytyczny", "<##fca417>")
    set {_element} to int tag "Stats;Element" of custom nbt of {_p}'s tool
    StatBarUpdate({_p}, {_element}, 14, "Element", "Żywioł", "<##d5ff57>")
    set {_haste} to int tag "Stats;Haste" of custom nbt of {_p}'s tool
    StatBarUpdate({_p}, {_haste}, 15, "Haste", "Pośpiech", "<##19943e>")
    set {_avoidance} to int tag "Stats;Avoidance" of custom nbt of {_p}'s tool
    StatBarUpdate({_p}, {_avoidance}, 16, "Avoidance", "Unik", "<##2154ad>")