on papi request for prefix "ec":
    if the identifier is "playerlevel":
        set the result to {poziom::%player%}
    else if the identifier is "playerexp":
        set the result to {exp::%player%}
    else if the identifier is "color":
        set the result to "%{kolorek::%player%}%"
    else if the identifier is "health":
        set the result to player's health
    else if the identifier is "playername":
        set the result to "&f%player's name%"
    else if the identifier is "card":
        if {karta::%player%} is set:
            if line 19 of lore of {karta::%player%} contains "Id: ":
                set {_id} to uncolored line 19 of lore of {karta::%player%}
                replace all "Id: " in {_id} with ""
                set {_name} to uncolored name of {karta::%player%}
                load yaml "plugins/Skript/playerdata/karty/%{_name}%/%{_id}%.yml" as "kartyPh-%player%"
                if yaml value "Card.Level" in "kartyPh-%player%" is set:
                    set {_level} to yaml value "Card.Level" in "kartyPh-%player%"
                else:
                    set {_level} to 0
                unload yaml "kartyPh-%player%"
                set the result to "%{ikonkakarta::%player%}% %{_name}%"
        else:
            set the result to "-"
    else if the identifier is "cardlevel":
        if line 19 of lore of {karta::%player%} contains "Id: ":
            set {_id} to uncolored line 19 of lore of {karta::%player%}
            replace all "Id: " in {_id} with ""
            load yaml "plugins/Skript/playerdata/karty/%uncolored name of {karta::%player%}%/%{_id}%.yml" as "kartyPh-%player%"
            set {_level} to yaml value "Card.Level" in "kartyPh-%player%"
            unload yaml "kartyPh-%player%"
            if {_level} is not set:
                set the result to "-"
            else:
                set the result to "%{_level}%"
        else:
            set the result to "-"
    else if the identifier is "party":
        if player is in a party:
            set the result to "&b[%name of party of player%] "
        else:
            set the result to ""
    else if the identifier is "date":
        set {_data::*} to data() split at " "
        set {_timeAMPM::*} to {_data::1} split at ":"
        if ({_timeAMPM::1} parsed as number) >= 13:
            set {_AorP} to "PM"
        else:
            set {_AorP} to "AM"
        set {_timeAMPM} to "%{_timeAMPM::1}%:%{_timeAMPM::2}%"
        set the result to "%{_data::1}% | %{_timeAMPM}% %{_AorP}%"
    else if the identifier is "health":
        set the result to health of player
    else if the identifier is "tab":
        set {_name} to name of party of player
        if metadata value "ECEngaged" of player is set:
            if {_name} is set:
                set the result to "&8(%{kolorek::%player%}%&l%{poziom::%player%}%%{kolorek::%player%}%&l⭐&8) &r%player's name% &b[%{_name}%] &a%player's health%&c❤"
            else:
                set the result to "&8%{kolorek::%player%}%&l%{poziom::%player%}%%{kolorek::%player%}%&l⭐&8) &r%player's name% &a%player's health%&c❤"
        else:
            if {_name} is set:
                set the result to "&8(%{kolorek::%player%}%&l%{poziom::%player%}%%{kolorek::%player%}%&l⭐&8) &r%player's name% &b[%{_name}%]"
            else:
                set the result to "&8(%{kolorek::%player%}%&l%{poziom::%player%}%%{kolorek::%player%}%&l⭐&8) &r%player's name%"
    else if the identifier is "rank":
        if {rank::%player%} is set:
            set {_rank} to {rank::%player%}
        else:
            set {_rank} to "&8[&7Player&8]"
        set the result to {_rank}
    else if the identifier is "prefix":
        set {_name} to name of party of player
        if {_name} is set:
            set the result to "&b[%{_name}%]&r "
        else:
            set the result to ""
    else if the identifier is "combat_1":
        set the result to placeholderDamage(player, 1)
    else if the identifier is "combat_2":
        set the result to placeholderDamage(player, 2)
    else if the identifier is "combat_3":
        set the result to placeholderDamage(player, 3)
    else if the identifier is "combat_4":
        set the result to placeholderDamage(player, 4)
    else if the identifier is "combat_5":
        set the result to placeholderDamage(player, 5)
    else if the identifier is "stardust":
        set the result to {stardust::%player%}
    else if the identifier is "cosmicflux":
        set the result to {cosmicflux::%player%}
    else if the identifier contains "buff":
        if (nbt tags of tag "custom;BuffList" of nbt of player) is set:
            set {_buffs::*} to buffsReturn(player)
            set {_size} to size of {_buffs::*}
            set {_buffIndex} to the identifier
            replace all "buff" in {_buffIndex} with ""
            set {_buffIndex} to {_buffIndex} parsed as integer

            set {_buff} to {_buffs::%{_buffIndex}%}
            if {_buff} is set:
                set {_icon} to tag "custom;BuffList;%{_buff}%;Icon" of nbt of player
                set {_value} to tag "custom;BuffList;%{_buff}%;Value" of nbt of player
                set {_duration} to tag "custom;BuffList;%{_buff}%;Duration" of nbt of player
                if {_duration} != "-":
                    if tag "custom;BuffList;%{_buff}%;Type" of nbt of player = "Stacks":
                        set the result to "&f%{_icon}% %{_buff}% (%{_value}%): %{_duration}%"
                    else if tag "custom;BuffList;%{_buff}%;Type" of nbt of player is set:
                        set the result to "&f%{_icon}% %{_buff}%: %{_duration}%"
                else:
                    set the result to "&f%{_icon}% %{_buff}%: %{_value}%"
            else:
                set the result to ""
        else:
            set the result to ""
    else if the identifier is "primarystat":
        set {_health} to {health::%player%}
        if {_health} is not set:
            set {_health} to 0
        if tag "PrimaryStat" of nbt of {karta::%player%} = "Intellect":
            if {primarystat::%player%} is not set:
                set {_primaryStat} to 0
            else:
                set {_primaryStat} to {primarystat::%player%}
            set the result to "<##59c1e3> Intellect: &f%{_primaryStat}%"
        else if tag "PrimaryStat" of nbt of {karta::%player%} = "Agility":
            if {agility::%player%} is not set:
                set {_primaryStat} to 0
            else:
                set {_primaryStat} to {agility::%player%}
            set the result to "<##5ee359> &fAgility: &r%{_primaryStat}%"
        if tag "PrimaryStat" of nbt of {karta::%player%} = "Strength":
            if {strength::%player%} is not set:
                set {_primaryStat} to 0
            else:
                set {_primaryStat} to {strength::%player%}
            set the result to "<##e35959> &fStength: %{_primaryStat}%"
    else if the identifier contains "stat_":
        set {_stats::*} to retrieveTopStats(player)
        set {_i} to the identifier
        replace all "stat_" in {_i} with ""
        set {_i} to {_i} parsed as integer
        set {_stat} to returnStatIcon(({_stats::%{_i}%} in strict proper case))
        replace all " " in {_stats::%{_i}%} with ""
        set the result to "%{_stat}%: %{%{_stats::%{_i}%}%::%player%}%"

function placeholderDamage(p: player, num: number) :: string:
    if metadata value "ECEngaged" of {_p} is set:
        set {_string} to ""
        set {_stringNegative} to ""
        if {meter::%{_p}%} is not set:
            set {_topDamage::*} to createTop("dmgdealt", 5, "[P]")
            set {_player} to {_topDamage::%{_num}%}
            if {dps::%{_player}%} > 0:
                set {_damageValues::*} to createTop("dmgdealt", 5, "[V]")
                set {_damageValue} to {_damageValues::%{_num}%}
                set {_dps} to {dps::%{_player}%}
                set {_text} to "%{_player}% | %{_damageValue}% DMG"
                set {_length} to length of {_text}
                set {_cardBackground} to "%last color of name of {karta::%{_p}%}%"
                set {_split::*} to {_text} split at " "
                #if size of {_split::*} > 4:
                #    set {_length} to {_length} - 2
                #loop (length of {_player}'s name) times:
                #   set {_stringNegative} to "%{_stringNegative}%%{_cardBackground}%"
                #loop rounded (length of {_player}'s name)*2.5 times:
                #    set {_string} to "%{_string}%"
                #set {_return} to "%{_num}%.%{ikonkakarta::%{_player}%}%&r%{_stringNegative}%&r%{_string}%%{_text}%"
                set {_return} to "%{_num}%. %{ikonkakarta::%{_player}%}% %{_text}%"
            else:
                set {_return} to ""
        else:
            set {_topHealing::*} to createTop("healed", 5, "[P]")
            set {_player} to {_topHealing::%{_num}%}
            if {hps::%{_player}%} > 0:
                set {_healValues::*} to createTop("healed", 5, "[V]")
                set {_healValue} to {_healValues::%{_num}%}
                set {_hps} to {hps::%{_player}%}
                set {_text} to "%{_player}% | %{_healValue}% HEAL"
                set {_length} to length of {_text}
                set {_cardBackground} to "%last color of name of {karta::%{_p}%}%"
                set {_split::*} to {_text} split at " "
                set {_return} to "%{_num}%. %{ikonkakarta::%{_player}%}% %{_text}%"
            else:
                set {_return} to ""

        return {_return}
    else:
        return ""
